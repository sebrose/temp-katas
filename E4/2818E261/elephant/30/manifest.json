{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n            int xDelta = xCoord - other.xCoord;\n            int yDelta = yCoord - other.yCoord;\n            return (int)Math.Abs(Math.Sqrt(xDelta*xDelta + yDelta*yDelta));\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n             Coordinate a = new Coordinate(0, 0);\n             Coordinate b = new Coordinate(300, 400);\n             Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n\nScenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \nScenario: shouters should not hear their own shouts    \n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (\\d+), (\\d+)\")]\n        public void Given_Person_Is_At(string name, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n        [When(@\"(Lucy|Sean|Oscar) shouts\")]\n        public void When_Person_Shouts(string name)\n        {\n            shouty.Shout(name, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void Then_Lucy_Should_Hear_Sean()\n        {\n            var shouts = shouty.GetShoutsHeardBy(\"Lucy\");\n            Assert.IsTrue(shouts.ContainsKey(\"Sean\"));\n        }\n        [Then(@\"([^ ]*) should not hear ([^ ]*)\")]\n        public void Then_Lucy_Should_Not_Hear_Oscar(string listener, string shouter)\n        {\n            var shouts = shouty.GetShoutsHeardBy(listener);            \n            Assert.IsFalse(shouts.ContainsKey(shouter));            \n        }        \n\n        [Then(@\"Lucy should hear nothing\")]\n        public void Then_Lucy_Should_Hear_Nothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string>> shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string>> GetShoutsHeardBy(string listenerName)\n        {\n            var heard = new Dictionary<string, List<string>>();\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouterName = shout.Key;\n                var shouts = shout.Value;\n                int distance = distanceBetween(shouterName,listenerName);\n                if (!shouterName.Equals(listenerName) && distance < MESSAGE_RANGE)\n                    heard.Add(shouterName, shouts);\n            }\n            return heard;\n        }\n        \n        private int distanceBetween(string lhsName, string rhsName)\n        {\n            var lhs = locationsByPerson[lhsName];\n            var rhs = locationsByPerson[rhsName];\n            return lhs.DistanceFrom(rhs);\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.InRangeShoutIsHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.Given_Person_Is_At(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.Given_Person_Is_At(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.When_Person_Shouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.Then_Lucy_Should_Hear_Sean() (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.Given_Person_Is_At(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 500\n-> done: ShoutSteps.Given_Person_Is_At(\"Sean\", 0, 500) (0.0s)\nAnd Oscar is at 1100, 0\n-> done: ShoutSteps.Given_Person_Is_At(\"Oscar\", 1100, 0) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.When_Person_Shouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.When_Person_Shouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Oscar\n-> done: ShoutSteps.Then_Lucy_Should_Not_Hear_Oscar(\"Lucy\", \"Oscar\") (0.0s)\nBut Lucy should hear Sean\n-> done: ShoutSteps.Then_Lucy_Should_Hear_Sean() (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.Given_Person_Is_At(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 800, 800\n-> done: ShoutSteps.Given_Person_Is_At(\"Sean\", 800, 800) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.When_Person_Shouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> done: ShoutSteps.Then_Lucy_Should_Hear_Nothing() (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.Given_Person_Is_At(\"Lucy\", 0, 0) (0.0s)\nWhen Lucy shouts\n-> done: ShoutSteps.When_Person_Shouts(\"Lucy\") (0.0s)\nThen Lucy should not hear Lucy\n-> done: ShoutSteps.Then_Lucy_Should_Not_Hear_Oscar(\"Lucy\", \"Lucy\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: /sandboxes/elephant\n    ImageRuntimeVersion: 4.0.30319\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\n\nTest Run Summary\n  Overall result: Passed\n  Test Count: 7, Passed: 7, Failed: 0, Warnings: 0, Inconclusive: 0, Skipped: 0\n  Start time: 2018-04-15 15:45:19Z\n    End time: 2018-04-15 15:45:20Z\n    Duration: 1.189 seconds\n\nResults (nunit3) saved as TestResult.xml\n"}