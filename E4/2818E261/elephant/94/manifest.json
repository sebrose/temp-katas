{"output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\n<<<<<<<Before1\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven people are located at\n  --- table step argument ---\n  | name  | x    | y   |\n  | Sean  | 0    | 500 |\n  | Oscar | 1100 | 0   |\n-> skipped because of previous errors\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Oscar shouts\n-> skipped because of previous errors\nThen Lucy should not hear Oscar\n-> skipped because of previous errors\nBut Lucy should hear Sean\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nAnd Sean is at 0, 500\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear 2 shouts from Sean\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"0, 900\",\"Sean\",null)\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven Sean is at 0, 900\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear Sean\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"800, 800\",\"nothing\",null)\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven Sean is at 800, 800\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear nothing\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Lucy shouts\n-> skipped because of previous errors\nThen Lucy should not hear Lucy\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\nSystem.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x00269] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType, System.IFormatProvider provider) [0x0021b] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (System.Type typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00078] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00013] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Globalization.CultureInfo cultureInfo) [0x00030] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo) [0x00023] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine+<>c__DisplayClass45_0.<GetExecuteArguments>b__0 (System.Object arg, System.Int32 argIndex) [0x00014] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at System.Linq.Enumerable+<SelectIterator>d__157`2[TSource,TResult].MoveNext () [0x0005a] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Collections.Generic.LargeArrayBuilder`1[T].AddRange (System.Collections.Generic.IEnumerable`1[T] items) [0x0005e] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Collections.Generic.EnumerableHelpers.ToArray[T] (System.Collections.Generic.IEnumerable`1[T] source) [0x00033] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00018] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments (TechTalk.SpecFlow.Bindings.BindingMatch match) [0x00066] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0005d] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <d699ac7aaf704129a73ff19c09b2cfed>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters () [0x00105] in <d699ac7aaf704129a73ff19c09b2cfed>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n2) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\nSystem.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x00269] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType, System.IFormatProvider provider) [0x0021b] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (System.Type typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00078] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00013] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Globalization.CultureInfo cultureInfo) [0x00030] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo) [0x00023] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine+<>c__DisplayClass45_0.<GetExecuteArguments>b__0 (System.Object arg, System.Int32 argIndex) [0x00014] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at System.Linq.Enumerable+<SelectIterator>d__157`2[TSource,TResult].MoveNext () [0x0005a] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Collections.Generic.LargeArrayBuilder`1[T].AddRange (System.Collections.Generic.IEnumerable`1[T] items) [0x0005e] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Collections.Generic.EnumerableHelpers.ToArray[T] (System.Collections.Generic.IEnumerable`1[T] source) [0x00033] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00018] in <a16ef142877c4302b96a103db87ba16b>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments (TechTalk.SpecFlow.Bindings.BindingMatch match) [0x00066] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0005d] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <d699ac7aaf704129a73ff19c09b2cfed>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson () [0x00075] in <d699ac7aaf704129a73ff19c09b2cfed>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n3) Error : SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"0, 900\",\"Sean\",null)\nSystem.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x00269] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:\noutput truncated by cyber-dojo","Coordinate.cs":"using System;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n            int xDelta = xCoord - other.xCoord;\n            int yDelta = yCoord - other.yCoord;\n            return (int)Math.Abs(Math.Sqrt(xDelta*xDelta + yDelta*yDelta));\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(300, 400);\n            Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\nBackground:\n        Given Lucy is at 0, 0\n        \nScenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears |\n      | 0, 900         | Sean            |\n      | 800, 800       | nothing         |\n\n@wip\nScenario: Multiple shouters\n    Given people are located at\n        | name  | x    | y   |\n        | Sean  | 0    | 500 |\n        | Oscar | 1100 | 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \nScenario: shouters should not hear their own shouts    \n    When Lucy shouts\n    Then Lucy should not hear Lucy\n\nScenario: Multiple shouts from one person\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n\n        private readonly ShoutyNetwork shouty;\n\n        public ShoutSteps(ShoutyHelper helper)\n        {\n            shouty = helper.ShoutyNetwork;\n        }\n        \n        [When(@\"(Lucy|Sean|Oscar) shouts\")]\n        public void When_Person_Shouts(string name)\n        {\n            shouty.Shout(name, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear (.*) shouts from Sean\")]\n        public void Then_Lucy_Should_Hear_N_Shouts_From_Sean(int n)\n        {\n            var shouts = shouty.GetShoutsHeardBy(\"Lucy\");\n            Assert.AreEqual(n, shouts[\"Sean\"].Count);\n        }\n        \n        [Then(@\"Lucy should hear Sean\")]\n        public void Then_Lucy_Should_Hear_Sean()\n        {\n            var shouts = shouty.GetShoutsHeardBy(\"Lucy\");\n            Assert.IsTrue(shouts.ContainsKey(\"Sean\"));\n        }\n        \n        [Then(@\"([^ ]*) should not hear ([^ ]*)\")]\n        public void Then_Lucy_Should_Not_Hear_Oscar(string listener, string shouter)\n        {\n            var shouts = shouty.GetShoutsHeardBy(listener);            \n            Assert.IsFalse(shouts.ContainsKey(shouter));            \n        }        \n\n        [Then(@\"Lucy should hear nothing\")]\n        public void Then_Lucy_Should_Hear_Nothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string>> shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string>> GetShoutsHeardBy(string listenerName)\n        {\n            var heard = new Dictionary<string, List<string>>();\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouterName = shout.Key;\n                var shouts = shout.Value;\n                int distance = distanceBetween(shouterName,listenerName);\n                if (!shouterName.Equals(listenerName) && distance < MESSAGE_RANGE)\n                    heard.Add(shouterName, shouts);\n            }\n            return heard;\n        }\n        \n        private int distanceBetween(string lhsName, string rhsName)\n        {\n            var lhs = locationsByPerson[lhsName];\n            var rhs = locationsByPerson[rhsName];\n            return lhs.DistanceFrom(rhs);\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  #-where \"cat==wip\"\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll \nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","LocationSteps.cs":"using TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n        private readonly ShoutyNetwork shouty;\n        \n        public LocationSteps(ShoutyHelper helper)\n        {\n            shouty = helper.ShoutyNetwork;\n        }\n        \n        [Given(@\"(Lucy|Sean|Oscar) is at (.*)\")]\n        public void Given_Person_Is_At(string name, Coordinate cord)\n        {\n            shouty.SetLocation(name, cord);\n        }\n        \n        [Given(@\"people are located at\")]\n        public void Given_People_Are_Located_At(Table table)\n        {\n            foreach (var row in table.CreateSet<LocationRow>())\n            {\n                shouty.SetLocation(row.Name, new Coordinate(row.X, row.Y));                \n            }\n        }    \n        \n        [StepArgumentTransformation(@\"\\[(.*), (.*)]\")]\n         public Coordinate ConvertCoordinate(int xCoord, int yCoord)\n         {\n             return new Coordinate(xCoord, yCoord);\n         }        \n    }\n}\n","LocationRow.cs":"namespace Shouty.Specs\n{    \n    public class LocationRow\n    {\n        public string Name { get; set; }\n        public int X       { get; set; }\n        public int Y       { get; set; }\n    }\n}","ShoutyHelper.cs":"\nnamespace Shouty.Specs\n{\n    public class ShoutyHelper\n    {\n        public ShoutyNetwork ShoutyNetwork = new ShoutyNetwork();\n    }\n}\n\n","ShoutyHooks.cs":"using System;\nusing TechTalk.SpecFlow;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutyHooks\n    {\n        [BeforeScenario(\"wip\")]\n        public void Before1()\n        {\n            Console.WriteLine(\"<<<<<<<Before1\");\n        }\n\n        [AfterScenario(Order=3)]\n        public void After1()\n        {\n            WriteLine(\"<<<<<<<After1\");\n        }\n        \n        //---------------\n\n        [BeforeScenario(Order=9999)]\n        public void Before2()\n        {\n            WriteLine(\"~~~~~~~Before2\");\n        }\n\n        [AfterScenario(Order=4)]\n        public void After2()\n        {\n            WriteLine(\"~~~~~~~After2\");\n        }    \n        \n        private void WriteLine(string msg)\n        {\n            //Console.WriteLine(msg);\n        }\n    }\n}\n"}