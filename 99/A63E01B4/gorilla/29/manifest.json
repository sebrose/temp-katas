{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //return Math.abs(this.x - other.x)\n    var a = other.x - this.x;\n    var b = other.y - this.y;\n\n    var c = Math.sqrt( a*a + b*b );\n\n    return c\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n\n     assert.equal(a.distanceFrom(b), 500)\n   });\n\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    # This means Sean is approximately 1130m from Lucy\n    When Sean shouts\n    Then Lucy should hear nothing\n    \n  Scenario: Multiple Shoutes\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: Shouters should not hear their own shouts\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should hear nothing","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})\n\nGiven('{word} is at {int}, {int}', function (shouterName, x, y) {\n  shouty.setLocation(shouterName, new Coordinate(x, y))\n})\n\n//Given('{word} is at {int}, {int}', function (shouterName,x, y) {\n//  shouty.setLocation(shouterName, new Coordinate(x, y))\n///})\n\nWhen('{word} shouts', function (shouterName) {\n  shouty.shout(shouterName, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (hearerName, shouterName) {\n  if (shouterName === 'nothing') {\n    assert.equal(Object.keys(shouty.getShoutsHeardBy(hearerName)).length, 0)\n  } else {\n    assert.equal(!!shouty.getShoutsHeardBy(hearerName)[shouterName], true)\n  }\n})\n\nThen('{word} should not hear {word}', function (hearerName, shouterName) {\n  // Write code here that turns the phrase above into concrete actions\n   assert.equal(!!shouty.getShoutsHeardBy(hearerName)[shouterName], false)\n});\n\n//Then('{word} should hear nothing', function (hearerName) {\n  //assert.equal(Object.keys(shouty.getShoutsHeardBy(hearerName)).length, 0)\n//})\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE && listener !== shouter) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\n\nfunction CustomWorld() {\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...Shouty {\n  locations: { Lisa: undefined },\n  shouts: {},\n  setLocation: [Function],\n  shout: [Function],\n  getShoutsHeardBy: [Function] }\nF\n\nFailures:\n1) coordinate class The shout should not be heard by the person who shouted it\n  Message:\n    TypeError: Cannot read property 'distanceFrom' of undefined\n  Stack:\n    TypeError: Cannot read property 'distanceFrom' of undefined\n        at Object.keys.forEach.shouter (/sandboxes/gorilla/shouty.js:22:48)\n        at Array.forEach (<anonymous>)\n        at Shouty.getShoutsHeardBy (/sandboxes/gorilla/shouty.js:20:30)\n        at UserContext.it (/sandboxes/gorilla/tests/shouty.test.js:11:30)\n\n4 specs, 1 failure\nFinished in 0.014 seconds\n\nCUCUMBER FEATURES\n=================\n......................\n\n4 scenarios (4 passed)\n18 steps (18 passed)\n0m00.003s\n","tests/shouty.test.js":"var assert = require('assert')\nvar shouty = require('../shouty')\nvar coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"The shout should not be heard by the person who shouted it\", () => {\n    var a = \"Lisa\";\n    var b = \"Lisa\";\n    var shoutySetup = setUpShouts(a,\"BLAH\");\n    var result = shoutySetup.getShoutsHeardBy(a);\n    assert.equal(!!result[b], false)\n  })\n\n  function setUpShouts(shouter,shoutMsg){\n    var sh = new shouty();\n    sh.setLocation(shouter, coordinate(0,0));\n    console.log(sh);\n    sh.shout(shouter,shoutMsg);\n    return sh;\n  }\n\n\n})\n"}