{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //return Math.abs(this.x - other.x)\n    var a = other.x - this.x;\n    var b = other.y - this.y;\n\n    var c = Math.sqrt( a*a + b*b );\n    console.log(`DistanceFrom : ${c}`);\n    \n    return c\n  }\n  \n  this.print = function () {\n    return `x: ${this.x}, y: ${this.y}`;\n  };\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n\n     assert.equal(a.distanceFrom(b), 500)\n   });\n\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\nBackground:\n    Given Lucy is at 0, 0\n   \n  @ShoutMoving\n  Scenario: Lucy moves between shouts\n    Given Sean is at 1100, 0\n    And Sean shouts\n    When Sean is at 900, 0\n    And Sean shouts\n    Then Lucy should hear 1 shouts from Sean\n    \n  \n  @ShoutHeard\n  Scenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n     \n    Examples: only hear in-range shouts\n      | Seans-location | what-Lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800       | nothing         |\n    \n  @ShoutHeard\n  Scenario: multiple locations\n    Given people are located at\n    | name | x | y |\n    | Sean | 0 | 500|\n    | Oscar | 1100 | 0 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  @ShoutNotHeard\n  Scenario: Shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should hear nothing\n    \n  @ShoutHeard\n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n    \n    ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nBefore({tags: '@ShoutHeard or @ShoutNotHeard'}, function() {\nconsole.log('Shout herad or not heard');\n})\n\nBefore({tags: '@ShoutHeard'}, function() {\nconsole.log('Shout herad ');\n})\n\n//Given('{word} is at {int}, {int}', function (shouterName,x, y) {\n//  shouty.setLocation(shouterName, new Coordinate(x, y))\n///})\n\nThen('{word} shouts', function (shouterName) {\n  this.shouty.shout(shouterName, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (hearerName, shouterName) {\n  if (shouterName === 'nothing') {\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(hearerName)).length, 0)\n  } else {\n    assert.equal(!!this.shouty.getShoutsHeardBy(hearerName)[shouterName], true)\n  }\n})\n\nThen('{word} should not hear {word}', function (hearerName, shouterName) {\n  // Write code here that turns the phrase above into concrete actions\n   assert.equal(!!this.shouty.getShoutsHeardBy(hearerName)[shouterName], false)\n});\n\nThen('{word} should hear {int} shouts from {word}', function (hearerName,shoutsCount,shouterName) {\n  const gotShouts = this.shouty.getShoutsHeardBy(hearerName)[shouterName];\n   assert.equal(gotShouts ? gotShouts.length : 0, shoutsCount)\n});\n\n//Then('{word} should hear nothing', function (hearerName) {\n  //assert.equal(Object.keys(shouty.getShoutsHeardBy(hearerName)).length, 0)\n//})\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push({\n      message: shout,\n      listeners: this.locations && Object.keys(this.locations).filter(listener => {\n        var distance = this.locations[listener].distanceFrom(this.locations[person])\n        return distance < MESSAGE_RANGE && listener !== person;\n      })\n    })\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n      if (!this.shouts[shouter]) return;\n      console.log(this.shouts[shouter]);\n      shoutsHeard[shouter] = [];\n      this.shouts[shouter].forEach(shouts => {\n        let personsShouts = shouts.listeners && shouts.listeners.filter(thisListener => thisListener === listener);\n        if (personsShouts && personsShouts.length) shoutsHeard[shouter].push(personsShouts[0].message);\n      });\n      //var personsShouts = this.shouts[shouter].listeners && this.shouts[shouter].listeners.filter(thisListener => thisListener === listener);\n      //console.log(personsShouts);\n      //if (personsShouts && personsShouts.length) shoutsHeard[shouter] = personsShouts[0].message\n    })\n\n    console.log(`listener: ${listener}`);\n    console.log(`shoutsHeard: ${JSON.stringify(shoutsHeard)}`);\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty');\n\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n}\n\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --tags \"@ShoutMoving\" \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\nDistanceFrom : 0\n.DistanceFrom : 600\n.DistanceFrom : 500\n.Shouty {\n  locations: { Lisa: Coordinate { x: 0, y: 0, distanceFrom: [Function], print: [Function] } },\n  shouts: {},\n  setLocation: [Function],\n  shout: [Function],\n  getShoutsHeardBy: [Function] }\nDistanceFrom : 0\n[ { message: 'BLAH', listeners: [] } ]\nlistener: Lisa\nshoutsHeard: {\"Lisa\":[]}\nF\n\nFailures:\n1) coordinate class The shout should not be heard by the person who shouted it\n  Message:\n    AssertionError [ERR_ASSERTION]: true == false\n  Stack:\n    AssertionError [ERR_ASSERTION]: true == false\n        at UserContext.it (/sandboxes/gorilla/tests/shouty.test.js:12:12)\n\n4 specs, 1 failure\nFinished in 0.016 seconds\n\nCUCUMBER FEATURES\n=================\nError: (32:3): expected: #EOF, #TableRow, #DocStringSeparator, #StepLine, #TagLine, #ExamplesLine, #ScenarioLine, #ScenarioOutlineLine, #Comment, #Empty, got 'Examples'\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:89:15\n    at Array.forEach (<anonymous>)\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:76:12\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n    at /home/cucumber/node_modules/bluebird/js/release/generators.js:201:15\n    at getTestCases (/home/cucumber/node_modules/cucumber/lib/cli/helpers.js:96:18)\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:45:39\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n    at Promise._settlePromise (/home/cucumber/node_modules/bluebird/js/release/promise.js:574:26)\n    at Promise._settlePromise0 (/home/cucumber/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/home/cucumber/node_modules/bluebird/js/release/promise.js:693:18)\n    at Async._drainQueue (/home/cucumber/node_modules/bluebird/js/release/async.js:133:16)\n","tests/shouty.test.js":"var assert = require('assert')\nvar shouty = require('../shouty')\nvar coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"The shout should not be heard by the person who shouted it\", () => {\n    var a = \"Lisa\";\n    var b = \"Lisa\";\n    var shoutySetup = setUpShouts(a,\"BLAH\");\n    var result = shoutySetup.getShoutsHeardBy(a);\n    assert.equal(!!result[b], false)\n  })\n\n  function setUpShouts(shouter,shoutMsg){\n    var sh = new shouty();\n    sh.setLocation(shouter, new coordinate(0,0));\n    console.log(sh);\n    sh.shout(shouter,shoutMsg);\n    return sh;\n  }\n\n\n})\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nBefore(function() {\nconsole.log('BEFORE4444');\n})\n\nThen('{word} is at {coordinate}', function (shouterName, coordinate) {\n  console.log('Then');\n  console.log(`shouterName: ${shouterName}`);\n    console.log(`coordinate: ${coordinate.print()}`);\n  this.shouty.setLocation(shouterName, coordinate)\n})\n\nThen('people are located at' ,function(table){\n  table.hashes().forEach(row => {\n    this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n})\n\n\n","features/shouty_hooks.js":"var {Before, After } = require('cucumber')\n\nBefore(function() {\n//console.log('BEFORE');\n})\n\nAfter(function() {\n//console.log('AFTER');\n})\n\nBefore(function() {\n//console.log('BEFORE222');\n})\n\nAfter(function() {\n//console.log('AFTER222');\n})\n","features/paramter_types.js":"const {defineParameterType} = require('cucumber');\nconst Coordinate = require('../coordinate');\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n});","features/dnd.feature":"Feature: Do not disturb\n\nListeners should be able to activate a DND mode\n\nScenario: Listener adds shouter to DND list\n  Given Bob adds Jill to DND list\n  When Jill shouts\n  Then Bob should not hear Jill\n\nScenario: Listener removes shouter from DND list\n  Given Bob has Jill on DND list\n  When Bob removes Jill from DND list\n  And Jill Shouts\n  Then Bob should hear Jill\n\nScenario: DND Mode mutes all shouters by default\n  Given Bob enables DND mode\n  When Jill shouts\n  Then Bob should not hear Jill\n\nScenario: DND Mode unmutes all shouters \n  Given Bob enables DND Mode\n  When Bob disables DND Mode\n  And Jill shouts\n  Then Bob Should hear Jill\n\nScenario Outline: Bob sets a 1000m DND limit\n  Given Bob enables DND mode beyond 1000m\n  And <Shouter> is <Distance>m away\n  When <Shouter> shouts\n  Then Bob <Hear> hear <Shouter>\n  Examples\n    | Shouter | Distance | Hear       |\n    | Jill    | 1100     | should not |\n    | Jane    | 800      | should     |\n    \nScenario: Listener unmuted after period of time\n  Given Bob adds Jill to DND list\n  And 9 hours elapse\n  When Jill shouts\n  Then Bob should hear Jill\n\nScenario: Shouts log while muted\n  Given Bob adds Jill to DND list\n  And Jill shouts\n  When 9 hours elapse \n  Then Bob can see missed shout from Jill in log\n\n"}