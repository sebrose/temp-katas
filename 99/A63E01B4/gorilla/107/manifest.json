{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //return Math.abs(this.x - other.x)\n    var a = other.x - this.x;\n    var b = other.y - this.y;\n\n    var c = Math.sqrt( a*a + b*b );\n    \n    return c\n  }\n  \n  this.print = function () {\n    return `x: ${this.x}, y: ${this.y}`;\n  };\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n\n     assert.equal(a.distanceFrom(b), 500)\n   });\n\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\nBackground:\n    Given Lucy is at 0, 0\n   \n  @ShoutMoving\n  Scenario: Lucy moves between shouts\n    Given Sean is at 1100, 0\n    And Sean shouts\n    When Sean is at 900, 0\n    And Sean shouts\n    Then Lucy should hear 1 shouts from Sean\n    \n  \n  @ShoutHeard\n  Scenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n     \n    Examples: only hear in-range shouts\n      | Seans-location | what-Lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800       | nothing         |\n    \n  @ShoutHeard\n  Scenario: multiple locations\n    Given people are located at\n    | name | x | y |\n    | Sean | 0 | 500|\n    | Oscar | 1100 | 0 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  @ShoutNotHeard\n  Scenario: Shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should hear nothing\n    \n  @ShoutHeard\n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n    \n    ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nBefore({tags: '@ShoutHeard or @ShoutNotHeard'}, function() {\n})\n\nBefore({tags: '@ShoutHeard'}, function() {\n})\n\n//Given('{word} is at {int}, {int}', function (shouterName,x, y) {\n//  shouty.setLocation(shouterName, new Coordinate(x, y))\n///})\n\nThen('{word} shouts', function (shouterName) {\n  this.shouty.shout(shouterName, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (hearerName, shouterName) {\n  if (shouterName === 'nothing') {\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(hearerName)).length, 0)\n  } else {\n    assert.equal(!!this.shouty.getShoutsHeardBy(hearerName)[shouterName], true)\n  }\n})\n\nThen('{word} should not hear {word}', function (hearerName, shouterName) {\n  // Write code here that turns the phrase above into concrete actions\n   assert.equal(!!this.shouty.getShoutsHeardBy(hearerName)[shouterName], false)\n});\n\nThen('{word} should hear {int} shouts from {word}', function (hearerName,shoutsCount,shouterName) {\n  const gotShouts = this.shouty.getShoutsHeardBy(hearerName)[shouterName];\n   assert.equal(gotShouts ? gotShouts.length : 0, shoutsCount)\n});\n\n//Then('{word} should hear nothing', function (hearerName) {\n  //assert.equal(Object.keys(shouty.getShoutsHeardBy(hearerName)).length, 0)\n//})\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push({\n      message: shout,\n      listeners: this.locations && Object.keys(this.locations).filter(listener => {\n        var distance = this.locations[listener].distanceFrom(this.locations[person])\n        return distance < MESSAGE_RANGE && listener !== person;\n      })\n    })\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n      if (!this.shouts[shouter]) return;\n      //console.log(this.shouts[shouter]);\n      \n      this.shouts[shouter].forEach(shouts => {\n        let personsShouts = shouts.listeners && shouts.listeners.filter(thisListener => thisListener === listener);\n        if (personsShouts && personsShouts.length) {\n          shoutsHeard[shouter] = shoutsHeard[shouter] || [];\n          shoutsHeard[shouter].push(personsShouts[0].message);\n        }\n      });\n      //var personsShouts = this.shouts[shouter].listeners && this.shouts[shouter].listeners.filter(thisListener => thisListener === listener);\n      //console.log(personsShouts);\n      //if (personsShouts && personsShouts.length) shoutsHeard[shouter] = personsShouts[0].message\n    })\n\n    //console.log(`listener: ${listener}`);\n    //console.log(`shoutsHeard: ${JSON.stringify(shoutsHeard)}`);\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty');\n\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n}\n\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n....\n\n\n4 specs, 0 failures\nFinished in 0.01 seconds\n\nCUCUMBER FEATURES\n=================\n...P--.....P---.....U--.....PU--.....P---.....P---.....P---.....P---.....................................................................\n\nWarnings:\n\n1) Scenario: Listener adds shouter to DND list # ../../../../../sandboxes/gorilla/features/dnd.feature:5\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob has Jill on DND list # ../../../../../sandboxes/gorilla/features/dnd_steps.js:4\n       Pending\n   - When Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should not hear Jill # ../../../../../sandboxes/gorilla/features/shout_steps.js:31\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n2) Scenario: Listener removes shouter from DND list # ../../../../../sandboxes/gorilla/features/dnd.feature:10\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob has Jill on DND list # ../../../../../sandboxes/gorilla/features/dnd_steps.js:4\n       Pending\n   - When Bob removes Jill from DND list # ../../../../../sandboxes/gorilla/features/dnd_steps.js:9\n   - And Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should hear Jill # ../../../../../sandboxes/gorilla/features/shout_steps.js:23\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n3) Scenario: DND Mode mutes all shouters by default # ../../../../../sandboxes/gorilla/features/dnd.feature:16\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob enables DND mode\n       Undefined. Implement with the following snippet:\n\n         Given('Bob enables DND mode', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - When Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should not hear Jill # ../../../../../sandboxes/gorilla/features/shout_steps.js:31\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n4) Scenario: DND Mode unmutes all shouters # ../../../../../sandboxes/gorilla/features/dnd.feature:21\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob enables DND Mode # ../../../../../sandboxes/gorilla/features/dnd_steps.js:14\n       Pending\n   ? When Bob disables DND Mode\n       Undefined. Implement with the following snippet:\n\n         When('Bob disables DND Mode', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - And Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob Should hear Jill # ../../../../../sandboxes/gorilla/features/dnd_steps.js:20\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n5) Scenario: Bob sets a 1000m DND limit # ../../../../../sandboxes/gorilla/features/dnd.feature:34\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob enables DND mode beyond 1000m # ../../../../../sandboxes/gorilla/features/dnd_steps.js:31\n       Pending\n   - And Jill is 1100m away # ../../../../../sandboxes/gorilla/features/dnd_steps.js:26\n   - When Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should not hear Jill # ../../../../../sandboxes/gorilla/features/shout_steps.js:31\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n6) Scenario: Bob sets a 1000m DND limit # ../../../../../sandboxes/gorilla/features/dnd.feature:35\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob enables DND mode beyond 1000m # ../../../../../sandboxes/gorilla/features/dnd_steps.js:31\n       Pending\n   - And Jane is 800m away # ../../../../../sandboxes/gorilla/features/dnd_steps.js:26\n   - When Jane shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should hear Jane # ../../../../../sandboxes/gorilla/features/shout_steps.js:23\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n7) Scenario: Listener unmuted after period of time # ../../../../../sandboxes/gorilla/features/dnd.feature:37\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob has Jill on DND list # ../../../../../sandboxes/gorilla/features/dnd_steps.js:4\n       Pending\n   - And 9 hours elapse # ../../../../../sandboxes/gorilla/features/dnd_steps.js:37\n   - When Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - Then Bob should hear Jill # ../../../../../sandboxes/gorilla/features/shout_steps.js:23\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n8) Scenario: Shouts log while muted # ../../../../../sandboxes/gorilla/features/dnd.feature:43\n   ✔ Before # ../../../../../sandboxes/gorilla/features/location_steps.js:8\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:3\n   ✔ Before # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:11\n   ? Given Bob has Jill on DND list # ../../../../../sandboxes/gorilla/features/dnd_steps.js:4\n       Pending\n   - And Jill shouts # ../../../../../sandboxes/gorilla/features/shout_steps.js:19\n   - When 9 hours elapse # ../../../../../sandboxes/gorilla/features/dnd_steps.js:37\n   - Then Bob can see missed shout from Jill in log # ../../../../../sandboxes/gorilla/features/dnd_steps.js:43\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/gorilla/features/shouty_hooks.js:7\n\n14 scenarios (1 undefined, 7 pending, 6 passed)\n58 steps (2 undefined, 7 pending, 21 skipped, 28 passed)\n0m00.023s\n","tests/shouty.test.js":"var assert = require('assert')\nvar shouty = require('../shouty')\nvar coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"The shout should not be heard by the person who shouted it\", () => {\n    var a = \"Lisa\";\n    var b = \"Lisa\";\n    var shoutySetup = setUpShouts(a,\"BLAH\");\n    var result = shoutySetup.getShoutsHeardBy(a);\n    assert.equal(!!result[b], false)\n  })\n\n  function setUpShouts(shouter,shoutMsg){\n    var sh = new shouty();\n    sh.setLocation(shouter, new coordinate(0,0));\n    //console.log(sh);\n    sh.shout(shouter,shoutMsg);\n    return sh;\n  }\n\n\n})\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nBefore(function() {\n})\n\nThen('{word} is at {coordinate}', function (shouterName, coordinate) {\n  this.shouty.setLocation(shouterName, coordinate)\n})\n\nThen('people are located at' ,function(table){\n  table.hashes().forEach(row => {\n    this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n})\n\n\n","features/shouty_hooks.js":"var {Before, After } = require('cucumber')\n\nBefore(function() {\n//console.log('BEFORE');\n})\n\nAfter(function() {\n//console.log('AFTER');\n})\n\nBefore(function() {\n//console.log('BEFORE222');\n})\n\nAfter(function() {\n//console.log('AFTER222');\n})\n","features/paramter_types.js":"const {defineParameterType} = require('cucumber');\nconst Coordinate = require('../coordinate');\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n});","features/dnd.feature":"Feature: Do not disturb\n\nListeners should be able to activate a DND mode\n\nScenario: Listener adds shouter to DND list\n  Given Bob has Jill on DND list\n  When Jill shouts\n  Then Bob should not hear Jill\n\nScenario: Listener removes shouter from DND list\n  Given Bob has Jill on DND list\n  When Bob removes Jill from DND list\n  And Jill shouts\n  Then Bob should hear Jill\n\nScenario: DND Mode mutes all shouters by default\n  Given Bob enables DND mode\n  When Jill shouts\n  Then Bob should not hear Jill\n\nScenario: DND Mode unmutes all shouters \n  Given Bob enables DND Mode\n  When Bob disables DND Mode\n  And Jill shouts\n  Then Bob Should hear Jill\n\nScenario Outline: Bob sets a 1000m DND limit\n  Given Bob enables DND mode beyond 1000m\n  And <Shouter> is <Distance>m away\n  When <Shouter> shouts\n  Then Bob <Hear> hear <Shouter>\n  Examples:\n    | Shouter | Distance | Hear       |\n    | Jill    | 1100     | should not |\n    | Jane    | 800      | should     |\n    \nScenario: Listener unmuted after period of time\n  Given Bob has Jill on DND list\n  And 9 hours elapse\n  When Jill shouts\n  Then Bob should hear Jill\n\nScenario: Shouts log while muted\n  Given Bob has Jill on DND list\n  And Jill shouts\n  When 9 hours elapse \n  Then Bob can see missed shout from Jill in log\n\n","features/dnd_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nGiven('{word} has {word} on DND list', function (listener, shouter) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nWhen('{word} removes {word} from DND list', function (listener, shouter) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nGiven('{word} enables DND Mode', function (listener) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n\nThen('{word} Should hear {word}', function (listener, shouter) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n\nGiven('{word} is {int}m away', function (name, int) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nGiven('{word} enables DND mode beyond {int}m', function (listener, int) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n\nGiven('{int} hours elapse', function (int) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n\nThen('{word} can see missed shout from {word} in log', function (listener, shouter) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n\n"}