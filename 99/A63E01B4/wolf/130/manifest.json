{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    x_delta = Math.pow(other.x - this.x, 2)\n    y_delta = Math.pow(other.y - this.y, 2)\n    return Math.sqrt(x_delta + y_delta);\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n     \n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(300, 400)\n\n    assert.equal(a.distanceFrom(b), 500)\n  })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n   \n  Background:\n    Given Lucy is at 0, 0\n\n  Scenario: Lucy hears in-range shout\n    Given Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear shout from Sean\n    \n  Scenario: Lucy doesn't hear out-of-range shout\n    Given Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n\n  Scenario: Multiple shouters\n    Given people are located at\n      | name  | x    | y   |\n      | Sean  | 0    | 500 |\n      | Oscar | 1100 | 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear shout from Sean\n    \n  Scenario: Shouters cannot hear their own shouts\n    Given Sean is at 0, 500\n    When Sean shouts\n    Then Sean should not hear Sean\n    \n    \n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts\n    \n    \n    \n  \n  \n  \n  ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nWhen('{word} shouts {word}', function (name, shout) {\n  this.shouty.shout(name, shout)\n})\n\nThen('{word} should hear shout from Sean', function (name) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name)).length, 1)\n})\n\nThen('{word} should hear nothing', function (name) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name)).length, 0)\n})\n\nThen('{word} should not hear {word}', function (receiver, shouter) {\n  shoutsHeard = Object.keys(this.shouty.getShoutsHeardBy(receiver))\n  assert.equal(false, shoutsHeard.includes(shouter))\n});\n\nThen('{word} should hear {int} shouts', function (receiver, numberOfShouts) {\n  shoutsHeardFromShouter = this.shouty.getShoutsHeardBy(receiver)\n  this.shouts = shoutsHeardFromShouter\n  assert.equal(numberOfShouts, shoutsHeardFromShouter.length)\n});\n\nThen('the shout should be {word}', function (word) {\n  assert.equal(true, this.shouts[0] == word)\n});\n\nWhen('{word} mutes {word}', function (listener, shouter) {\n  this.shouty.mute(listener, shouter)\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.muted = {}\n  this.allMuted = {}\n  this.heardShouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(shouter, shout) {\n    Object.keys(this.locations).forEach(listener => {\n      let distanceFromShouter = this.locations[listener].distanceFrom(this.locations[shouter])\n      let isShouterMuted = this.muted[listener] !== undefined && this.muted[listener].includes(shouter)\n      let isAllMuted = this.allMuted[listener] !== undefined && this.allMuted[listener]\n      if(!(listener in this.heardShouts)) {\n        this.heardShouts[listener] = []\n      }\n      if (distanceFromShouter < MESSAGE_RANGE && !isShouterMuted && !isAllMuted) {\n        this.heardShouts[listener].push(shout) \n      }\n    })\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    return this.heardShouts[listener]\n  }\n  \n  this.mute = function(person, shouter){\n    if(!(person in this.muted)) {\n      this.muted[person] = []\n    }\n    this.muted[person].push(shouter)\n  }\n  \n  this.unmute = function(person, shouter) {\n    if(person in this.muted) {\n      this.muted[person] = this.muted[person].filter(name => name != shouter)\n    }\n  }\n  \n  this.unmuteAll = function(person) {\n    if(person in this.muted) {\n      this.muted[person] = []\n      this.allMuted[person] = false\n    }\n  }\n  \n  this.muteAll = function(person) {\n    this.allMuted[person] = true \n  }\n  \n}\n\n\n\n\n\n\n\n\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n  this.shouts = {}\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n........\n\n\n8 specs, 0 failures\nFinished in 0.011 seconds\n\nCUCUMBER FEATURES\n=================\n............................................P--....P--....P--....P---............P----..\n\nWarnings:\n\n1) Scenario: User mutes all shouts for 1 hour # ../../../../../sandboxes/wolf/features/mutable_shouts.feature:20\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ✔ And Sean is at 0, 100 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ? Given Lucy mutes all shouts for 1 hour # ../../../../../sandboxes/wolf/features/mute_steps.js:6\n       Pending\n   - When Sean shouts Hello after 10 minutes # ../../../../../sandboxes/wolf/features/mute_steps.js:31\n   - Then Lucy should hear nothing # ../../../../../sandboxes/wolf/features/shout_steps.js:18\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:11\n\n2) Scenario: User hears shouts after mute expiry # ../../../../../sandboxes/wolf/features/mutable_shouts.feature:25\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ✔ And Sean is at 0, 100 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ? Given Lucy mutes all shouts for 1 hour # ../../../../../sandboxes/wolf/features/mute_steps.js:6\n       Pending\n   - When Sean shouts Hello after 2 hours # ../../../../../sandboxes/wolf/features/mute_steps.js:36\n   - Then Lucy should hear shout with content Hello # ../../../../../sandboxes/wolf/features/mute_steps.js:41\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:11\n\n3) Scenario: User mutes all shouts indefinitely # ../../../../../sandboxes/wolf/features/mutable_shouts.feature:30\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ✔ And Sean is at 0, 100 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ? Given Lucy mutes all shouts indefinitely # ../../../../../sandboxes/wolf/features/mute_steps.js:11\n       Pending\n   - When Sean shouts Hello # ../../../../../sandboxes/wolf/features/shout_steps.js:10\n   - Then Lucy should hear nothing # ../../../../../sandboxes/wolf/features/shout_steps.js:18\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:11\n\n4) Scenario: User ends global mute early # ../../../../../sandboxes/wolf/features/mutable_shouts.feature:35\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ✔ And Sean is at 0, 100 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ? Given Lucy mutes all shouts indefinitely # ../../../../../sandboxes/wolf/features/mute_steps.js:11\n       Pending\n   - And Lucy unmutes # ../../../../../sandboxes/wolf/features/mute_steps.js:21\n   - When Sean shouts Hello # ../../../../../sandboxes/wolf/features/shout_steps.js:10\n   - Then Lucy should hear shout with content Hello # ../../../../../sandboxes/wolf/features/mute_steps.js:41\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:11\n\n5) Scenario: User mutes some shouts for 1 hour # ../../../../../sandboxes/wolf/features/mutable_shouts.feature:47\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ✔ And Sean is at 0, 100 # ../../../../../sandboxes/wolf/features/location_steps.js:6\n   ? Given Lucy mutes Sean for 1 hour # ../../../../../sandboxes/wolf/features/mute_steps.js:16\n       Pending\n   - When Sean shouts Hello after 10 minutes # ../../../../../sandboxes/wolf/features/mute_steps.js:31\n   - And Oscar shouts World after 15 minutes # ../../../../../sandboxes/wolf/features/mute_steps.js:31\n   - Then Lucy should not hear Hello # ../../../../../sandboxes/wolf/features/shout_steps.js:22\n   - But Lucy should hear shout with content World # ../../../../../sandboxes/wolf/features/mute_steps.js:41\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:15\n   ✔ After # ../../../../../sandboxes/wolf/features/shouty_hooks.js:11\n\n12 scenarios (5 pending, 7 passed)\n64 steps (5 pending, 13 skipped, 46 passed)\n0m00.021s\n","tests/shouty.test.js":"var assert = require('assert')\nvar Shouty = require('../shouty.js')\nvar Coordinate = require('../coordinate')\n\ndescribe('shouty class', () => {\n  it('person should not hear their own shout', () => {\n    var person = 'Sean'\n    var shouty = new Shouty()\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.shout(person, 'Hello world')\n    shoutsHeard = Object.keys(shouty.getShoutsHeardBy(person))\n    assert.equal(false, shoutsHeard.includes(person))\n  }),\n    \n  it('person mutes a shouter', () => {\n    var person = 'Sean'\n    var shouter = 'Lucy'\n    var shouty = new Shouty()\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.setLocation(shouter, new Coordinate(0, 100))\n    shouty.shout(shouter, 'Hello world, mute 1')\n    shouty.mute(person, shouter)\n    shouty.shout(shouter, 'Hello world again, mute 2')\n    shoutsHeard = shouty.getShoutsHeardBy(person)\n    assert.equal(1, shoutsHeard.length)\n  })\n  \n  it('person mutes all', () => {\n    var person = 'Sean'\n    var shouter1 = 'Lucy'\n    var shouter2 = 'Scott'\n    var shouty = new Shouty()\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.setLocation(shouter1, new Coordinate(0, 100))\n    shouty.setLocation(shouter2, new Coordinate(100, 100))\n    shouty.shout(shouter1, 'Hello world, shouter 1 before mute')\n    shouty.shout(shouter2, 'Hello world, shouter 2 before mute')\n    shouty.muteAll(person)\n    shouty.shout(shouter1, 'Hello world, shouter 1 after mute')\n    shouty.shout(shouter2, 'Hello world, shouter 2 after mute')\n    shoutsHeard = shouty.getShoutsHeardBy(person)\n    assert.equal(2, shoutsHeard.length)\n  })\n  \n  it('person unmutes a shouter', () => {\n    var person = \"Sean\"\n    var shouter = \"Lucy\"\n    var shouty = new Shouty()\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.setLocation(shouter, new Coordinate(0, 100))\n    shouty.mute(person, shouter)\n    shouty.unmute(person, shouter)\n    shouty.shout(shouter, 'Hello world again, after unmute')\n    shoutsHeard = shouty.getShoutsHeardBy(person)\n    assert.equal(1, shoutsHeard.length)\n    \n  });\n  \n  it('person unmutes globally', () => {\n    var person = \"Lucy\"\n    var shouter = \"Sean\"\n    var shouty = new Shouty()\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.setLocation(shouter, new Coordinate(0, 100))\n    shouty.mute(person, shouter)\n    shouty.unmuteAll(person)\n    shouty.shout(shouter, 'Hello world again, after unmute')\n    shoutsHeard = shouty.getShoutsHeardBy(person)\n    assert.equal(1, shoutsHeard.length)\n  });\n  \n  /*\n  it('person moves further away between shouts', () => {\n    var person = 'Sean'\n    var shouter = 'Lucy'\n    var shouty = new Shouty()\n    shouty.shout(shouter, 'Hello world')\n    shouty.setLocation(person, new Coordinate(0, 0))\n    shouty.setLocation(shouter, new Coordinate(0, 100))\n    shouty.setLocation(person, new Coordinate(0, 1100))\n    shouty.shout(shouter, 'Hello world again')\n    shoutsHeard = shouty.getShoutsHeardBy(person)\n    assert.equal(1, shoutsHeard.length)\n  })\n  */\n})\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Coordinate = require('../coordinate')\n\n\nWhen('{word} is at {coordinate}', function (name, coordinate) {\n  this.shouty.setLocation(name, coordinate)\n})\n\nGiven('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n    this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n})\n","features/shouty_hooks.js":"var { Before, After } = require('cucumber')\n\nBefore({tags: \"@wip\"}, () => {\n  //console.log('This is the before hook')\n})\n\nBefore({tags: \"@ShoutHeard\"}, () => {\n  //console.log('This is the second before hook')\n})\n\nAfter(() => {\n  //console.log('This is the after hook')\n})\n\nAfter(() => {\n  //console.log('This is the second after hook')\n})","features/parameter_types.js":"const { defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n})","features/mutable_shouts.feature":"Feature: Mutable Shouts\n\n  Rules:\n    - User can mute a shouter indefinitely\n    - User can mute a shouter for time frame\n    - User can mute all shouts for a time frame\n    - User can mute a particular hashtag\n    \n  Background:\n    Given Lucy is at 0, 0\n    And Sean is at 0, 100\n      \n  Scenario: User mutes a shout indefinitely\n    Given Lucy shouts Hello\n    And Sean mutes Lucy\n    When Lucy shouts World\n    Then Sean should hear 1 shouts\n    And the shout should be Hello\n    \n  Scenario: User mutes all shouts for 1 hour\n    Given Lucy mutes all shouts for 1 hour\n    When Sean shouts Hello after 10 minutes\n    Then Lucy should hear nothing\n  \n  Scenario: User hears shouts after mute expiry\n    Given Lucy mutes all shouts for 1 hour\n    When Sean shouts Hello after 2 hours\n    Then Lucy should hear shout with content Hello\n  \n  Scenario: User mutes all shouts indefinitely\n    Given Lucy mutes all shouts indefinitely\n    When Sean shouts Hello\n    Then Lucy should hear nothing\n    \n   Scenario: User ends global mute early\n    Given Lucy mutes all shouts indefinitely\n    And Lucy unmutes\n    When Sean shouts Hello\n    Then Lucy should hear shout with content Hello\n    \n   Scenario: User ends specific mute early\n    Given Lucy mutes Sean\n    When Lucy unmutes Sean\n    And Sean shouts Hello\n    Then Lucy should hear shout with content Hello\n    \n   Scenario: User mutes some shouts for 1 hour\n    Given Lucy mutes Sean for 1 hour\n    When Sean shouts Hello after 10 minutes\n    And Oscar shouts World after 15 minutes\n    Then Lucy should not hear Hello\n    But Lucy should hear shout with content World\n    \n    \n    \n    \n    \n    \n    \n    \n  ","features/mute_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nGiven('{word} mutes all shouts for {int} hour', function (user, number) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nGiven('{word} mutes all shouts indefinitely', function (user) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nGiven('{word} mutes {word} for {int} hour', function (user, shouter, number) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nGiven('{word} unmutes', function (name) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nWhen('{word} unmutes {word}', function (name, shouter) {\n  // Write code here that turns the phrase above into concrete actions\n  this.shouty.unmute(name, shouter)\n});\n\nWhen('{word} shouts {word} after {int} minutes', function (name, shout, number) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nWhen('{word} shouts {word} after {int} hours', function (name, shout, number) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\nThen('{word} should hear shout with content {word}', function (name, shout) {\n  shoutsHeardFromShouter = this.shouty.getShoutsHeardBy(name)\n  assert.equal(true, shoutsHeardFromShouter.includes(shout))\n});\n\n"}