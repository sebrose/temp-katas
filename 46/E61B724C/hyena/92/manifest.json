{"output":"JASMINE TESTS\n=============\nStarted\n..\n\n\n2 specs, 0 failures\nFinished in 0.006 seconds\n\nCUCUMBER FEATURES\n=================\nStart the web server\n.Deploy the app\n.....Undeploy the app\n.Stop the web server\n.Start the web server\n.Deploy the app\n.....Undeploy the app\n.Stop the web server\n.Deploy the app\n.......Undeploy the app\n.Deploy the app\n....Undeploy the app\n.Deploy the app\n......Undeploy the app\n.Deploy the app\n..P---Undeploy the app\n.\n\nWarnings:\n\n1) Scenario: Lucy enters range during live time # ../../../../../sandboxes/hyena/features/hear_shout.feature:38\n   ✔ Before # ../../../../../sandboxes/hyena/features/shouty_hooks.js:11\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/hyena/features/location_steps.js:9\n   ? Given Sean shouts at 06:00 # ../../../../../sandboxes/hyena/features/shout_steps.js:30\n       Pending\n   - And Selects shouts with live time of 3:00 # ../../../../../sandboxes/hyena/features/shout_steps.js:35\n   - When Lucy enters range before 09:00 # ../../../../../sandboxes/hyena/features/shout_steps.js:40\n   - Then Lucy should hear Sean # ../../../../../sandboxes/hyena/features/shout_steps.js:13\n   ✔ After # ../../../../../sandboxes/hyena/features/shouty_hooks.js:15\n\n6 scenarios (1 pending, 5 passed)\n27 steps (1 pending, 3 skipped, 23 passed)\n0m00.021s\n","coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // return other.x - this.x\n    return Math.sqrt(Math.pow((other.x - this.x),2) + Math.pow((other.y-this.y),2))\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  // it(\"should calculate the distance from another coordinate\", ()=>{\n  //   var a = new Coordinate(0, 0)\n  //   var b = new Coordinate(300, 400)\n  //\n  //   assert.equal(a.distanceFrom(b), 500)\n  // })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background: \n    Given Lucy is at 0, 0\n    \n  @WebServer\n  Scenario Outline: only her in-range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n      | Seans-location  | what-Lucy-hears | \n      | 0, 900          | Sean            |   \n      | 800, 800        | nothing at all  |\n    \n  Scenario: Multiple shouters\n    Given people are located at\n      | name         | x    | y   |\n      | Sean         | 0    | 500 |\n      | Oscar        | 1100 | 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    And Lucy should hear Sean\n    \n  Scenario: Shouting at myself\n    When Sean shouts\n    Then Sean should hear nothing at all\n    \n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n \n  Scenario: Lucy enters range during live time\n    Given Sean shouts at 06:00\n    And Selects shouts with live time of 3:00\n    When Lucy enters range before 09:00\n    Then Lucy should hear Sean\n    \n    \n    \n    \n    \n    \n  \n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nWhen('{word} shouts', function (shouter) {\n  this.shouty.shout(shouter, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (listener, shouter) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(listener)).length, 1)\n})\n\nThen('{word} should hear nothing at all', function (listener) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(listener)).length, 0)\n})\n\nThen('{word} should not hear {word}', function (listener, shouter) {\n  assert.equal(Object.keys(this.shouty.shoutIsHeardBy(shouter,listener)), false)\n})\n\nThen('{word} should hear {int} shouts from {word}', function (listener,num,shouter) {\n  assert.equal(this.shouty.getShoutsHeardBy(listener)[shouter].length, num)\n});\n\n// Time stuff\nGiven('Sean shouts at {time}', function (time) {\n  // Write code here that turns the phrase above into concrete actions\n  return 'pending';\n});\n\n Given('Selects shouts with live time of {time}', function (time) {\n   // Write code here that turns the phrase above into concrete actions\n   return 'pending';\n });\n\n When('Lucy enters range before {time}', function (time) {\n   // Write code here that turns the phrase above into concrete actions\n   return 'pending';\n });\n\n\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n\n    if (this.locations[listener] == undefined) {\n      return 0;\n    }\n    \n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n\n  \n  this.shoutIsHeardBy = function(shouter, listener) {\n\n    var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n    if (distance < MESSAGE_RANGE) {\n      return true;\n    } else {\n      return false;\n    }\n      \n  }\n  \n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n  ","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nGiven('{word} is at {coordinate}', function (person, coordinate) {\n  this.shouty.setLocation(person, coordinate)\n})\n\nGiven('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n  this.shouty.setLocation(row['name'], new Coordinate(row['x'], row['y']))    \n  })             \n})\n\n\n\n\n","features/shouty_hooks.js":"var {After, Before} = require('cucumber');\n\nBefore({tags: \"@WebServer\"}, function () {\n  console.log('Start the web server')\n});\n\nAfter({tags: \"@WebServer\"}, function () {\n  console.log('Stop the web server')\n});\n\nBefore(function () {\n  console.log('Deploy the app')\n});\n\nAfter(function () {\n  console.log('Undeploy the app')\n});\n","features/parameter_types.js":"const { defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType({\n  regexp: /(\\d+),\\ ?(\\d+)/,\n  transformer: (x,y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n})\n\ndefineParameterType({\n  regexp: /(\\d+):(\\d+)/,\n  transformer: (h,m) => parseInt(h)*60 + parseInt(m),\n  name: 'time'\n})\n"}