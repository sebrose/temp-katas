{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(this.x - other.x)\n    let a =  Math.abs(other.x - this.x);\n    let b =  Math.abs(other.y - this.y);\n    \n    let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    \n    return c;\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n   it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n# Background:\n  #  Given Lucy is at 0, 0\n    \n Scenario Outline: only hear in-range shouts\n    Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \n    Examples: in-range shout examples\n      | Seans-location | what-Lucy-hears|\n      | 0, 900         | Sean           |\n      | 800, 800       | nothing        |\n \n Scenario: Multiple shouters\n    Given people are located at \n      | name    | x   | y   |\n      | Lucy    | 0   | 0   |\n      | Sean    | 0   | 500 |\n      | Oscar   | 1100| 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n \n Scenario: Multiple shouts from one person\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n \n Scenario: Shouter shouldnot hear their own shout\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n","features/shout_steps.js":"var {Before, Given, When, Then, But } = require('cucumber')\nvar assert = require('assert')\n//var Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n//let shouty\n\n/*Before(function() {\n  shouty = new Shouty()\n})*/\n\n\nWhen('{word} shouts', function (person) {\n  this.shouty.shout(person, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (listener, shouter) {\n  // console.log('listener : ' + listener + ',shouter: ' + shouter);\n  if(shouter != 'nothing'){\n    assert.equal(this.shouty.getShoutsHeardBy(listener)[shouter].length, 1)\n  }else{\n    assert.equal(this.shouty.getShoutsHeardBy(listener)[shouter], undefined)\n  }\n\n})\n\nThen('{word} should not hear {word}', function (listener, shouter) {\n //console.log(shouty.getShoutsHeardBy(listener))\n  // Write code here that turns the phrase above into concrete actions\n  if(listener == shouter){\n    assert.equal(this.shouty.getShoutsHeardByUser(listener, shouter), 0)\n  }else{\n    assert.equal(this.shouty.getShoutsHeardBy(listener)[shouter], undefined)\n  }\n})\n\nThen('{word} should hear {int} shouts from {word}', function (listener,noOfshouts, shouter) {\n   assert.equal(this.shouty.getShoutsHeardBy(listener)[shouter].length, noOfshouts)    \n})\n\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n       // console.log(shouter);\n      \n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n       // console.log('distance :' + distance);\n      \n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n  \n  this.getShoutsHeardByUser = function(listener, shouter){\n    if(listener == shouter) return 0;\n  }\n \n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.006 seconds\n\nCUCUMBER FEATURES\n=================\n....................\n\n5 scenarios (5 passed)\n20 steps (20 passed)\n0m00.004s\n","features/location_steps.js":"var {Before, Given, When, Then, But } = require('cucumber')\nvar assert = require('assert')\n//var Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\n/*let shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})*/\n\nGiven('{word} is at {int}, {int}', function (person, x, y) {\n  this.shouty.setLocation(person, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (dataTable) {\n     dataTable.hashes().forEach(row => {\n       //console.log(row);\n       this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n     });\n});","features/shouty_hooks.js":"var {Before, After } = require('cucumber')\n\nBefore('Beforesetup', () => {\n  console.log('before')\n})\n       \nAfter('Aftersetup', () => {\n  console.log('after')\n})       \n"}