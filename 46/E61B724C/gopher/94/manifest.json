{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n     return Math.sqrt(Math.pow(Math.abs(this.x - other.x),2)+ (Math.pow(Math.abs(this.y - other.y),2)))\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  #Scenario: In range shout is heard\n   # Given Lucy is at 0, 0\n    #And Sean is at 0, 900\n    #When Sean shouts\n    #Then Lucy should hear Sean\n\n  #Scenario: Out of range shout is not heard\n   # Given Lucy is at 0, 0\n    #And Sean is at 800, 800\n    # This means Sean is approximately 1130m from Lucy\n    #When Sean shouts\n    # Then Lucy should not hear anything\n \n Background:\n Given Lucy is at 0, 0\n \n Scenario Outline: only hear in-range shouts\n    #Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \n    Examples: some simple examples\n    | Seans-location | what-Lucy-hears |\n    | 0, 900         | Sean            |\n    | 800, 800       | nothing         |\n    \n    \n  Scenario: Multiple shouters\n    Given people are located at\n    | name | x   | y   |\n    | Lucy | 0   | 0   |\n    | Sean | 0   | 500 |\n    | Oscar| 1100| 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n\n    \n  Scenario: Shouters should not hear their own shouts\n    Given Sean is at 0, 0\n    When Sean shouts\n    Then Sean should not hear himself\n\n Scenario: Multiple shouts from one person\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n  ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = this.shouty\n})\n\n\nWhen('{word} shouts', function (shouter) {\n  shouty.shout(shouter, ARBITARY_MESSAGE)\n})\n\n\nThen('{word} should hear {word}', function (listener,shouter) {\n     if (shouter=='nothing' || shouter == undefined) {\n       assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)), 0)\n        } else {\n       assert.equal(shouty.getShoutsHeardBy(listener)[shouter].length>0, true)\n  }\n})\n\n Then('{word} should hear 2 shouts from {word}', function (listener, shouter) {\n           // Write code here that turns the phrase above into concrete actions\n           assert.equal(shouty.getShoutsHeardBy(listener)[shouter].length>0, true)\n         });\n\nThen('{word} should not hear {word}', function (listener, shouter) {\n  \n if (shouter=='anything') {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)).length, 0)\n  } else {\n      assert.equal(shouty.getShoutsHeardBy(listener)[shouter],undefined)\n  }\n })\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n  \n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty =new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\n.............................................U-U......UU\n\nWarnings:\n\n1) Scenario: Only hear in range shouts # ../../../../../sandboxes/gopher/features/move_shoutrange.feature:7\n   ✔ Before # ../../../../../sandboxes/gopher/features/location_steps.js:9\n   ✔ Before # ../../../../../sandboxes/gopher/features/shout_steps.js:9\n   ✔ Before # ../../../../../sandboxes/gopher/features/shouty_hooks.js:3\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/gopher/features/location_steps.js:13\n   ✔ And Sean is at 0, 1100 # ../../../../../sandboxes/gopher/features/location_steps.js:13\n   ✔ And Sean shouts # ../../../../../sandboxes/gopher/features/shout_steps.js:14\n   ? When Sean moves to 0, 900\n       Undefined. Implement with the following snippet:\n\n         When('Sean moves to {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - And Sean shouts # ../../../../../sandboxes/gopher/features/shout_steps.js:14\n   ? Then Lucy hears 1 shout\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy hears {int} shout', function (int) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n2) Scenario: Listener moves closer after the shout # ../../../../../sandboxes/gopher/features/move_shoutrange.feature:15\n   ✔ Before # ../../../../../sandboxes/gopher/features/location_steps.js:9\n   ✔ Before # ../../../../../sandboxes/gopher/features/shout_steps.js:9\n   ✔ Before # ../../../../../sandboxes/gopher/features/shouty_hooks.js:3\n   ✔ Given Lucy is at 0, 1100 # ../../../../../sandboxes/gopher/features/location_steps.js:13\n   ✔ And Sean is at 0, 0 # ../../../../../sandboxes/gopher/features/location_steps.js:13\n   ✔ And Sean shouts # ../../../../../sandboxes/gopher/features/shout_steps.js:14\n   ? When Lucy moves to 0, 800\n       Undefined. Implement with the following snippet:\n\n         When('Lucy moves to {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   ? Then Lucy hears nothing\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy hears nothing', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n7 scenarios (2 undefined, 5 passed)\n35 steps (4 undefined, 1 skipped, 30 passed)\n0m00.010s\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty =  this.shouty\n})\n\nGiven('{word} is at {int}, {int}', function (name, x, y) {\n  shouty.setLocation(name, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (table) {\n  table.hashes().forEach(row => {\n    //console.log(row)\n    shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n \n})\n","features/shouty_hooks.js":"var {After, Before} = require('cucumber');\n\nBefore(function () {\n  // This hook will be executed before all scenarios\n});","features/move_shoutrange.feature":"Feature: Hear Shout\n\n  Shouts can only be heard when made by a shouter within 1000m at the time of shouting \n \n \n   \n  Scenario: Only hear in range shouts\n    Given Lucy is at 0, 0\n    And Sean is at 0, 1100\n    And Sean shouts\n    When Sean moves to 0, 900\n    And Sean shouts\n    Then Lucy hears 1 shout\n\n Scenario: Listener moves closer after the shout\n    Given Lucy is at 0, 1100\n    And Sean is at 0, 0\n    And Sean shouts\n    When Lucy moves to 0, 800\n    Then Lucy hears nothing\n  "}