{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n     return Math.sqrt(Math.pow(Math.abs(this.x - other.x),2)+ (Math.pow(Math.abs(this.y - other.y),2)))\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"-","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = this.shouty\n})\n\n\nWhen('{word} shouts', function (shouter) {\n  shouty.shout(shouter, ARBITARY_MESSAGE)\n})\n\n//When('{word} moves to {int}, {int}', function (shouter, int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n         //  assert.equal(shouty.getShoutsHeardBy(shouter).length>0, true)\n       //  });\n\n\nThen('{word} should hear {word}', function (listener,shouter) {\n     if (shouter=='nothing' || shouter == undefined) {\n       assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)), 0)\n        } else {\n       assert.equal(shouty.getShoutsHeardBy(listener)[shouter].length>0, true)\n  }\n})\n\n Then('{word} should hear {int} shouts from {word}', function (listener,count,shouter) {\n           // Write code here that turns the phrase above into concrete actions\n           assert.equal(shouty.getShoutsHeardBy(listener)[shouter].length>0, true)\n         });\n\nThen('{word} should not hear {word}', function (listener, shouter) {\n  \n if (shouter=='anything') {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)).length, 0)\n  } else {\n      assert.equal(shouty.getShoutsHeardBy(listener)[shouter],undefined)\n  }\n })\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n  \n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty =new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.008 seconds\n\nCUCUMBER FEATURES\n=================\nError: (1:1): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got '-'\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:89:15\n    at Array.forEach (<anonymous>)\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:76:12\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n    at /home/cucumber/node_modules/bluebird/js/release/generators.js:201:15\n    at getTestCases (/home/cucumber/node_modules/cucumber/lib/cli/helpers.js:96:18)\n    at /home/cucumber/node_modules/cucumber/lib/cli/helpers.js:45:39\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n    at Promise._settlePromise (/home/cucumber/node_modules/bluebird/js/release/promise.js:574:26)\n    at Promise._settlePromise0 (/home/cucumber/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/home/cucumber/node_modules/bluebird/js/release/promise.js:693:18)\n    at Async._drainQueue (/home/cucumber/node_modules/bluebird/js/release/async.js:133:16)\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty =  this.shouty\n})\n\nGiven('{word} is at {int}, {int}', function (name, x, y) {\n  shouty.setLocation(name, new Coordinate(x, y))\n})\n\nWhen('{word} moves to {int}, {int}', function (name, x, y) {\n  shouty.setLocation(name, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (table) {\n  table.hashes().forEach(row => {\n    //console.log(row)\n    shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n \n})\n","features/shouty_hooks.js":"var {After, Before} = require('cucumber');\n\nBefore(function () {\n  // This hook will be executed before all scenarios\n});","features/move_shoutrange.feature":"Feature: Hear Shout\n\n  Shouts can only be heard when made by a shouter within 1000m at the time of shouting \n \n \n   \n  Scenario: Only hear in range shouts\n    Given Lucy is at 0, 0\n    And Sean is at 0, 1100\n    And Sean shouts\n    When Sean moves to 0, 900\n    And Sean shouts\n    Then Lucy should hear 1 shouts from Sean\n\n Scenario: Listener moves closer after the shout\n    Given Lucy is at 0, 1100\n    And Sean is at 0, 0\n    And Sean shouts\n    When Lucy moves to 0, 800\n    Then Lucy hears nothing\n  "}