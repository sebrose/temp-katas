{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    \n    let x = Math.abs(this.x - other.x)\n    let y = Math.abs(this.y - other.y)\n    let z = Math.pow(x,2) + Math.pow(y,2) \n    \n    \n        return Math.sqrt(z)\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n  var a = new Coordinate(0, 0)\n  var b = new Coordinate(300, 400)\n   assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Rule: Shouts have a range of approximately 1000m\n  \n  Background:\n   Given Lucy is at 0, 0\n\n   @One\n   Scenario Outline: only hear in-range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears | \n      | 0, 900         | Sean            |\n      | 800, 800       | nothing         |\n   \n   @Two\n   Scenario: Multiple Shouters\n    Given people are located at\n    |name|x|y|\n    |Sean|0|500|\n    |Oscar|1100|0|\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n   Scenario: Multiple Shouts from one person\n    And Sean is at 0, 500 \n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n   \n   Scenario:  Shouter should not hear their own shout\n    When Lucy shouts\n    Then Lucy should hear nothing\n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nconst ARBITARY_MESSAGE = 'Hello World!'\n\nThen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (shoutee, shouter) {\n  if(shouter === 'nothing')\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).length, 0)\n  else\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).includes(shouter), true)\n})\n\nThen('{word} should not hear {word}', function (shoutee, shouter) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).includes(shouter), false)\n });\n\nThen('{word} should hear {int} shouts from {word}', function (shoutee, count, shouter) {\n  assert.equal(this.shouty.getShoutsHeardBy(shoutee)[shouter].length, count)\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n      if( listener !== shouter ){\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n      }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Coordinate = require('../coordinate')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.013 seconds\n\nCUCUMBER FEATURES\n=================\nTypeError: And is not a function\n    at Object.<anonymous> (/sandboxes/owl/features/location_steps.js:5:1)\n    at Module._compile (module.js:573:30)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at /home/cucumber/node_modules/cucumber/lib/cli/index.js:153:16\n    at Array.forEach (<anonymous>)\n    at Cli.getSupportCodeLibrary (/home/cucumber/node_modules/cucumber/lib/cli/index.js:152:24)\n    at Cli.<anonymous> (/home/cucumber/node_modules/cucumber/lib/cli/index.js:171:39)\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n    at Promise._settlePromise (/home/cucumber/node_modules/bluebird/js/release/promise.js:574:26)\n","features/location_steps.js":"var {Before, Given, When, Then, And } = require('cucumber')\nconst Coordinate = require('../coordinate')\nvar assert = require('assert')\n\nAnd('{word} is at {coordinate}', function (name, coordinate) {\n  this.shouty.setLocation( name, coordinate)\n})\n\nAnd('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n    let {name, x, y} = row\n    this.shouty.setLocation( name, new Coordinate(x, y))\n  })\n});\n","features/shouty_hooks.js":"/*\nvar {Before, After, BeforeAll } = require('cucumber')\n\nBeforeAll( function () {\n   console.log('In the beginning!')\n})\n\nBefore({tags: \"@One or @Two\"}, function (){\n  console.log('Before!')\n})\n\nAfter(function (){\n  console.log('After!')\n})\n\nBefore(function (){\n  console.log('!erofeB')\n})\n\nAfter(function (){\n  console.log('!retfA')\n})\n*/","features/parameter_types.js":"const { defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType( {\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n})\n"}