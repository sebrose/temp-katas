{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    \n    let x = Math.abs(this.x - other.x)\n    let y = Math.abs(this.y - other.y)\n    let z = Math.pow(x,2) + Math.pow(y,2) \n    \n    \n        return Math.sqrt(z)\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n  var a = new Coordinate(0, 0)\n  var b = new Coordinate(300, 400)\n   assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Rule: Shouts have a range of approximately 1000m\n  \n  Background:\n   Given Lucy is at 0, 0\n\n   @One\n   Scenario Outline: only hear in-range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears | \n      | 0, 900         | Sean            |\n      | 800, 800       | nothing         |\n   \n   @Two\n   Scenario: Multiple Shouters\n    Given people are located at\n    |name|x|y|\n    |Sean|0|500|\n    |Oscar|1100|0|\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n   Scenario: Multiple Shouts from one person\n    And Sean is at 0, 500 \n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n   \n   Scenario:  Shouter should not hear their own shout\n    When Lucy shouts\n    Then Lucy should hear nothing\n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nconst ARBITARY_MESSAGE = 'Hello World!'\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (shoutee, shouter) {\n  if(shouter === 'nothing')\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).length, 0)\n  else\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).includes(shouter), true)\n})\n\nThen('{word} should not hear {word}', function (shoutee, shouter) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(shoutee)).includes(shouter), false)\n });\n\nThen('{word} should hear {int} shouts from {word}', function (shoutee, count, shouter) {\n  assert.equal(this.shouty.getShoutsHeardBy(shoutee)[shouter].length, count)\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout, time, duration) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push({shout:shout,time:time,duration:duration})\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n      if( listener !== shouter ){\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n      }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Coordinate = require('../coordinate')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  --tags @wip\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\nError: ENOENT: no such file or directory, stat '/home/cucumber/node_modules/cucumber/bin/features'\n./cyber-dojo.sh: 26: ./cyber-dojo.sh: /sandboxes/owl/features/hear_shout.feature: Permission denied\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nconst Coordinate = require('../coordinate')\nvar assert = require('assert')\n\nGiven('{word} is at {coordinate}', function (name, coordinate) {\n  this.shouty.setLocation( name, coordinate)\n})\n\nGiven('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n    let {name, x, y} = row\n    this.shouty.setLocation( name, new Coordinate(x, y))\n  })\n});\n","features/shouty_hooks.js":"/*\nvar {Before, After, BeforeAll } = require('cucumber')\n\nBeforeAll( function () {\n   console.log('In the beginning!')\n})\n\nBefore({tags: \"@One or @Two\"}, function (){\n  console.log('Before!')\n})\n\nAfter(function (){\n  console.log('After!')\n})\n\nBefore(function (){\n  console.log('!erofeB')\n})\n\nAfter(function (){\n  console.log('!retfA')\n})\n*/","features/parameter_types.js":"const { defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType( {\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n})\n\ndefineParameterType( {\n  regexp: /(\\d+):(\\d+)(am|pm)/,\n  transformer: (h, m) => {\n    const d = new Date()\n    \n    d.setHours(h)\n    d.setMinutes(m)\n    d.setSeconds(0)\n    d.setMilliseconds(0)\n    \n    return d;\n  },\n  name: 'time'\n})\n","features/movement.feature":"@wip\nFeature: Hear shouts when moving\n\n  Scenario: Shouting outside and inside range\n    Given Sean shouts at 6:00am \n    And Shout lives for 3 hours\n    When Lucy enters range at 8:30am\n    Then Lucy should hear 1 shouts from Sean\n    \n#  Scenario:\n#    Given\n#    When\n#    Then\n    ","features/time_steps.js":"const Temporal = require('../temporal')\n\nvar {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nGiven('Sean shouts at {time}', function (time) {\n  console.log('A_Time', time)\n  return 'pending';\n});\n\nGiven('Shout lives for {int} hours', function (int) {\n  return 'pending';\n});\n\nWhen('Lucy enters range at {time}', function (time) {\n  console.log('B_Time', time)\n  return 'pending';\n});","temporal.js":"module.exports = function Temporal(base) {\n\n  this.base = base\n\n  this.beforeOther = function(other) {\n\n    return base.getTime() <= other.getTime()\n  }\n};\n"}