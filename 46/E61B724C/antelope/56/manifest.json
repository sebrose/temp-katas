{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(this.x - other.x)\n    \n    // return Math.abs(this.x - other.x)\n    var x_div = this.x - other.x\n    var y_div = this.y - other.y\n    return Math.sqrt(Math.pow(x_div,2) + Math.pow(y_div,2))\n    // return 0\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(300, 400)\n  \n    assert.equal(a.distanceFrom(b), 500)\n  })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario Outline: only hear in-range shouts\n    Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \n    Examples: some simple examples\n      | Seans-location  | what-Lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800        | nothing         |\n  \n\n  Scenario: Multiple shouters\n    Given people are located at \n    | name  | x   | y   |\n    | Lucy  | 0   | 0   |\n    | Sean  | 0   | 500 |\n    | Oscar | 1100| 0   |\n    # And Sean is at 0, 500\n    # And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n    \n  Scenario: Shouters don't hear their own shout\n    When Sean shouts\n    Then Sean should hear nothing\n    \n  Scenario: Multiple shouts from one person\n    Given people are located at \n    | name  | x   | y   |\n    | Lucy  | 0   | 0   |\n    | Sean  | 0   | 500 |\n    When Sean shouts\n   And Sean shouts\n   Then Lucy should hear 2 shouts from Sean","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})\n\n// Given('Sean is at {int}, {int}', function (x, y) {\n//   shouty.setLocation('Sean', new Coordinate(x, y))\n// })\n\nWhen('{word} shouts', function (name) {\n  shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear Sean', function (name) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name)).length, 1)\n})\n\nThen('{word} should hear nothing', function (name) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name)).length, 0)\n})\n\nThen('{word} should not hear Oscar', function (name) {\n           // Write code here that turns the phrase above into concrete actions\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name)).length, 1)\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name))[0], 'Sean')\n           //return 'pending';\n });\n\nThen('{word} should hear {int} shouts from {word}', function (name, shts,shouter) {\n     \n     assert.equal(shouty.getShoutsHeardBy(name)[shouter].length, shts)\n         });\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n    \n    Object.keys(this.shouts).forEach(shouter => {\n        if ( shouter !== listener ) {\n          var personsShouts = this.shouts[shouter]\n          var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n          if(distance < MESSAGE_RANGE) {\n            shoutsHeard[shouter] = personsShouts\n          }\n        }  \n    })\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\n\nfunction CustomWorld() {\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.006 seconds\n\nCUCUMBER FEATURES\n=================\n.UU--.UU--.U----....U---\n\nWarnings:\n\n1) Scenario: only hear in-range shouts # ../../../../../sandboxes/antelope/features/hear_shout.feature:13\n   ✔ Before # ../../../../../sandboxes/antelope/features/shout_steps.js:9\n   ? Given Lucy is at 0, 0\n       Undefined. Implement with the following snippet:\n\n         Given('Lucy is at {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   ? And Sean is at 0, 900\n       Undefined. Implement with the following snippet:\n\n         Given('Sean is at {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - When Sean shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - Then Lucy should hear Sean # ../../../../../sandboxes/antelope/features/shout_steps.js:21\n\n2) Scenario: only hear in-range shouts # ../../../../../sandboxes/antelope/features/hear_shout.feature:14\n   ✔ Before # ../../../../../sandboxes/antelope/features/shout_steps.js:9\n   ? Given Lucy is at 0, 0\n       Undefined. Implement with the following snippet:\n\n         Given('Lucy is at {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   ? And Sean is at 800, 800\n       Undefined. Implement with the following snippet:\n\n         Given('Sean is at {int}, {int}', function (int, int2) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - When Sean shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - Then Lucy should hear nothing # ../../../../../sandboxes/antelope/features/shout_steps.js:25\n\n3) Scenario: Multiple shouters # ../../../../../sandboxes/antelope/features/hear_shout.feature:17\n   ✔ Before # ../../../../../sandboxes/antelope/features/shout_steps.js:9\n   ? Given people are located at\n       | name  | x    | y   |\n       | Lucy  | 0    | 0   |\n       | Sean  | 0    | 500 |\n       | Oscar | 1100 | 0   |\n       Undefined. Implement with the following snippet:\n\n         Given('people are located at', function (dataTable) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - When Sean shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - And Oscar shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - Then Lucy should not hear Oscar # ../../../../../sandboxes/antelope/features/shout_steps.js:29\n   - But Lucy should hear Sean # ../../../../../sandboxes/antelope/features/shout_steps.js:21\n\n4) Scenario: Multiple shouts from one person # ../../../../../sandboxes/antelope/features/hear_shout.feature:35\n   ✔ Before # ../../../../../sandboxes/antelope/features/shout_steps.js:9\n   ? Given people are located at\n       | name | x | y   |\n       | Lucy | 0 | 0   |\n       | Sean | 0 | 500 |\n       Undefined. Implement with the following snippet:\n\n         Given('people are located at', function (dataTable) {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   - When Sean shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - And Sean shouts # ../../../../../sandboxes/antelope/features/shout_steps.js:17\n   - Then Lucy should hear 2 shouts from Sean # ../../../../../sandboxes/antelope/features/shout_steps.js:36\n\n5 scenarios (4 undefined, 1 passed)\n19 steps (6 undefined, 11 skipped, 2 passed)\n0m00.002s\n","locations_steps.js":"Given('people are located at', function (dataTable) {\n           dataTable.hashes().forEach(row => {\n             shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n           })\n         });\n\nGiven('{word} is at {int}, {int}', function (name,x, y) {\n  shouty.setLocation(name, new Coordinate(x, y))\n})\n"}