{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(this.x - other.x)\n    \n    // return Math.abs(this.x - other.x)\n    var x_div = this.x - other.x\n    var y_div = this.y - other.y\n    return Math.sqrt(Math.pow(x_div,2) + Math.pow(y_div,2))\n    // return 0\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(300, 400)\n  \n    assert.equal(a.distanceFrom(b), 500)\n  })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background:\n    Given Lucy is at 0, 0\n  \n  @ShoutHeard\n  Scenario Outline: only hear in-range shouts \n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \n    Examples: some simple examples\n      | Seans-location  | what-Lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800        | nothing         |\n  \n\n  @ShoutHeard @ShoutNotHeard\n  Scenario: Multiple shouters\n    Given people are located at \n    | name  | x   | y   |\n    | Sean  | 0   | 500 |\n    | Oscar | 1100| 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  \n  \n  Scenario: Shouters don't hear their own shout\n    When Sean shouts\n    Then Sean should hear nothing\n  \n  @ShoutHeard\n  Scenario: Multiple shouts from one person\n    Given people are located at \n    | name  | x   | y   |\n    | Sean  | 0   | 500 |\n    When Sean shouts\n   And Sean shouts\n   Then Lucy should hear 2 shouts from Sean","features/shout_steps.js":"var {Before, After, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n// var Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n// let shouty\n\n// Before(function() {\n//   shouty = new Shouty()\n// })\n\n// Given('Sean is at {int}, {int}', function (x, y) {\n//   shouty.setLocation('Sean', new Coordinate(x, y))\n// })\n\n\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear Sean', function (name) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name)).length, 1)\n})\n\nThen('{word} should hear nothing', function (name) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name)).length, 0)\n})\n\nThen('{word} should not hear Oscar', function (name) {\n           // Write code here that turns the phrase above into concrete actions\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name)).length, 1)\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(name))[0], 'Sean')\n           //return 'pending';\n });\n\nThen('{word} should hear {int} shouts from {word}', function (name, shts,shouter) {\n     \n     assert.equal(this.shouty.getShoutsHeardBy(name)[shouter].length, shts)\n         });\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout, date) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n    this.shouts[person].[shout].push('test')\n    console.log(shouts)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n    \n    Object.keys(this.shouts).forEach(shouter => {\n        if ( shouter !== listener ) {\n          var personsShouts = this.shouts[shouter]\n          var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n          if(distance < MESSAGE_RANGE) {\n            shoutsHeard[shouter] = personsShouts\n          }\n        }  \n    })\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\n\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  --tags \"@ShoutHeard or @ShoutNotHeard\" \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.006 seconds\n\nCUCUMBER FEATURES\n=================\n/sandboxes/antelope/shouty.js:15\n    this.shouts[person].[shout].push('test')\n                        ^\n\nSyntaxError: Unexpected token [\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n    at Module._compile (module.js:537:28)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/sandboxes/antelope/features/world.js:2:16)\n    at Module._compile (module.js:573:30)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n","features/locations_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n// var Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\n\nGiven('people are located at', function (dataTable) {\n           dataTable.hashes().forEach(row => {\n             this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n           })\n         });\n\nGiven('{word} is at {coordinate}', function (name, coordinate) {\n\n  this.shouty.setLocation(name, coordinate)\n})\n","features/ashouty_hooks.js":"var {Before, After} = require('cucumber')\n\n\nBefore ({tags: \"@ShoutHeard or @ShoutNotHeard\"}, function() {\n  console.log('printing ShoutHeard')\n});\n\nAfter ({tags: \"@ShoutHeard or @ShoutNotHeard\"}, function() {\n  console.log('printing After ShoutHeard')\n});\n\n","features/parameter_types.js":"const {defineParameterType} = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n})","features/users_move.feature":"Feature: Handle shouty users that move around\n\nRules:\nShouts have a range of 1000m\nShouts expire after 60min\n# Shouts that have been heard cant be heard again\n\nScenario: Shouty user comes into range before expiry\n  Given people are located at \n    | name  | x   | y   |\n    | Lucy  | 0   | 0   |\n    | Sean  | 1100| 0   |\n  And Sean shouts at 10:00:00 \n  When Lucy moves to 999, 0 at 10:30:00  \n  Then Lucy should hear Sean\n  \nScenario: Shouty user comes into range after expiry\n  Given people are located at \n    | name  | x   | y   |\n    | Lucy  | 0   | 0   |\n    | Sean  | 1100| 0   |\n  And Sean shouts at 10:00:00 \n  When Lucy moves to 999, 0 at 11:30:00  \n  Then Lucy should not hear Sean\n  \n"}