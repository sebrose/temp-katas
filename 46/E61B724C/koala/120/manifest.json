{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n  \n    // To calculate the difference between 2 coordinates we subtract the \n    // passed value from our current value of x to the power of 2\n    // Do the same with the Y coordinates\n    // We then square root the total of both addded together\n   return Math.round(Math.sqrt(Math.pow(this.x - other.x,2) + Math.pow(this.y-other.y,2)))\n\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(300, 400)\n    assert.equal(a.distanceFrom(b), 500)\n  })\n  \n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(0, 600)\n    assert.equal(a.distanceFrom(b), 600)\n  })\n  \n  it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 400)\n    assert.equal(a.distanceFrom(b), 721)\n  })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Rules:\n    Shouts have a range of approximately 1000m\n    Shouter should not hear their own shouts\n  \n Background:\n    Given Lucy is at 0, 0\n \n Scenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n  Examples: some simple examples\n    |Seans-location | what-Lucy-hears |\n    |0, 900          | Sean            |\n    |800, 800        | nothing         |\n\n  Scenario: Multiple shouters\n    Given people are located at\n    | name | x | y|\n    | Sean | 0 | 500 |\n    | Oscar | 1100 | 0 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n Scenario: Shout to myself\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n    \n Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n/*\nBefore(function() {\n  shouty = new Shouty()\n})\n*/\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (listener, shouter) {\n  if (shouter !== 'nothing') {\n      assert.equal(this.shouty.getShoutsHeard(listener)[shouter].length, 1)\n    } else {\n      assert.ok(this.shouty.getShoutsHeard(listener) === undefined ||\n               Object.keys(this.shouty.getShoutsHeard(listener)).length == 0);\n    \n  }\n})\n\nThen('{word} should not hear {word}', function (listener, shouter) {\n  var sht = this.shouty.getShoutsHeard(listener)[shouter]\n  assert.ok(this.shouty.getShoutsHeard(listener) || sht === undefined);\n});\n\n\nThen('{word} should hear {int} shouts from {word}', function (listener, noShouts , shouter) {\n   if (shouter !== 'nothing') {\n      assert.equal(this.shouty.getShoutsHeard(listener)[shouter].length, noShouts)\n    } else {\n      assert.ok(this.shouty.getShoutsHeard(listener) === undefined ||\n               Object.keys(this.shouty.getShoutsHeard(listener)).length == 0);\n     \n  }       \n});\n\n\n\n\n\n\n\n\n\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeard = function(listener) {\n    var shoutsHeard = {}      \n      Object.keys(this.shouts).forEach(shouter => {\n          var personsShouts = this.shouts[shouter]\n          var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n          if (shouter !== listener) {\n            if(distance < MESSAGE_RANGE) {\n              shoutsHeard[shouter] = personsShouts\n            }\n          }\n    })\n    return shoutsHeard\n  }\n\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nvar Shouty = require('../shouty')\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n.....\n\n\n5 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\nShout Before is called\n.Before is called\n.....After is called\n. Shout After is called\n.Shout Before is called\n.Before is called\n.....After is called\n. Shout After is called\n.Shout Before is called\n.Before is called\n.......After is called\n. Shout After is called\n.Shout Before is called\n.Before is called\n....After is called\n. Shout After is called\n.Shout Before is called\n.Before is called\n......After is called\n. Shout After is called\n.\n\n5 scenarios (5 passed)\n22 steps (22 passed)\n0m00.013s\n","features/location_steps.js":"\nvar {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nGiven('{word} is at {int}, {int}', function (n,x, y) {\n  this.shouty.setLocation(n, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (dataTable) {\ndataTable.hashes().forEach(row => {\n  //console.log(row);\n   this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  });\n});\n","features/shouty_hooks.js":"let { After , Before } = require('cucumber');\nBefore ( () => {\n  console.log('Before is called');\n  \n});\n\nAfter( () => {\n  console.log('After is called');\n});","features/shout_hooks.js":"let { After , Before } = require('cucumber');\nBefore ( () => {\n  console.log('Shout Before is called');\n  \n});\n\nAfter( () => {\n  console.log(' Shout After is called');\n});"}