{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n // return Math.abs(this.x - other.x)\n  return Math.hypot(this.x -other.x, this.y - other.y);\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n   it(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background: \n    Given Lucy is at 0, 0\n\n  Scenario Outline: Only hear in-range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n\n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears |\n      | 0, 900         | Sean            |\n      | 800, 800       | nothing         |\n  @wip   \n  Scenario:\n    And Lucy is Premium\n    When Lucy shouts\n    Then Shout begins with Premium\n    \nScenario: Multiple shouters\n    Given people are located at \n      | name   |  x    | y   |\n      | Sean   |  0    | 500 |\n      | Oscar  |  1100 | 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: Multiple shouts from one person\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n  Scenario: shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n    \n    \n    \n    \n    \n    \n    \n    ","features/shout_steps.js":"var {Before, Given, When, Then, After } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nBefore(() => {\n  console.log('BeforeSS: ')\n})\n\nAfter(() => {\n  console.log('AfterSS: ')\n})\n\nWhen('{word} shouts', function (word) {\n  this.shouty.shout(word, ARBITARY_MESSAGE)\n})\nThen('{word} should not hear {word}', function (word1,word2) {\n    assert.equal(Object.keys(this.shouty.getShoutsHeardBy(word1)).includes(word2),false)\n\n})\nWhen('Lucy is Premium', function() {\n  this.shouty.premiums.push('Lucy')\n})\nThen('Shout begins with Premium', function () {\n   assert.equal(this.shouty.shouts['Lucy'][0].startsWith('Premium'),true)\n})\n\nThen('Lucy should hear Sean', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 1)\n})\n\nThen('Lucy should hear {int} shouts from Sean', function (int) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')['Sean']).length, int)\n\n});\n\n\nThen('Lucy should hear nothing', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 0)\n})\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n  this.premiums = [] \n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    if(this.premiums.includes(person)){shout = 'Premium: ' + shout}\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n        \n        if(distance < MESSAGE_RANGE && shouter !== listener) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nvar Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js --tags @foo \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\n\n\n0 scenarios\n0 steps\n0m00.000s\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nGiven('{word} is at {int}, {int}', function (word, x, y) {\n  this.shouty.setLocation(word, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n    this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n\n});\n","features/shouty_hooks.js":"var {Before, After } = require('cucumber')\n\nBefore({tags: \"@foo\"}, () => {\n  console.log('Before:foo ')\n})\n\nAfter(() => {\n  console.log('After: ')\n})\n\nBefore(() => {\n  console.log('Before2: ')\n})\n\nAfter(() => {\n  console.log('After2: ')\n})"}