{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n//         TODO: actually calculate distance. I think we need to use pythagoras' theorem?\n           // return 0;\n\n            int xDiff = xCoord - other.xCoord;\n            int yDiff = yCoord - other.yCoord;\n\n            return (int) Math.Sqrt(Math.Pow(xDiff, 2) + Math.Pow(yDiff, 2));\n\n        }\n    }\n}","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(1000, 0);\n            Assert.AreEqual(1000, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background:\n    Given Lucy is at 0, 0\n\n  Scenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n\n  Examples: some examples\n    | Seans-location | what-Lucy-hears |\n    | 0, 900         | Sean            |\n    | 0, 1100        | nothing         |\n\n  Scenario: Multiple shouters\n    Given people are located at\n    | name  | x   | y    |\n    | Sean  | 500 | 0    |\n    | Oscar | 0   | 1100 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  Scenario: Shouters don't hear their own shouts\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n\n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\nusing System.Collections.Generic;\nusing TechTalk.SpecFlow.Assist;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty;\n\n        public ShoutSteps(ShoutyHelper shoutyHelper)\n        {\n            shouty = shoutyHelper.Shouty;\n        }\n\n        [When(@\"(Lucy|Sean|Oscar) shouts\")]\n        public void WhenActorShouts(string actor)\n        {\n            shouty.Shout(actor, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"(Lucy) should hear (Sean)\")]\n        public void ThenListenerShouldHearShouter(string listener, string shouter)\n        {\n            Assert.IsTrue(shouty.GetMessagesHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"(Lucy) should not hear (Oscar|Lucy)\")]\n        public void ThenListenerShouldNotHearShouter(string listener, string shouter)\n        {\n            Assert.IsFalse(shouty.GetMessagesHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"(Lucy) should hear (.*) shouts from (Sean)\")]\n        public void ThenListenerShouldHearShoutsFromShouter(string listener, int numberOfShouts, string shouter)\n        {\n            IDictionary<string, List<string>> shoutsHeardByListener = shouty.GetMessagesHeardBy(listener);\n            Assert.IsTrue(shoutsHeardByListener.ContainsKey(shouter));\n            Assert.AreEqual(numberOfShouts, shoutsHeardByListener[shouter].Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string>> messagesByPerson = new Dictionary<string, List<string>>();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson.Add(personName, coordinate);\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if(messagesByPerson.ContainsKey(shouterName))\n            {\n                messagesByPerson[shouterName].Add(message);\n            }\n            else\n            {\n                messagesByPerson.Add(shouterName, new List<string>(){message});   \n            }\n        }\n\n        public IDictionary<string, List<string>> GetMessagesHeardBy(string listenerName)\n        {\n            var result = new Dictionary<string, List<string>>();\n\n            foreach (var shout in messagesByPerson)\n            {\n                if(listenerName == shout.Key)\n                {\n                    continue;\n                }\n\n                var shouter = shout.Key;\n                var messages = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE)\n                    result.Add(shouter, messages);\n            }\n\n            return result;\n        }\n    }\n}","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","output":"WARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n...Try to say the following:\nSchele Schoonmoeder\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven people are located at\n  --- table step argument ---\n  | name  | x   | y    |\n  | Sean  | 500 | 0    |\n  | Oscar | 0   | 1100 |\n-> skipped because of previous errors\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Oscar shouts\n-> skipped because of previous errors\nThen Lucy should not hear Oscar\n-> skipped because of previous errors\nBut Lucy should hear Sean\n-> skipped because of previous errors\nPenguin is the best team\nPenguin for president\nF.Try to say the following:\nSchele Schoonmoeder\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven Sean is at 0, 500\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear 2 shouts from Sean\n-> skipped because of previous errors\nPenguin is the best team\nPenguin for president\nF.Try to say the following:\nSchele Schoonmoeder\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven Sean is at 0, 900\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear Sean\n-> skipped because of previous errors\nPenguin is the best team\nPenguin for president\nF.Try to say the following:\nSchele Schoonmoeder\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nGiven Sean is at 0, 1100\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear nothing\n-> skipped because of previous errors\nPenguin is the best team\nPenguin for president\nF.Try to say the following:\nSchele Schoonmoeder\nGiven Lucy is at 0, 0\n-> error: Invalid cast from 'System.String' to 'Shouty.Coordinate'.\nWhen Lucy shouts\n-> skipped because of previous errors\nThen Lucy should not hear Lucy\n-> skipped because of previous errors\nPenguin is the best team\nPenguin for president\nF\nTests run: 7, Errors: 5, Failures: 0, Inconclusive: 0, Time: 0.420699 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\nErrors and Failures:\n1) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\n   System.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x002a8] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType, System.IFormatProvider provider) [0x0025a] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (System.Type typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x0006a] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00013] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Globalization.CultureInfo cultureInfo) [0x00030] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo) [0x00023] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine+<>c__DisplayClass5.<GetExecuteArguments>b__4 (System.Object arg, System.Int32 argIndex) [0x00014] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at System.Linq.Enumerable+<SelectIterator>c__Iterator1`2[TSource,TResult].MoveNext () [0x0006e] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at System.Linq.Buffer`1[TElement]..ctor (System.Collections.Generic.IEnumerable`1[T] source) [0x00087] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00011] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments (TechTalk.SpecFlow.Bindings.BindingMatch match) [0x00066] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00041] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <fd7b8e6a4cbb479ba5dd0501c928918c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters () [0x000f3] in <fd7b8e6a4cbb479ba5dd0501c928918c>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n2) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\n   System.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x002a8] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType, System.IFormatProvider provider) [0x0025a] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (System.Type typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x0006a] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Object value, System.Globalization.CultureInfo cultureInfo) [0x00013] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo, System.Globalization.CultureInfo cultureInfo) [0x00030] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg (System.Object value, TechTalk.SpecFlow.Bindings.Reflection.IBindingType typeToConvertTo) [0x00023] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine+<>c__DisplayClass5.<GetExecuteArguments>b__4 (System.Object arg, System.Int32 argIndex) [0x00014] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at System.Linq.Enumerable+<SelectIterator>c__Iterator1`2[TSource,TResult].MoveNext () [0x0006e] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at System.Linq.Buffer`1[TElement]..ctor (System.Collections.Generic.IEnumerable`1[T] source) [0x00087] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00011] in <63992662b765477a898ef49cdcc99ee2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments (TechTalk.SpecFlow.Bindings.BindingMatch match) [0x00066] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00041] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <fd7b8e6a4cbb479ba5dd0501c928918c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson () [0x00071] in <fd7b8e6a4cbb479ba5dd0501c928918c>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n3) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"0, 900\",\"Sean\",null)\n   System.InvalidCastException : Invalid cast from 'System.String' to 'Shouty.Coordinate'.\n  at System.Convert.DefaultToType (System.IConvertible value, System.Type targetType, System.IFormatProvider provider) [0x002a8] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.String.System.IConvertible.ToType (System.Type type, System.IFormatProvider provider) [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType, System.IFormatProvider provider) [0x0025a] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple (System.Type typeToConvertTo, System.Object value, System.Globalizati\noutput truncated by cyber-dojo","PenguinLocation.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class PenguinLocation\n    {\n        public string Name {get;set;}\n        public int X {get;set;}\n        public int Y {get;set;}\n    }\n}","LocationSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\nusing System.Collections.Generic;\nusing TechTalk.SpecFlow.Assist;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n        private ShoutyNetwork shouty;\n\n        public LocationSteps(ShoutyHelper shoutyHelper)\n        {\n            shouty = shoutyHelper.Shouty;\n        }\n\n        [Given(@\"(Sean|Lucy|Oscar) is at (.*)\")]\n        public void GivenActorIsAt(string actor, Coordinate coordinate)\n        {\n            shouty.SetLocation(actor, coordinate);\n        }\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            var penguinLocations = table.CreateSet<PenguinLocation>();\n\n            foreach(PenguinLocation penguinLocation in penguinLocations)\n            {\n                shouty.SetLocation(penguinLocation.Name, new Coordinate(penguinLocation.X, penguinLocation.Y));\n            }\n        }\n\n        [StepArgumentTransformation(@\"\\[(.*), (.*)]\")]\n        public Coordinate ConvertCoordinate(int xCoord, int yCoord)\n        {\n            return new Coordinate(xCoord, yCoord);\n        }\n    }\n}","ShoutyHelper.cs":"namespace Shouty\n{\n    public class ShoutyHelper\n    {\n        public ShoutyNetwork Shouty { get; }\n\n        public ShoutyHelper()\n        {\n            Shouty = new ShoutyNetwork();\n        }\n    }\n}","ShoutyHooks.cs":"using TechTalk.SpecFlow;\nusing System;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutyHooks\n    {\n        [BeforeScenario]\n        public void RunBeforeScenario()\n        {\n            Console.WriteLine(\"Try to say the following:\");\n        }\n\n        [BeforeScenario]\n        public void RunBeforeScenario2()\n        {\n            Console.WriteLine(\"Schele Schoonmoeder\");\n        }\n\n        [AfterScenario]\n        public void RunAfterScenario()\n        {\n            Console.WriteLine(\"Penguin is the best team\");\n        }\n\n        [AfterScenario]\n        public void RunAfterScenario2()\n        {\n            Console.WriteLine(\"Penguin for president\");\n        }\n    }\n}"}