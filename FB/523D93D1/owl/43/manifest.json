{"output":"WARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n...Given Lucy is at 0, 0\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSomeoneShouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> error: The given key was not present in the dictionary.\nF.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 1100\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Sean\", 0, 1100) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSomeoneShouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> error: The given key was not present in the dictionary.\nF.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven Sean is at 0, 1500\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Sean\", 0, 1500) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSomeoneShouts(\"Sean\") (0.0s)\nThen Sean should not hear Sean\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Sean\", \"Sean\") (0.0s)\n.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenLucyorSeanorOscarIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven people are located at\n  --- table step argument ---\n  | name  | x   | y    |\n  | Sean  | 500 | 0    |\n  | Oscar | 0   | 1100 |\n-> done: LocationSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSomeoneShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenSomeoneShouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Oscar\n-> error: The given key was not present in the dictionary.\nBut Lucy should hear Sean\n-> skipped because of previous errors\nF\nTests run: 6, Errors: 3, Failures: 0, Inconclusive: 0, Time: 0.368825 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\nErrors and Failures:\n1) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearInRangeShouts(\"0, 900\",\"Sean\",null)\n   System.Collections.Generic.KeyNotFoundException : The given key was not present in the dictionary.\n  at System.ThrowHelper.ThrowKeyNotFoundException () [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x00021] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at Shouty.ShoutyNetwork.GetMessagesHeardBy (System.String listenerName) [0x0003c] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at Shouty.Specs.ShoutSteps.ThenLucyShouldHearSean () [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager)\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding (TechTalk.SpecFlow.Bindings.IBinding binding, TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, System.Object[] arguments, TechTalk.SpecFlow.Tracing.ITestTracer testTracer, System.TimeSpan& duration) [0x000ea] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch (TechTalk.SpecFlow.Bindings.BindingMatch match, System.Object[] arguments) [0x00012] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearInRangeShouts (System.String seans_Location, System.String what_Lucy_Hears, System.String[] exampleTags) [0x00067] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n2) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearInRangeShouts(\"0, 1100\",\"nothing\",null)\n   System.Collections.Generic.KeyNotFoundException : The given key was not present in the dictionary.\n  at System.ThrowHelper.ThrowKeyNotFoundException () [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x00021] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at Shouty.ShoutyNetwork.GetMessagesHeardBy (System.String listenerName) [0x0003c] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at Shouty.Specs.ShoutSteps.ThenLucyShouldHearNothing () [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager)\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding (TechTalk.SpecFlow.Bindings.IBinding binding, TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, System.Object[] arguments, TechTalk.SpecFlow.Tracing.ITestTracer testTracer, System.TimeSpan& duration) [0x000ea] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch (TechTalk.SpecFlow.Bindings.BindingMatch match, System.Object[] arguments) [0x00012] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearInRangeShouts (System.String seans_Location, System.String what_Lucy_Hears, System.String[] exampleTags) [0x00067] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n3) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.Table\n   System.Collections.Generic.KeyNotFoundException : The given key was not present in the dictionary.\n  at System.ThrowHelper.ThrowKeyNotFoundException () [0x00000] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x00021] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at Shouty.ShoutyNetwork.GetMessagesHeardBy (System.String listenerName) [0x0003c] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at Shouty.Specs.ShoutSteps.ThenListenerShouldNotHearShouter (System.String LName, System.String SName) [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager,string,string)\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n  at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding (TechTalk.SpecFlow.Bindings.IBinding binding, TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, System.Object[] arguments, TechTalk.SpecFlow.Tracing.ITestTracer testTracer, System.TimeSpan& duration) [0x000ea] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch (TechTalk.SpecFlow.Bindings.BindingMatch match, System.Object[] arguments) [0x00012] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.Table () [0x000f3] in <fcd1cff6b74a4406bbf814a866f4410a>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n\n_wapi_handle_unref_full: Attempting to unref unused handle 0x138\n_wapi_handle_unref_full: Attempting to unref unused handle 0x138\n","Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n//         TODO: actually calculate distance. I think we need to use pythagoras' theorem?\n//            return 0;\n\n            int xDiff = xCoord - other.xCoord;\n            int yDiff = yCoord - other.yCoord;\n            return (int) Math.Sqrt(Math.Pow(xDiff, 2) + Math.Pow(yDiff, 2));\n\n        }\n    }\n}","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(1000, 0);\n            Assert.AreEqual(1000, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background:\n    Given Lucy is at 0, 0\n\n  Scenario Outline: Only hear in range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n\n  Examples: some examples\n    | Seans-location | what-Lucy-hears |\n    | 0, 900         | Sean            |\n    | 0, 1100        | nothing         |\n\n  Scenario: Table\n    Given people are located at\n    | name  | x   | y     |\n    | Sean  | 500 | 0     | \n    | Oscar | 0   | 1100  | \n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n\n  Scenario: Own shouts should not be heard\n    Given Sean is at 0, 1500\n    When Sean shouts\n    Then Sean should not hear Sean\n\n  \n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [When(@\"(Oscar|Sean) shouts\")]\n        public void WhenSomeoneShouts(String Name)\n        {\n            shouty.Shout(Name, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.IsTrue(shouty.GetMessagesHeardBy(\"Lucy\").ContainsKey(\"Sean\"));\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"(Lucy|Sean) should not hear (Oscar|Sean)\")]\n        public void ThenListenerShouldNotHearShouter(String LName, String SName)\n        {\n            Assert.IsFalse(shouty.GetMessagesHeardBy(LName).ContainsKey(SName));\n        }\n\n        \n\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, string> messagesByPerson = new Dictionary<string, string>();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson.Add(personName, coordinate);\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            messagesByPerson.Add(shouterName, message);\n        }\n\n        public IDictionary<string, string> GetMessagesHeardBy(string listenerName)\n        {\n            var result = new Dictionary<string, string>();\n\n            foreach (var shout in messagesByPerson)\n            {\n                var shouter = shout.Key;\n                var message = shout.Value;\n\n\n                if (!shouter.Equals(listenerName)) {\n                   int distance = locationsByPerson[shouter]\n                        .DistanceFrom(locationsByPerson[listenerName]);\n\n                   if (distance < MESSAGE_RANGE){\n                        result.Add(shouter, message);\n                    }\n                }\n\n            }\n\n            return result;\n        }\n    }\n}","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","LocationSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenLucyorSeanorOscarIsAt(string Name,int xCoord, int yCoord)\n        {\n            shouty.SetLocation(Name, new Coordinate(xCoord, yCoord));\n        }\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            //var owlObject= table.CreateInstance<OwlObject>();\n            {\n            //table.CreateSet<OwlObject>()\n            //loop over each row\n            foreach (var row in table.Rows)\n            {\n                string person=row[0];\n                int xCoord = Int32.Parse(row[1]);\n                int yCoord = Int32.Parse(row[2]);\n                \n                shouty.SetLocation(person, new Coordinate(xCoord, yCoord));\n            }\n            }\n        }\n    \n     }\n}"}