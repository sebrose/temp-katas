{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n//         TODO: actually calculate distance. I think we need to use pythagoras' theorem?\n//            return 0;\n\n            int xDiff = xCoord - other.xCoord;\n            int yDiff = yCoord - other.yCoord;\n\n            return (int) Math.Sqrt(Math.Pow(xDiff, 2) + Math.Pow(yDiff, 2));\n\n        }\n    }\n}","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(1000, 0);\n            Assert.AreEqual(1000, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 1100\n    When Sean shouts\n    Then Lucy should hear nothing\n\n  Scenario: Multiple shouters\n    Given people are located at\n      | name  | x   | y    |\n      | Lucy  | 0   | 0    |\n      | Sean  | 500 | 0    |\n      | Oscar | 0   | 1100 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    And Sean should not hear Sean\n    And Oscar should not hear Oscar\n    But Lucy should hear Sean\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenPersonIsAt(string person, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(person, new Coordinate(xCoord, yCoord));\n        }\n\n//        [Given(@\"Sean is at (.*), (.*)\")]\n//        public void GivenSeanIsAt(int xCoord, int yCoord)\n//        {\n//            shouty.SetLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n//        }\n\n        [When(@\"(Sean|Oscar) shouts\")]\n        public void WhenPersonShouts(string person)\n        {\n            shouty.Shout(person, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"(Lucy|Sean|Oscar) should not hear (Sean|Oscar)\")]\n        public void ThenListenerShouldNotHearShouter(string listener, string shouter)\n        {\n            Assert.IsFalse(shouty.GetMessagesHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"Lucy should hear (Sean|Oscar)\")]\n        public void ThenLucyShouldHearPerson(string person)\n        {\n            Assert.IsTrue(shouty.GetMessagesHeardBy(\"Lucy\").ContainsKey(person));\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, string> messagesByPerson = new Dictionary<string, string>();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson.Add(personName, coordinate);\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            messagesByPerson.Add(shouterName, message);\n        }\n\n        public IDictionary<string, string> GetMessagesHeardBy(string listenerName)\n        {\n            var result = new Dictionary<string, string>();\n\n            foreach (var shout in messagesByPerson)\n            {\n                var shouter = shout.Key;\n                var message = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE && shouter != listenerName)\n                    result.Add(shouter, message);\n            }\n\n            return result;\n        }\n    }\n}","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","output":"WARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n...Given Lucy is at 0, 0\n-> done: ShoutSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenPersonIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenLucyShouldHearPerson(\"Sean\") (0.0s)\n.Given people are located at\n  --- table step argument ---\n  | name  | x   | y    |\n  | Lucy  | 0   | 0    |\n  | Sean  | 500 | 0    |\n  | Oscar | 0   | 1100 |\n-> No matching step definition found for the step. Use the following code to create one:\n        [Given(@\"people are located at\")]\r\n        public void GivenPeopleAreLocatedAt(Table table)\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Oscar shouts\n-> skipped because of previous errors\nThen Lucy should not hear Oscar\n-> skipped because of previous errors\nAnd Sean should not hear Sean\n-> skipped because of previous errors\nAnd Oscar should not hear Oscar\n-> skipped because of previous errors\nBut Lucy should hear Sean\n-> skipped because of previous errors\nF.Given Lucy is at 0, 0\n-> done: ShoutSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 1100\n-> done: ShoutSteps.GivenPersonIsAt(\"Sean\", 0, 1100) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> done: ShoutSteps.ThenLucyShouldHearNothing() (0.0s)\n\nTests run: 5, Errors: 1, Failures: 0, Inconclusive: 0, Time: 0.418661 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\nErrors and Failures:\n1) Test Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\n   TechTalk.SpecFlow.MissingStepDefinitionException : No matching step definition found for one or more steps.\n  at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError (TechTalk.SpecFlow.Infrastructure.TestStatus testStatus, System.String message) [0x00051] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001ab] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <41e5be7ec49f4ca09697e510e75be364>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters () [0x0013d] in <41e5be7ec49f4ca09697e510e75be364>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00038] in <dca3b561b8ad4f9fb10141d81b39ff45>:0 \n\n\n_wapi_handle_unref_full: Attempting to unref unused handle 0x13a\n_wapi_handle_unref_full: Attempting to unref unused handle 0x13a\n"}