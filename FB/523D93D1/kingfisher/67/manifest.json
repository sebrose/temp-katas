{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n//         TODO: actually calculate distance. I think we need to use pythagoras' theorem?\n//            return 0;\n\n            int xDiff = xCoord - other.xCoord;\n            //return Math.Abs(xDiff);\n            int yDiff = yCoord - other.yCoord;\n//return Math.Abs(yDiff);\n            return (int) Math.Sqrt(Math.Pow(xDiff, 2) + Math.Pow(yDiff, 2));\n\n        }\n    }\n}","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(1000, 0);\n            Assert.AreEqual(1000, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background:\n\tGiven Lucy is at 0, 0\n    \n#  Scenario: In range shout is heard\n#    And Sean is at 0, 900\n#    When Sean shouts\n#    Then Lucy should hear Sean\n\n#  Scenario: Out of range shout is not heard\n#    And Sean is at 0, 1100\n#    When Sean shouts\n#    Then Lucy should hear nothing\n\n  Scenario Outline: only hear in-range shouts\n    Given Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears |\n      | 0, 900 | Sean |\n      | 0, 1100 | nothing |\n  \n  Scenario: Multiple shouters\n#\tGiven Lucy is at 0, 0\n#    And Sean is at 0, 500\n#    And Oscar is at 1100, 0\n    Given people are located at\n      | name | x | y |\n#      | Lucy | 0 | 0 |\n      | Sean | 500 | 0 |\n      | Oscar | 0 | 1100 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: Shouters do not hear own shout\n\tGiven Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Lucy shouts\n    And Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Lucy\n    And Sean should not hear Sean\n    And Oscar should not hear Oscar\n    \n# TODO @home    \n#  Scenario: Multiple shouts from one person\n#    Given Sean is at 0, 500\n#    When Sean shouts\n#    And Sean shouts\n#    Then Lucy should hear 2 shouts from Sean\n    \n    ","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing System.Linq;\nusing TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n//        public ShoutSteps(ShoutyNetwork shouty)\n//        {\n//            this.shouty = shouty;\n//        }\n        \n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private ShoutyNetwork shouty;// = new ShoutyNetwork();\n/*\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenPersonIsAt(string name, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n//        [Given(@\"Sean is at (.*), (.*)\")]\n//        public void GivenSeanIsAt(int xCoord, int yCoord)\n//        {\n//            shouty.SetLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n//        }\n\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            var persons = table.CreateSet<Person>();\n            foreach(var data in persons)\n            {\n                shouty.SetLocation(data.name, new Coordinate(data.x, data.y));\n            }\n         //   foreach(var row in table.Rows) \n         //   {\n         //       var x = Convert.ToInt32(row[\"x\"]);\n         //       var y = Convert.ToInt32(row[\"y\"]);\n         //       shouty.SetLocation(row[\"name\"], new Coordinate(x, y));\n         //   }            \n        }\n*/      \n        [When(@\"(Lucy|Sean|Oscar) shouts\")]\n        public void WhenPersonShouts(string name)\n        {\n            shouty = ScenarioContext.Current.Get<ShoutyNetwork>();\n            shouty.Shout(name, ARBITRARY_MESSAGE);\n        }\n\n//        [When(@\"Oscar shouts\")]\n//        public void WhenOscarShouts()\n//        {\n//            //ScenarioContext.Current.Pending();\n//        }\n\n        [Then(@\"(Lucy|Sean|Oscar) should hear (Lucy|Sean|Oscar)\")]\n        public void ThenListenerShouldHearShouter(string listener, string shouter)\n        {\n            shouty = ScenarioContext.Current.Get<ShoutyNetwork>();\n            Assert.IsTrue(shouty.GetMessagesHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"(Lucy|Sean|Oscar) should not hear (Lucy|Sean|Oscar)\")]\n        public void ThenListenerShouldNotHearShouter(string listener, string shouter)\n        {\n            shouty = ScenarioContext.Current.Get<ShoutyNetwork>();\n            Assert.IsFalse(shouty.GetMessagesHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"(Lucy|Sean|Oscar) should hear (.*) shouts from (Lucy|Sean|Oscar)\")]\n        public void ThenLucyShouldHearShoutsFromSean(string listener, int nrShouts, string shouter)\n        {\n            shouty = ScenarioContext.Current.Get<ShoutyNetwork>();\n            Assert.AreEqual(nrShouts, \n               shouty.GetMessagesHeardBy(listener).Count(kvp => kvp.Value.Equals(\"Sean\")));\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            shouty = ScenarioContext.Current.Get<ShoutyNetwork>();\n            Assert.AreEqual(0, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, string> messagesByPerson = new Dictionary<string, string>();\n        //private readonly MultiMap<string, string> messagesByPerson = new Dictionary<string, string>();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson.Add(personName, coordinate);\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            messagesByPerson.Add(shouterName, message);\n        }\n\n        public IDictionary<string, string> GetMessagesHeardBy(string listenerName)\n        {\n            var result = new Dictionary<string, string>();\n\n            foreach (var shout in messagesByPerson)\n            {\n                var shouter = shout.Key;\n                var message = shout.Value;\n\n                var distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if ((distance < MESSAGE_RANGE) && \n                    (!listenerName.Equals(shouter)))\n                {\n                    result.Add(shouter, message);\n            \t}\n            }\n\n            return result;\n        }\n    }\n}","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","output":"WARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n...Given Lucy is at 0, 0\n-> done: LocationSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven people are located at\n  --- table step argument ---\n  | name  | x   | y    |\n  | Sean  | 500 | 0    |\n  | Oscar | 0   | 1100 |\n-> done: LocationSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Oscar\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Lucy\", \"Oscar\") (0.0s)\nBut Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven Sean is at 0, 900\n-> done: LocationSteps.GivenPersonIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven Sean is at 0, 1100\n-> done: LocationSteps.GivenPersonIsAt(\"Sean\", 0, 1100) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> done: ShoutSteps.ThenLucyShouldHearNothing() (0.0s)\n.Given Lucy is at 0, 0\n-> done: LocationSteps.GivenPersonIsAt(\"Lucy\", 0, 0) (0.0s)\nGiven Sean is at 0, 500\n-> done: LocationSteps.GivenPersonIsAt(\"Sean\", 0, 500) (0.0s)\nAnd Oscar is at 1100, 0\n-> done: LocationSteps.GivenPersonIsAt(\"Oscar\", 1100, 0) (0.0s)\nWhen Lucy shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Lucy\") (0.0s)\nAnd Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Lucy\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Lucy\", \"Lucy\") (0.0s)\nAnd Sean should not hear Sean\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Sean\", \"Sean\") (0.0s)\nAnd Oscar should not hear Oscar\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Oscar\", \"Oscar\") (0.0s)\n\nTests run: 6, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.308306 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\n","Person.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n\tpublic class Person\n\t{\n        public string name { get; set; }\n        public int x { get; set; }\n        public int y { get; set; }\n        \n        public Person(string name, int x, int y)\n        {\n            this.name = name;\n            this.x = x;\n            this.y = y;\n        }\n        \n\t}\n}","LocationSteps.cs":"using System;\nusing System.Linq;\nusing TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n//        public LocationSteps(ShoutyNetwork shouty)\n//        {\n//            this.shouty = shouty;\n//        }\n\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenPersonIsAt(string name, int xCoord, int yCoord)\n        {\n            ScenarioContext.Current.Set<ShoutyNetwork>(shouty);\n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n//        [Given(@\"Sean is at (.*), (.*)\")]\n//        public void GivenSeanIsAt(int xCoord, int yCoord)\n//        {\n//            shouty.SetLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n//        }\n\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            ScenarioContext.Current.Set<ShoutyNetwork>(shouty);\n            var persons = table.CreateSet<Person>();\n            foreach(var data in persons)\n            {\n                shouty.SetLocation(data.name, new Coordinate(data.x, data.y));\n            }\n         //   foreach(var row in table.Rows) \n         //   {\n         //       var x = Convert.ToInt32(row[\"x\"]);\n         //       var y = Convert.ToInt32(row[\"y\"]);\n         //       shouty.SetLocation(row[\"name\"], new Coordinate(x, y));\n         //   }            \n        }\n    }\n}"}