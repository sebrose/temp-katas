{"cyber-dojo.sh":"rspec . --format progress\n\n# Test output can be formatted as progress or documentation\ncucumber -f progress ./*.feature \\\n  -r location_steps.rb \\\n  -r shout_steps.rb\n\ncucumber --help","coordinate_spec.rb":"require_relative 'coordinate'\n\ndescribe Coordinate do\n  it \"calculates the distance from itself\" do\n    a = Coordinate.new(0, 0)\n    expect(a.distance_from(a)).to eq(0)\n  end\n\n  it \"calculates the distance from another coordinate along x axis\" do\n    a = Coordinate.new(0, 0)\n    b = Coordinate.new(600, 0)\n    expect(a.distance_from(b)).to eq(600)\n  end\n\n  it \"calculates the distance from another coordinate\" do\n    a = Coordinate.new(0, 0)\n    b = Coordinate.new(300, 400)\n    expect(a.distance_from(b)).to eq(500)\n  end\nend\n","coordinate.rb":"class Coordinate\n  \n  attr_reader :x, :y\n\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\n\n  def distance_from(other)\n    x_delta = x - other.x\n    y_delta = y - other.y\n    Math.sqrt(x_delta * x_delta + y_delta * y_delta).to_i\n  end\n\nend\n","env.rb":"","hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\nScenario: Multiple shouts from one person\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean","shout_steps.rb":"require_relative 'shouty'\n\nBefore do\n  @shouty = Shouty.new\nend\n\nARBITRARY_MESSAGE = \"Hello, world\"\n\nWhen('{word} shouts') do |name|\n  @shouty.shout(name, ARBITRARY_MESSAGE)\nend\n\nThen('Lucy should hear Sean') do\n  expect(@shouty.shouts_heard(\"Lucy\",\"Sean\").size).to_not eq(0)\nend\n\nThen('Lucy should hear nothing') do\n  expect(@shouty.shouts_heard_by(\"Lucy\").size).to eq(0)\nend\n\nThen('{word} should not hear {word}') do |listener,shouter|\n  expect(@shouty.shouts_heard(listener,shouter).size).to eq(0)  \nend\n\nThen(\"Lucy should hear {int} shouts from Sean\") do |int|\n  expect(@shouty.shouts_heard(\"Lucy\",\"Sean\").size).to eq(int)  \nend\n","shouty.rb":"require_relative 'coordinate'\n\nclass Shouty\n    MESSAGE_RANGE = 1000\n\n    def initialize\n      @locations = {}\n      @shouts = {}\n    end\n\n    def set_location(person, location)\n      @locations[person] = location\n    end\n\n    def shout(person, shout)\n      @shouts[person] ||= []\n      @shouts[person].push(shout)\n    end\n\n    def shouts_heard(listener, shouter)\n      shouts_heard_by(listener)[shouter] || []\n    end\n  \n    def shouts_heard_by(listener)\n      heard = {}\n      @shouts.each do |who, what|\n        distance = distance_between(listener,who)\n        if who != listener && distance < MESSAGE_RANGE\n          heard[who] ||= []\n          heard[who].push(*what)\n        end\n      end\n      heard\n    end\n  \n  def distance_between(from, to)\n    @locations[from].distance_from(@locations[to])\n  end\n  \nend\n","spec_helper.rb":"# This file was generated by the `rspec --init` command. Conventionally, all\n# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.\n# The generated `.rspec` file contains `--require spec_helper` which will cause\n# this file to always be loaded, without a need to explicitly require it in any\n# files.\n#\n# Given that it is always loaded, you are encouraged to keep this file as\n# light-weight as possible. Requiring heavyweight dependencies from this file\n# will add to the boot time of your test suite on EVERY test run, even for an\n# individual file that may not need all of that loaded. Instead, consider making\n# a separate helper file that requires the additional dependencies and performs\n# the additional setup, and require it from the spec files that actually need\n# it.\n#\n# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration\nRSpec.configure do |config|\n  # rspec-expectations config goes here. You can use an alternate\n  # assertion/expectation library such as wrong or the stdlib/minitest\n  # assertions if you prefer.\n  config.expect_with :rspec do |expectations|\n    # This option will default to `true` in RSpec 4. It makes the `description`\n    # and `failure_message` of custom matchers include text for helper methods\n    # defined using `chain`, e.g.:\n    #     be_bigger_than(2).and_smaller_than(4).description\n    #     # => \"be bigger than 2 and smaller than 4\"\n    # ...rather than:\n    #     # => \"be bigger than 2\"\n    expectations.include_chain_clauses_in_custom_matcher_descriptions = true\n  end\n\n  # rspec-mocks config goes here. You can use an alternate test double\n  # library (such as bogus or mocha) by changing the `mock_with` option here.\n  config.mock_with :rspec do |mocks|\n    # Prevents you from mocking or stubbing a method that does not exist on\n    # a real object. This is generally recommended, and will default to\n    # `true` in RSpec 4.\n    mocks.verify_partial_doubles = true\n  end\n\n  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will\n  # have no way to turn it off -- the option exists only for backwards\n  # compatibility in RSpec 3). It causes shared context metadata to be\n  # inherited by the metadata hash of host groups and examples, rather than\n  # triggering implicit auto-inclusion in groups with matching metadata.\n  config.shared_context_metadata_behavior = :apply_to_host_groups\n\n# The settings below are suggested to provide a good initial experience\n# with RSpec, but feel free to customize to your heart's content.\n=begin\n  # This allows you to limit a spec run to individual examples or groups\n  # you care about by tagging them with `:focus` metadata. When nothing\n  # is tagged with `:focus`, all examples get run. RSpec also provides\n  # aliases for `it`, `describe`, and `context` that include `:focus`\n  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.\n  config.filter_run_when_matching :focus\n\n  # Allows RSpec to persist some state between runs in order to support\n  # the `--only-failures` and `--next-failure` CLI options. We recommend\n  # you configure your source control system to ignore this file.\n  config.example_status_persistence_file_path = \"spec/examples.txt\"\n\n  # Limits the available syntax to the non-monkey patched syntax that is\n  # recommended. For more details, see:\n  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/\n  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/\n  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode\n  config.disable_monkey_patching!\n\n  # This setting enables warnings. It's recommended, but in some cases may\n  # be too noisy due to issues in dependencies.\n  config.warnings = true\n\n  # Many RSpec users commonly either run the entire suite or an individual\n  # file, and it's useful to allow more verbose output when running an\n  # individual spec file.\n  if config.files_to_run.one?\n    # Use the documentation formatter for detailed output,\n    # unless a formatter has already been configured\n    # (e.g. via a command-line flag).\n    config.default_formatter = \"doc\"\n  end\n\n  # Print the 10 slowest examples and example groups at the\n  # end of the spec run, to help surface which specs are running\n  # particularly slow.\n  config.profile_examples = 10\n\n  # Run specs in random order to surface order dependencies. If you find an\n  # order dependency and want to debug it, you can fix the order by providing\n  # the seed, which is printed after each run.\n  #     --seed 1234\n  config.order = :random\n\n  # Seed global randomization in this process using the `--seed` CLI option.\n  # Setting this allows you to use `--seed` to deterministically reproduce\n  # test failures related to randomization by passing the same `--seed` value\n  # as the one that triggered the failure.\n  Kernel.srand config.seed\n=end\nend\n","output":"...\n\nFinished in 0.0024 seconds (files took 0.13264 seconds to load)\n3 examples, 0 failures\n\n.....\n\n1 scenario (1 passed)\n5 steps (5 passed)\n0m0.030s\nUsage: cucumber [options] [ [FILE|DIR|URL][:LINE[:LINE]*] ]+\n\nExamples:\ncucumber examples/i18n/en/features\ncucumber @rerun.txt (See --format rerun)\ncucumber examples/i18n/it/features/somma.feature:6:98:113\ncucumber -s -i http://rubyurl.com/eeCl\n\n    -r, --require LIBRARY|DIR        Require files before executing the features. If this\n                                     option is not specified, all *.rb files that are\n                                     siblings or below the features will be loaded auto-\n                                     matically. Automatic loading is disabled when this\n                                     option is specified, and all loading becomes explicit.\n                                     Files under directories named \"support\" are always\n                                     loaded first.\n                                     This option can be specified multiple times.\n        --retry ATTEMPTS             Specify the number of times to retry failing tests (default: 0)\n        --i18n-languages             List all available languages\n        --i18n-keywords LANG         List keywords for in a particular language\n                                     Run with \"--i18n help\" to see all languages\n        --fail-fast                  Exit immediately following the first failing scenario\n    -f, --format FORMAT              How to format features (Default: pretty). Available formats:\n                                       html        : Generates a nice looking HTML report.\n                                       json        : Prints the feature as JSON\n                                       json_pretty : Prints the feature as prettified JSON\n                                       junit       : Generates a report similar to Ant+JUnit.\n                                       pretty      : Prints the feature as is - in colours.\n                                       progress    : Prints one character per scenario.\n                                       rerun       : Prints failing files with line numbers.\n                                       stepdefs    : Prints All step definitions with their locations. Same as\n                                                     the usage formatter, except that steps are not printed.\n                                       summary     : Summary output of feature and scenarios\n                                       usage       : Prints where step definitions are used.\n                                                     The slowest step definitions (with duration) are\n                                                     listed first. If --dry-run is used the duration\n                                                     is not shown, and step definitions are sorted by\n                                                     filename instead.\n                                     Use --format rerun --out rerun.txt to write out failing\n                                     features. You can rerun them with cucumber @rerun.txt.\n                                     FORMAT can also be the fully qualified class name of\n                                     your own custom formatter. If the class isn't loaded,\n                                     Cucumber will attempt to require a file with a relative\n                                     file name that is the underscore name of the class name.\n                                     Example: --format Foo::BarZap -> Cucumber will look for\n                                     foo/bar_zap.rb. You can place the file with this relative\n                                     path underneath your features/support directory or anywhere\n                                     on Ruby's LOAD_PATH, for example in a Ruby gem.\n        --init                       Initializes folder structure and generates conventional files for\n                                     a Cucumber project.\n    -o, --out [FILE|DIR]             Write output to a file/directory instead of STDOUT. This option\n                                     applies to the previously specified --format, or the\n                                     default format if no format is specified. Check the specific\n                                     formatter's docs to see whether to pass a file or a dir.\n    -t, --tags TAG_EXPRESSION        Only execute the features or scenarios with tags matching TAG_EXPRESSION.\n                                     Scenarios inherit tags declared on the Feature level. The simplest\n                                     TAG_EXPRESSION is simply a tag. Example: --tags @dev. To represent\n                                     boolean NOT preceed the tag with 'not '. Example: --tags 'not @dev'.\n                                     A tag expression can have several tags separated by an or which represents\n                                     logical OR. Example: --tags '@dev or @wip'. The --tags option can be specified\n                                     A tag expression can have several tags separated by an and which represents\n                                     logical AND. Example: --tags '@dev and @wip'. The --tags option can be specified\n                                     several times, and this also represents logical AND.\n                                     Example: --tags '@foo or not @bar' --tags @zap. This represents the boolean\n                                     expression (@foo || !@bar) && @zap.\n                                     \n                                     Beware that if you want to use several negative tags to exclude several tags\n                                     you have to use logical AND: --tags 'not @fixme and not @buggy'.\n                                     \n                                     Tags can be given a threshold to limit the number of occurrences.\n                                     Example: --tags @qa:3 will fail if there are more than 3 occurrences of the @qa tag.\n                                     This can be practical if you are practicing Kanban or CONWIP.\n    -n, --name NAME                  Only execute the feature elements which match part of the given name.\n                                     If this option is given more than once, it will match against all the\n                                     given names.\n    -e, --exclude PATTERN            Don't run feature files or require ruby files matching PATTERN\n    -p, --profile PROFILE            Pull commandline arguments from cucumber.yml which can be defined as\n                                     strings or arrays.  When a 'default' profile is defined and no profile\n                                     is specified it is always used. (Unless disabled, see -P below.)\n                                     When feature files are defined in a profile and on the command line\n                                     then only the ones from the command line are used.\n    -P, --no-profile                 Disables all profile loading to avoid using the 'default' profile.\n    -c, --[no-]color                 Whether or not to use ANSI color in the output. Cucumber decides\n                                     based on your platform and the output destination if not specified.\n    -d, --dry-run                    Invokes formatters without executing the steps.\n                                     This also omits the loading of your support/env.rb file if it exists.\n    -m, --no-multiline               Don't print multiline strings and tables under steps.\n    -s, --no-source                  Don't print the file and line of the step definition with the steps.\n    -i, --no-snippets                Don't print snippets for pending steps.\n    -I, --snippet-type TYPE          Use different snippet type (Default: cucumber_expression). Available types:\n                                     classic: Snippets without parentheses. Note that these cause a warning from modern versions of Ruby. e.g. Given /^I have (\\d+) cukes$/\n                                     cucumber_expression: Cucumber Expressions         e.g. Given(\"I have {int} cukes\")\n                                     percent: Snippets with percent regexp e.g. Given %r{^I have (\\d+) cukes$}\n                                     regexp : Snippets with parentheses    e.g. Given(/^I have (\\d+) cukes$/)\n    -q, --quiet                      Alias for --no-snippets --no-source.\n        --no-duration                Don't print the duration at the end of the summary\n    -b, --backtrace                  Show full backtrace for all errors.\n    -S, --[no-]strict                Fail if there are any strict affected results \n                                     (that is undefined, pending or flaky results).\n        --[no-]strict-undefined      Fail if there are any undefined results.\n        --[no-]strict-pending        Fail if there are any pending results.\n        --[no-]strict-flaky          Fail if there are any flaky results.\n    -w, --wip                        Fail if there are any passing scenarios.\n    -v, --verbose                    Show the files and features loaded.\n    -g, --guess                      Guess best match for Ambiguous steps.\n    -l, --lines LINES                Run given line numbers. Equivalent to FILE:LINE syntax\n    -x, --expand                     Expand Scenario Outline Tables in output.\n        --order TYPE[:SEED]          Run examples in the specified order. Available types:\n                                       [defined]     Run scenarios in the order they were defined (default).\n                                       [random]      Shuffle scenarios before running.\n                                     Specify SEED to reproduce the shuffling from a previous run.\n                                       e.g. --order random:5738\n        --version                    Show version.\n    -h, --help                       You're looking at it.\n","temp":"  Scenario Outline: only hear in-range shouts\n    Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n      | Seans-location | what-Lucy-hears |\n      | 0, 900         | Sean            |\n      | 800, 800       | nothing         |\n\n  Scenario: Multiple shouters\n    Given people are located at\n    | name  | x    | y   |\n    | Lucy  | 0    | 0   |\n    | Sean  | 0    | 500 |\n    | Oscar | 1100 | 0   |  \n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: Shouters should not hear their own shout\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n","location_steps.rb":"require_relative 'shouty'\n\nGiven('{word} is at {int}, {int}') do |name, x, y|\n  @shouty.set_location(name, Coordinate.new(x, y))\nend\n\nGiven(\"people are located at\") do |table|\n  table.hashes.each do |row|\n    name = row['name']\n    x = row['x'].to_i\n    y = row['y'].to_i\n    @shouty.set_location(name, Coordinate.new(x, y))    \n  end\nend\n"}