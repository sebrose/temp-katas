{"id":"8F0FF7D2CF","created":[2017,6,16,14,32,3],"image_name":"cyberdojofoundation/javascript-node_cucumber","display_name":"Shouty, Javascript","filename_extension":".js","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Shouty-Javascript","tab_size":2,"visible_files":{".jshintrc":"{\n    // DO NOT WANT TO USE JSHINT =>\n    // DELETE THIS FILE\n    //\n    // JSHint Default Configuration File (as on JSHint website)\n    // See http://jshint.com/docs/ for more details\n\n    \"maxerr\"        : 50,       // {int} Maximum error before stopping\n\n    // Enforcing\n    \"bitwise\"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)\n    \"camelcase\"     : false,    // true: Identifiers must be in camelCase\n    \"curly\"         : true,     // true: Require {} for every new block or scope\n    \"eqeqeq\"        : true,     // true: Require triple equals (===) for comparison\n    \"forin\"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()\n    \"freeze\"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.\n    \"immed\"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n    \"indent\"        : false,        // {int} Number of spaces to use for indentation\n    \"latedef\"       : false,    // true: Require variables/functions to be defined before being used\n    \"newcap\"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`\n    \"noarg\"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`\n    \"noempty\"       : true,     // true: Prohibit use of empty blocks\n    \"nonbsp\"        : true,     // true: Prohibit \"non-breaking whitespace\" characters.\n    \"nonew\"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)\n    \"plusplus\"      : false,    // true: Prohibit use of `++` and `--`\n    \"quotmark\"      : false,    // Quotation mark consistency:\n                                //   false    : do nothing (default)\n                                //   true     : ensure whatever is used is consistent\n                                //   \"single\" : require single quotes\n                                //   \"double\" : require double quotes\n    \"undef\"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)\n    \"unused\"        : true,     // Unused variables:\n                                //   true     : all variables, last function parameter\n                                //   \"vars\"   : all variables only\n                                //   \"strict\" : all variables, all function parameters\n    \"strict\"        : true,     // true: Requires all functions run in ES5 Strict Mode\n    \"maxparams\"     : false,    // {int} Max number of formal params allowed per function\n    \"maxdepth\"      : false,    // {int} Max depth of nested blocks (within functions)\n    \"maxstatements\" : false,    // {int} Max number statements per function\n    \"maxcomplexity\" : false,    // {int} Max cyclomatic complexity per function\n    \"maxlen\"        : false,    // {int} Max number of characters per line\n    \"varstmt\"       : false,    // true: Disallow any var statements. Only `let` and `const` are allowed.\n\n    // Relaxing\n    \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n    \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n    \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n    \"eqnull\"        : false,     // true: Tolerate use of `== null`\n    \"es5\"           : false,      // true: Allow ES5 syntax (ex: getters and setters)\n    \"esnext\"        : true,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n    \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                                 // (ex: `for each`, multiple try/catch, function expressionâ€¦)\n    \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n    \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n    \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\n    \"globalstrict\"  : false,     // true: Allow global \"use strict\" (also enables 'strict')\n    \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n    \"lastsemic\"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n    \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n    \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n    \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n    \"multistr\"      : false,     // true: Tolerate multi-line strings\n    \"noyield\"       : false,     // true: Tolerate generator functions with no yield statement in them.\n    \"notypeof\"      : false,     // true: Tolerate invalid typeof operator values\n    \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n    \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n    \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n    \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n    \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n    \"validthis\"     : true,     // true: Tolerate using this in a non-constructor function\n\n    // Environments\n    \"browser\"       : false,     // Web Browser (window, document, etc)\n    \"browserify\"    : false,    // Browserify (node.js code in the browser)\n    \"couch\"         : false,    // CouchDB\n    \"devel\"         : true,     // Development/debugging (alert, confirm, etc)\n    \"dojo\"          : false,    // Dojo Toolkit\n    \"jasmine\"       : false,    // Jasmine\n    \"jquery\"        : false,    // jQuery\n    \"mocha\"         : true,     // Mocha\n    \"mootools\"      : false,    // MooTools\n    \"node\"          : true,    // Node.js\n    \"nonstandard\"   : false,    // Widely adopted globals (escape, unescape, etc)\n    \"phantom\"       : false,    // PhantomJS\n    \"prototypejs\"   : false,    // Prototype and Scriptaculous\n    \"qunit\"         : false,    // QUnit\n    \"rhino\"         : false,    // Rhino\n    \"shelljs\"       : false,    // ShellJS\n    \"typed\"         : false,    // Globals for typed array constructions\n    \"worker\"        : false,    // Web Workers\n    \"wsh\"           : false,    // Windows Scripting Host\n    \"yui\"           : false,    // Yahoo User Interface\n\n    // Custom Globals\n    \"globals\"       : {}        // additional predefined global variables\n}\n","coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.distanceFrom = function(other) {\n\n    // TODO: actually caluculate distance. I think we need to use pythagoras' theorem?\n    return 0\n  }\n};\n","coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../lib/coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0);\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0);\n    var b = new Coordinate(1000, 0);\n\n    assert.equal(a.distanceFrom(b), 1000)\n\n  })\n})\n","hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 1100\n    When Sean shouts\n    Then Lucy should hear nothing\n","shout_steps.js":"var assert = require('assert');\nvar Shouty = require('../../lib/shouty');\nvar Coordinate = require('../../lib/coordinate')\n\nvar {defineSupportCode} = require('cucumber');\n\ndefineSupportCode(function({Given, When, Then}) {\n  const ARBITARY_MESSAGE = 'Hello, world'\n  var shouty = new Shouty()\n\n  Given(/^Lucy is at (\\d+), (\\d+)$/, function (x, y, callback) {\n    shouty.setLocation('Lucy', new Coordinate(x, y))\n    callback()\n  });\n\n  Given(/^Sean is at (\\d+), (\\d+)$/, function (x, y, callback) {\n    shouty.setLocation('Sean', new Coordinate(x, y))\n    callback()\n  });\n\n  When(/^Sean shouts$/, function (callback) {\n    shouty.shout('Sean', ARBITARY_MESSAGE)\n    callback()\n  });\n\n  Then(/^Lucy should hear Sean$/, function (callback) {\n    assert.equal(Object.keys(shouty.getMessagesHeardBy('Lucy')).length, 1)\n    callback()\n  });\n\n  Then(/^Lucy should hear nothing$/, function (callback) {\n    assert.equal(Object.keys(shouty.getMessagesHeardBy('Lucy')).length, 0)\n    callback()\n  });\n\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.messages = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, message) {\n    this.messages[person] = message\n  }\n\n  this.getMessagesHeardBy = function(listener) {\n    var result = {}\n\n    Object.keys(this.messages).forEach(shouter => {\n        var message = this.messages[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          result[shouter] = message\n        }\n    })\n\n    return result\n  }\n};\n","world.js":"var {defineSupportCode} = require('cucumber');\n\nfunction CustomWorld() {\n}\n\ndefineSupportCode(function({setWorldConstructor}) {\n  setWorldConstructor(CustomWorld)\n});\n","cyber-dojo.sh":"# Change the version of Node.js to use, see https://nodejs.org\n# to see the supported ES6 features see: https://kangax.github.io/compat-table/es6/\n# 4.1.1 supports some ES6 (about 50%) features: https://nodejs.org/en/docs/es6/\n# 0.12.7 is the latest version without most ES6 (about 20%) features: https://nodejs.org/docs/latest-v0.12.x/api/\n#\n# set the version to use:\n#NODE_VERSION=0.12.7\nNODE_VERSION=4.2.1\n#\n# Use npm package 'n' to call jasmine and jshint with selected node version:\nif [ -f .jshintrc ]\n  then\n    n use $NODE_VERSION /usr/lib/node_modules/jshint/bin/jshint --config .jshintrc *.js\nfi\nn use $NODE_VERSION /usr/local/lib/node_modules/cucumber/bin/cucumber.js --format-options '{\"colorsEnabled\":false}' *.feature\n","hiker.feature":"Feature: hitch-hiker playing scrabble\n\n  Scenario: hitch-hiker playing scrabble in the past\n    Given the hitch-hiker selects some tiles\n    When they spell 6 times 9\n    Then the score is 42\n","hiker.js":"'use strict';\n\nexports.answer = function answer(a, b) {\n  return a * b;\n};\n","hiker_steps.js":"\"use strict\";\n\nconst assert = require('assert');\nconst defineSupportCode = require('/usr/local/lib/node_modules/cucumber').defineSupportCode;\nconst hiker = require('./hiker');\n\ndefineSupportCode(function (Cucumber) {\n  let score;\n\n  Cucumber.Given(/^the hitch-hiker selects some tiles$/, function () {});\n\n  Cucumber.When(/^they spell (\\d+) times (\\d+)$/, function (a, b) {\n    score = hiker.answer(parseInt(a), parseInt(b));\n  });\n\n  Cucumber.Then(/^the score is (\\d+)$/, function (expectedScore) {\n    assert.equal(score, expectedScore);\n  });\n});\n","instructions":"\nISBN - International Standard Book Number\n-----------------------------------------\nThere are two ISBN standards: ISBN-10 and ISBN-13.\nSupport for ISBN-13 is essential, whereas support\nfor ISBN-10 is optional.\nHere are some valid examples of each:\n\nISBN-10:    0471958697\n            0 471 60695 2\n            0-470-84525-2\n            0-321-14653-0\n\nISBN-13:    9780470059029\n            978 0 471 48648 0\n            978-0596809485\n            978-0-13-149505-0\n            978-0-262-13472-9\n\nISBN-10 is made up of 9 digits plus a check digit (which\nmay be 'X') and ISBN-13 is made up of 12 digits plus a\ncheck digit. Spaces and hyphens may be included in a code,\nbut are not significant. This means that 9780471486480 is\nequivalent to 978-0-471-48648-0 and 978 0 471 48648 0.\n\nThe check digit for ISBN-10 is calculated by multiplying\neach digit by its position (i.e., 1 x 1st digit, 2 x 2nd\ndigit, etc.), summing these products together and taking\nmodulo 11 of the result (with 'X' being used if the result\nis 10).\n\nThe check digit for ISBN-13 is calculated by multiplying\neach digit alternately by 1 or 3 (i.e., 1 x 1st digit,\n3 x 2nd digit, 1 x 3rd digit, 3 x 4th digit, etc.), summing\nthese products together, taking modulo 10 of the result\nand subtracting this value from 10, and then taking the\nmodulo 10 of the result again to produce a single digit.\n\n\nBasic task:\nCreate a function that takes a string and returns true\nif that is a valid ISBN-13 and false otherwise.\n\nAdvanced task:\nAlso return true if the string is a valid ISBN-10.","output":""}}