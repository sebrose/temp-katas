{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n    \n  private int getDelta(int a, int b){\n      return Math.abs(a - b);\n  }\n\n  public int distanceFrom(Coordinate other){\n    \n    int xDist = getDelta(x, other.x);\n    int yDist = getDelta(y, other.y);\n      \n    return (int) Math.hypot(xDist, yDist);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n    \n    private final String MATCH_PERSONA = \"Lucy|Oscar|Sean\";\n\n    @Given(\"^(\" + MATCH_PERSONA + \") is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String shouter, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(shouter, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(\" + MATCH_PERSONA + \") shouts$\")\n    public void seanShouts(String shouter) throws Throwable {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n    \n    private boolean hears(String listener, String shouter) {\n        return shouty.getShoutsHeardBy(listener).keySet().contains(shouter);\n    }\n    \n    @Then(\"^(\" + MATCH_PERSONA + \") should not hear (\" + MATCH_PERSONA + \")$\")\n    public void listener_should_not_hear_shouter(String listener, String shouter) throws Throwable {\n        Assert.assertFalse(hears(listener, shouter));\n    }\n    \n    @Then(\"^(\" + MATCH_PERSONA + \") should hear nothing$\")\n    public void listener_should_hear_nothing(String listener) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(listener).size());\n    }\n \n    @Then(\"^(\" + MATCH_PERSONA + \") should hear (\" + MATCH_PERSONA + \")$\")\n    public void listenerShouldHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertTrue(hears(listener, shouter));\n    }\n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !listener.equals(shouter))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 meters\n        \n      Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | nothing         |\n\n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 500\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Self listening\n        Given Sean is at 0, 0\n        When Sean shouts\n        Then Sean should not hear Sean","output":"JUnit version 4.12\n.........................\n4 Scenarios (4 passed)\n18 Steps (18 passed)\n0m0.176s\n\n..\nTime: 1.323\n\nOK (27 tests)\n\nDec 13, 2017 1:46:56 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4d1c00d0: startup date [Wed Dec 13 13:46:56 GMT 2017]; root of context hierarchy\nDec 13, 2017 1:46:56 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 13, 2017 1:46:57 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@4d1c00d0: startup date [Wed Dec 13 13:46:56 GMT 2017]; root of context hierarchy\n","ShoutyTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class ShoutyTest {\n  private final String ARBITRARY_MESSAGE = \"Hello, world\";\n  private final Shouty shouty = new Shouty();\n\n  private boolean hears (String listener, String shouter) {\n    return shouty.getShoutsHeardBy(listener).keySet().contains(shouter);\n  }\n  @Test\n  public void itReturnsAllListeners() {\n      shouty.setLocation(\"Sean\", new Coordinate(0, 0));\n      shouty.setLocation(\"Lucy\", new Coordinate(100, 0));\n      shouty.setLocation(\"Oscar\", new Coordinate(0, 500));\n      shouty.shout(\"Sean\", ARBITRARY_MESSAGE);\n      assertTrue(hears(\"Lucy\", \"Sean\"));\n      assertTrue(hears(\"Oscar\", \"Sean\"));\n  }\n    \n  @Test\n  public void itMustNOtReturnTheShouter() {\n      shouty.setLocation(\"Sean\", new Coordinate(0, 0));\n      shouty.shout(\"Sean\", ARBITRARY_MESSAGE);\n      assertFalse(hears(\"Sean\", \"Sean\"));\n  }\n}"}