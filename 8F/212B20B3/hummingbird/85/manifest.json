{"Coordinate.java":"public class Coordinate {\n  private String name;\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n    public Coordinate(String name, int xCoord, int yCoord){\n    this.name = name;\n    x = xCoord;\n    y = yCoord;\n  }\n    \n    public String getName() {\n        return this.name;\n    }\n\n    public int getX() {\n        return this.x;\n    }\n\n    public int getY() {\n        return this.y;\n    }\n    \n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n\n   // return 0;\n     // return Math.abs(x - other.x);\n      \n      return (int)Math.hypot(x - other.x, y - other.y);\n  }\n    \n\n    \n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private @Autowired ShoutyHelper shoutyHelper;\n    \n    /*@Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List <Coordinate> coordinate) throws Throwable {\n   \n    for(Coordinate element : coordinate) {\n        shouty.setLocation(element.getName(), new Coordinate(element.getX(), element.getY()));\n    }\n\n        \n        \n}\n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String person, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }*/\n\n    @When(\"^(Sean|Oscar) shouts$\")\n    public void seanShouts(String person) throws Throwable {\n        shoutyHelper.shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear (Sean|Oscar|him)$\")\n    public void lucyShouldHearHim(String person) throws Throwable {\n        Assert.assertEquals(1, shoutyHelper.shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shoutyHelper.shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n\n    @Then(\"^Lucy should not hear Oscar$\")\n    public void lucyShouldNotHearOscar() throws Throwable {\n       Assert.assertFalse(shoutyHelper.shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Oscar\"));\n    }\n       \n    @Then(\"^Sean should not hear Sean$\")\n    public void seanShouldNotHearSean() throws Throwable {\n       Assert.assertFalse(shoutyHelper.shouty.getShoutsHeardBy(\"Sean\").containsKey(\"Sean\"));\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int arg1) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n        Assert.assertEquals(arg1, shoutyHelper.shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n}\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private static final Coordinate DEFAULT_LISTENER_COORDINATE = new Coordinate(-1, -1);\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if(!locations.containsKey(shouter)) {\n          locations.put(shouter, DEFAULT_LISTENER_COORDINATE);\n      }\n      \n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !shouter.equals(listener))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: Multiple shouters\n\n        Given people are located at\n        | name   | x    | y      |\n        | Lucy   | 0    | 0      |\n        | Sean   | 0    | 500    |\n        | Oscar  | 1100 | 0      |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n    Scenario: Shouters should not hear their own shouts\n        \n        When Sean shouts\n        Then Sean should not hear Sean\n        \n        \n    Scenario Outline: only hear in-range shouts\n    \n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n        \n        |Seans-location|what-Lucy-hears|\n        |0, 900        |Sean           |\n        |800, 800      |nothing        |\n        \n        \n    Scenario: Multiple shouts from one person\n    \n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n        \n        \n        \n        ","output":"JUnit version 4.12\n.....EEIIII..EEI..EEIII..EEIII..EEIIII\nFailed scenarios:\nhear_shout.feature:5 # Scenario: Multiple shouters\nhear_shout.feature:17 # Scenario: Shouters should not hear their own shouts\nhear_shout.feature:33 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:34 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:37 # Scenario: Multiple shouts from one person\n\n5 Scenarios (5 failed)\n20 Steps (5 failed, 15 skipped)\n0m0.236s\n\njava.lang.NullPointerException\n\tat LocationSteps.peopleAreLocatedAt(LocationSteps.java:17)\n\tat âœ½.Given people are located at(hear_shout.feature:7)\n\ncucumber.runtime.CucumberException: Error creating bean with name 'ShoutSteps': Unsatisfied dependency expressed through field 'shoutyHelper': No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n\tat cucumber.runtime.java.spring.SpringFactory.getInstance(SpringFactory.java:182)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:299)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\nCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ShoutSteps': Unsatisfied dependency expressed through field 'shoutyHelper': No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:569)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:349)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:345)\n\tat cucumber.runtime.java.spring.GlueCodeScope.get(GlueCodeScope.java:15)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:340)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:220)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:353)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334)\n\tat cucumber.runtime.java.spring.SpringFactory.getInstance(SpringFactory.java:180)\n\t... 37 more\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1406)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1057)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1019)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:566)\n\t... 49 more\n\njava.lang.NullPointerException\n\tat LocationSteps.lucyIsAt(LocationSteps.java:23)\n\tat âœ½.Given Lucy is at 0, 0(hear_shout.feature:25)\n\njava.lang.NullPointerException\n\tat LocationSteps.lucyIsAt(LocationSteps.java:23)\n\tat âœ½.Given Lucy is at 0, 0(hear_shout.feature:25)\n\njava.lang.NullPointerException\n\tat LocationSteps.lucyIsAt(LocationSteps.java:23)\n\tat âœ½.Given Lucy is at 0, 0(hear_shout.feature:39)\n\n\nTime: 1.594\nThere were 10 failures:\n1) Given people are located at(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat LocationSteps.peopleAreLocatedAt(LocationSteps.java:17)\n\tat âœ½.Given people are located at(hear_shout.feature:7)\n2) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat LocationSteps.peopleAreLocatedAt(LocationSteps.java:17)\n\tat âœ½.Given people are located at(hear_shout.feature:7)\n3) When Sean shouts(Scenario: Shouters should not hear their own shouts)\ncucumber.runtime.CucumberException: Error creating bean with name 'ShoutSteps': Unsatisfied dependency expressed through field 'shoutyHelper': No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [ShoutyHelper] found for dependency [ShoutyHelper]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n\tat cucumber.runtime.java.spring.SpringFactory.getInstance(SpringFactory.java:182)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:299)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java\noutput truncated by cyber-dojoDec 13, 2017 3:28:43 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Wed Dec 13 15:28:43 GMT 2017]; root of context hierarchy\nDec 13, 2017 3:28:43 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.*;\n\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";    \n    private ShoutyHelper shoutyHelper;\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List <Coordinate> coordinate) throws Throwable {\n   \n        for(Coordinate element : coordinate) {\n            shoutyHelper.shouty.setLocation(element.getName(), new Coordinate(element.getX(), element.getY()));\n        }\n    }\n    \n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String person, int xCoord, int yCoord) throws Throwable {\n        shoutyHelper.shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n\n  /*  @When(\"^(Sean|Oscar) shouts$\")\n    public void seanShouts(String person) throws Throwable {\n        shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear (Sean|Oscar|him)$\")\n    public void lucyShouldHearHim(String person) throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n\n    @Then(\"^Lucy should not hear Oscar$\")\n    public void lucyShouldNotHearOscar() throws Throwable {\n       Assert.assertFalse(shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Oscar\"));\n    }\n       \n    @Then(\"^Sean should not hear Sean$\")\n    public void seanShouldNotHearSean() throws Throwable {\n       Assert.assertFalse(shouty.getShoutsHeardBy(\"Sean\").containsKey(\"Sean\"));\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int arg1) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n        Assert.assertEquals(arg1, shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n}*/\n}\n\n","ShoutyHelper.java":"import java.util.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.context.annotation.*;\n\n@Component\n//@Scope(\"cucumber-glue\")\npublic class ShoutyHelper {\n    \n    public final Shouty shouty = new Shouty(); \n    \n}\n\n"}