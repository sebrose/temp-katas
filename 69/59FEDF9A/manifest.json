{"id":"6959FEDF9A","created":[2018,1,22,13,14,55],"runner_choice":"stateless","image_name":"cyberdojofoundation/java_cucumber_pico","display_name":"Java, Cucumber","filename_extension":".java","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Java-Cucumber","tab_size":4,"visible_files":{"README":"This Cucumber environment is bundled with:\n- PicoContainer DI framework\n- JMock2\n- Mockito\n","Hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","HikerStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\n\npublic class HikerStepDef {\n\n    private int answer;\n\n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"","instructions":"Write a program to generate all potential \nanagrams of an input string.\n\nFor example, the potential anagrams of \"biro\" are\n\nbiro bior brio broi boir bori\nibro ibor irbo irob iobr iorb\nrbio rboi ribo riob roib robi\nobir obri oibr oirb orbi orib\n"},"exercise":"Anagrams"}