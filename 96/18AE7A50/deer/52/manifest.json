{"Coordinate.java":"public class Coordinate {\n  private final int x;\n  private final int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      int a = x - other.x;\n      int b = y - other.y;\n      return (int)Math.sqrt(a * a + b * b);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.+) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(.+) shouts$\")\n    public void shouterShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(.+) should hear (.+)$\")\n    public void listenerShouldHearShouter(String name, String shouterName) throws Throwable {\n        Map<String, List<String> > shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsByShouter = shouts.get(shouterName);\n        assertNotNull(String.format(\"%s couldn't hear %s, instead heard these shouters: %s\", name, shouterName, shouts.entrySet()), \n                                           shoutsByShouter);\n        assertEquals(String.format(\"%s couldn't hear %s, instead heard these shouters: %s\", name, shouterName, shouts.entrySet()),\n                            1, shoutsByShouter.size());\n    }\n\n    @Then(\"^(.+) should not hear (.+)$\")\n    public void lucy_should_hear_nothing(String name, String shouterName) throws Throwable {\n        Map<String, List<String> > shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsByShouter = shouts.get(shouterName);\n        assertNull(String.format(\"%s could hear %s, heard these shouters: %s\", name, shouterName, shouts.entrySet()),\n                          shoutsByShouter);\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(shouter.equals(listener)) continue;\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should not hear Sean\n\n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts \n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n        \n      Scenario: Shouter should not hear their own shout\n        Given Sean is at 100, 0\n        And Lucy is at 0, 0\n        When Lucy shouts\n        Then Sean should not hear Lucy","output":"JUnit version 4.12\n.........................EE\nFailed scenarios:\nhear_shout.feature:27 # Scenario: Shouter should not hear their own shout\n\n4 Scenarios (1 failed, 3 passed)\n19 Steps (1 failed, 18 passed)\n0m0.148s\n\njava.lang.AssertionError: Sean could hear Lucy, heard these shouters: [Lucy=[Hello, world]] expected null, but was:<[Hello, world]>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:35)\n\tat ✽.Then Sean should not hear Lucy(hear_shout.feature:31)\n\n\nTime: 1.105\nThere were 2 failures:\n1) Then Sean should not hear Lucy(Scenario: Shouter should not hear their own shout)\njava.lang.AssertionError: Sean could hear Lucy, heard these shouters: [Lucy=[Hello, world]] expected null, but was:<[Hello, world]>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:35)\n\tat ✽.Then Sean should not hear Lucy(hear_shout.feature:31)\n2) Scenario: Shouter should not hear their own shout\njava.lang.AssertionError: Sean could hear Lucy, heard these shouters: [Lucy=[Hello, world]] expected null, but was:<[Hello, world]>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:35)\n\tat ✽.Then Sean should not hear Lucy(hear_shout.feature:31)\n\nFAILURES!!!\nTests run: 25,  Failures: 2\n\nFeb 23, 2018 1:41:24 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@15de0b3c: startup date [Fri Feb 23 13:41:24 GMT 2018]; root of context hierarchy\nFeb 23, 2018 1:41:24 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n"}