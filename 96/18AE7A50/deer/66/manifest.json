{"output":"ShoutSteps.java:23: error: incompatible types: String cannot be converted to int\n           shouty.setLocation(values.get(0), new Coordinate(values.get(1), values.get(2)));\n                                                                      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n","Coordinate.java":"public class Coordinate {\n  private final int x;\n  private final int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      int a = x - other.x;\n      int b = y - other.y;\n      return (int)Math.sqrt(a * a + b * b);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"^people are located at$\")\n    public void peopleAt(List<List<String>> dataTable) throws Throwable {\n          // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // List<YourType>, List<List<E>>, List<Map<K,V>> or Map<K,V>.\n    // E,K,V must be a scalar (String, Integer, Date, enum etc)\n        for(List<String> values : dataTable) {\n           shouty.setLocation(values.get(0), new Coordinate(values.get(1), values.get(2)));\n        }\n    }\n\n    \n    @When(\"^(.+) shouts$\")\n    public void shouterShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(.+) should hear (.+)$\")\n    public void listenerShouldHearShouter(String name, String shouterName) throws Throwable {\n        Map<String, List<String> > shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsByShouter = shouts.get(shouterName);\n        assertNotNull(String.format(\"%s couldn't hear %s, instead heard these shouters: %s\", name, shouterName, shouts.entrySet()), \n                                           shoutsByShouter);\n        assertEquals(String.format(\"%s couldn't hear %s, instead heard these shouters: %s\", name, shouterName, shouts.entrySet()),\n                            1, shoutsByShouter.size());\n    }\n\n    @Then(\"^(.+) should not hear (.+)$\")\n    public void lucy_should_hear_nothing(String name, String shouterName) throws Throwable {\n        Map<String, List<String> > shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsByShouter = shouts.get(shouterName);\n        assertNull(String.format(\"%s could hear %s, %s heard these shouters: %s\", name, shouterName, name, shouts.entrySet()),\n                          shoutsByShouter);\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(shouter.equals(listener)) continue;\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at <Sean-location>\n        When Sean shouts\n        Then Lucy should <Lucy-hears>\n        Examples: use-cases\n        | Sean-location | Lucy-hears       |\n        | 0, 900        | hear Sean        |\n        | 800, 800      | not hear Sean    |\n        \n        \n      \n      #Scenario: Out of range shout is not heard\n      #  Given Lucy is at 0, 0\n      #  And Sean is at 800, 800\n      #  When Sean shouts\n      #  Then Lucy should not hear Sean\n\n      \n\n      Scenario: Multiple shouters\n        Given people are located at\n        | name | x     | y    |\n        | Lucy | 0     | 0    |\n        | Sean | 0     | 500  |\n        | Oscar| 1100  | 0    |\n        When Sean shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n      \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts \n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n        \n      Scenario: Shouter should not hear their own shout\n        Given Sean is at 100, 0\n        When Sean shouts\n        Then Sean should not hear Sean"}