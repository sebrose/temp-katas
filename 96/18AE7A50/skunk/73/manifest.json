{"output":"JUnit version 4.12\n......................................EE\nFailed scenarios:\nhear_shout.feature:34 # Scenario: Multiple shouts from one person\n\n7 Scenarios (1 failed, 6 passed)\n29 Steps (1 failed, 28 passed)\n0m0.161s\n\njava.lang.AssertionError: Shouts should be equal to number sent\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:47)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n\n\nTime: 1.128\nThere were 2 failures:\n1) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.AssertionError: Shouts should be equal to number sent\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:47)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n2) Scenario: Multiple shouts from one person\njava.lang.AssertionError: Shouts should be equal to number sent\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:47)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n\nFAILURES!!!\nTests run: 38,  Failures: 2\n\nFeb 23, 2018 3:29:57 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1ce24091: startup date [Fri Feb 23 15:29:57 GMT 2018]; root of context hierarchy\nFeb 23, 2018 3:29:57 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nFeb 23, 2018 3:29:58 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@1ce24091: startup date [Fri Feb 23 15:29:57 GMT 2018]; root of context hierarchy\n","Coordinate.java":"\npublic class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      int absx = x - other.x;\n      int absy = y - other.y;\n      double distance = Math.sqrt((absx * absx) + (absy * absy));\n      return (int) distance;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.List;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(\\\\w+) is at ([-]*\\\\d+), ([-]*\\\\d+)$\")\n    public void userAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAt(List <Personlocation> personLocations) throws Throwable {\n        for (Personlocation location : personLocations) {\n        shouty.setLocation(location.name, new Coordinate(location.x, location.y));\n        }\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearHim(String listener, String shouter) throws Throwable {\n        Assert.assertTrue(\n            String.format(\"%s should have heard %s\", listener, shouter),\n            shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerShouldNotHearHim(String listener, String shouter) throws Throwable {\n        Assert.assertFalse(\n             String.format(\"%s should not have heard %s\", listener, shouter),\n            shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void lucyShouldHearShoutsFromSean(String listener, int numberOfShouts, String shouter) throws Throwable {\n        // Write code here that turns the phrase above into concrete actions\n        Map<String, List<String> > shoutsHeard = shouty.getShoutsHeardBy(listener);\n        Assert.assertTrue(\"Shouts should be equal to number sent\",\n                          (shoutsHeard.size() == numberOfShouts));\n    }\n\n}\n\nclass Personlocation {\n String name;\n int x;\n int y;\n }","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (listener.equals(shouter))  continue;\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: Only hear In range shout\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should <what-lucy-hears>\n        \n        Examples: some simple examples\n        | Seans-location | what-lucy-hears |\n        | 0, 900         | hear Sean            |\n        | 800, 900       | not hear Sean        |\n        | 0, -900        | hear Sean            |\n        | -800, -900     | not hear Sean        |\n        \n     Scenario: Multiple shouters\n        Given people are located at\n            | name | x    | y   |\n            | Lucy | 0    | 0   |\n            | Sean | 0    | 500   |\n            | Oscar | 1100    | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        And Lucy should hear Sean\n        \n     Scenario: Listening own shout not possible\n        Given Noelle is at 798439849384, 98493894389439\n        When Noelle shouts\n        Then Noelle should not hear Noelle\n        \n     Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n"}