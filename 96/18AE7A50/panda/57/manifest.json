{"Coordinate.java":"public class Coordinate {\n  private final int x;\n  private final int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int dx = x - other.x;\n    int dy = y - other.y;\n    return (int) Math.sqrt(dx*dx + dy*dy);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import java.util.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    public static class PersonLocation {\n        public String name;\n        public int x;\n        public int y;\n    }\n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String personName, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(personName, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"^people are located at:$\")\n    public void peopleAreLocateAt(List<PersonLocation> whereabouts) throws Throwable {\n        for(PersonLocation personLocation : whereabouts) {\n            personIsAt(personLocation.name, personLocation.x, personLocation.y);\n        }\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String personName) throws Throwable {\n        shouty.shout(personName, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearShouter(String listenerName, String shouterName) throws Throwable {\n        Set<String> shouterNames = shouty.getShoutsHeardBy(listenerName).keySet();\n        Assert.assertTrue(shouterNames.contains(shouterName));\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void lucyShouldHearShoutsFromSean(\n        String listenerName,\n        int count,\n        String shouterName,\n    ) throws Throwable {\n        \n        int heardShoutsFromShoute = shouty\n            .getShoutsHeardBy(listenerName)\n            .get(shouterName)\n            .size();\n        Assert.assertEquals(count, heardShoutsFromShouter);\n    }\n\n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerShouldNotHearShouter(String listenerName, String shouterName) throws Throwable {\n        Set<String> shouterNames = shouty.getShoutsHeardBy(listenerName).keySet();\n        Assert.assertFalse(\n            String.format(\"Did not expect %s to hear %s, but heard these people: %s\", listenerName, shouterName, shouterNames), \n            shouterNames.contains(shouterName));\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !shouter.equals(listener))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario Outline: Only in range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at <seans-loc>\n    When Sean shouts\n    Then Lucy should <what-lucy-hears>\n    \n    Examples: In range\n      | seans-loc | what-lucy-hears |\n      | 0, 900    | hear Sean       |\n      | 0, 800    | hear Sean       |\n      | 900, 10   | hear Sean       |\n      | 500, 800  | hear Sean   |\n\n    Examples: Out of range\n      | seans-loc | what-lucy-hears |\n      | 800, 800  | not hear Sean   |\n      | 800, 700  | not hear Sean   |\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should not hear Sean\n\n  Scenario: Multiple shouts from one perosn\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n\n  Scenario: Multiple shouters\n    Given people are located at:\n      | name  |    x |   y |\n      | Lucy  |    0 |   0 |\n      | Sean  |    0 | 500 |\n      | Oscar | 1100 |   0 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  Scenario: Lucy doesn't hear herself\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n","output":"ShoutSteps.java:45: error: illegal start of type\n    ) throws Throwable {\n    ^\nShoutSteps.java:45: error: ')' expected\n    ) throws Throwable {\n     ^\nShoutSteps.java:45: error: ';' expected\n    ) throws Throwable {\n            ^\n3 errors\n"}