{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){     \n    return calcHypotenuse(x - other.x, y - other.y);\n  }\n    \n  private int calcHypotenuse(int a, int b) {\n      return (int) Math.sqrt(a * a + b * b);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void userIsAt(String user, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(user, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void userShouts(String user) throws Throwable {\n        shouty.shout(user, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear him$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n    \n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void lucyShouldNotHearOscar(String listener, String sender) throws Throwable {\n        boolean hasShouts = false;\n        Map<String, List<String>> shouts = shouty.getShoutsHeardBy(listener);\n        \n        for (Map.Entry<String, List<String>> entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          if (shouter.equals(sender))\n              hasShouts = true;\n        }\n        Assert.assertEquals(false, hasShouts);\n    }\n}\n\n    /*@Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearSean() throws Throwable {\n        // Write code here that turns the phrase above into concrete actions\n        throw new PendingException();\n}*/\n\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }  \n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear him\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n\n\n    Scenario: Multiple Shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 500\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Sean\n        ","output":"JUnit version 4.12\n...................EE\nFailed scenarios:\nhear_shout.feature:18 # Scenario: Multiple Shouters\n\n3 Scenarios (1 failed, 2 passed)\n14 Steps (1 failed, 13 passed)\n0m0.152s\n\njava.lang.AssertionError: expected:<false> but was:<true>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:44)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:24)\n\n\nTime: 1.064\nThere were 2 failures:\n1) Then Lucy should not hear Sean(Scenario: Multiple Shouters)\njava.lang.AssertionError: expected:<false> but was:<true>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:44)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:24)\n2) Scenario: Multiple Shouters\njava.lang.AssertionError: expected:<false> but was:<true>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:44)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:24)\n\nFAILURES!!!\nTests run: 19,  Failures: 2\n\nFeb 23, 2018 11:33:12 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4116aac9: startup date [Fri Feb 23 11:33:12 GMT 2018]; root of context hierarchy\nFeb 23, 2018 11:33:12 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n"}