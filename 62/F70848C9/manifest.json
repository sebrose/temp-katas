{"id":"62F70848C9","created":[2018,6,26,17,29,8],"runner_choice":"stateless","image_name":"cyberdojofoundation/java_cucumber_pico","display_name":"Java, Cucumber","filename_extension":".java","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Java-Cucumber","tab_size":4,"visible_files":{"README":"This Cucumber environment is bundled with:\n- PicoContainer DI framework\n- JMock2\n- Mockito\n","Hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","HikerStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\n\npublic class HikerStepDef {\n\n    private int answer;\n\n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"","instructions":"Think of binary numbers: sequences of 0's and 1's.\nHow many n-digit binary numbers are there that\ndon't have two adjacent 1 bits?\n\nFor example, for three-digit numbers, Five of the\npossible eight combinations meet the criteria:\n\n   000, 001, 010, 011, 100, 101, 110, 111.\n\nWhat is the number for sequences of length 4, 5, 10, n?\n\nHaving worked out the pattern, there's a second part to\nthe question: can you prove why that relationship exists?\n\n(Source http://codekata.pragprog.com,\n Code Kata Fifteen -- A Diversion)\n\n"},"exercise":"Diversion"}