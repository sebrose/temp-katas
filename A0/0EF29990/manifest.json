{"id":"A00EF29990","created":[2017,10,11,11,38,22],"runner_choice":"stateful","image_name":"cyberdojofoundation/java_cucumber_pico","display_name":"Java, Cucumber","filename_extension":".java","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Java-Cucumber","tab_size":4,"visible_files":{"README":"This Cucumber environment is bundled with:\n- PicoContainer DI framework\n- JMock2\n- Mockito\n","Hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","HikerStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\n\npublic class HikerStepDef {\n\n    private int answer;\n\n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"","instructions":"Given a number, we can form a number chain by\n\n1) arranging its digits in descending order\n2) arranging its digits in ascending order\n3) subtracting the number obtained in (2) from the number\n   obtained (1) to form a new number\n4) and repeat these steps unless the new number has already\n   appeared in the chain\n   \nNote that 0 is a permitted digit. The number of distinct\nnumbers in the chain is the length of the chain. You are to\nwrite a program that reads numbers and outputs the number\nchain and the length of that chain for each number read.\n\nInput and Output\n----------------\nThe input consists of a positive number, less than 10^9.\nThe output consists of the number chain generated by the\ninput number, followed by its lengths exactly in the format\nindicated below.\n\nExample-1\n---------\nInput\n123456789\n\nOutput\nOriginal number was 123456789\n987654321 - 123456789 = 864197532\n987654321 - 123456789 = 864197532\nChain length 2\n\nExample-2\n---------\nInput\n1234\n\nOutput\nOriginal number was 1234\n4321 - 1234 = 3087\n8730 - 378 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\nChain length 4\n\nExample-3\n---------\nInput\n444\n\nOutput\nOriginal number was 444\n444 - 444 = 0\n0 - 0 = 0\nChain length 2\n\n\n[Source: http://uva.onlinejudge.org/]"},"exercise":"Number_Chains"}