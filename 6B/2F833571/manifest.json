{"id":"6B2F833571","created":[2018,7,6,10,10,0],"runner_choice":"stateless","image_name":"cyberdojofoundation/java_cucumber_spring","display_name":"Java, Cucumber-Spring","filename_extension":".java","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"Java-Cucumber-Spring","tab_size":4,"visible_files":{"README":"This Cucumber environment is bundled with:\n- Enough Spring to support DI in cucumber.xml\n  - you must explicitly declare beans in XML\n  - Do not use @Component, @Service or @Scope annotations\n- JMock2\n- Mockito\n","Hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","HikerStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport cucumber.api.java.en.*;\n\npublic class HikerStepDef {\n\n    @Autowired\n    private Hiker hiker;\n\n    private int answer;\n\n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Hiker\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","cyber-dojo.sh":"\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"","instructions":"Given a Roman number as a string (eg \"XX\") determine\nits integer value (eg 20).\n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\n\n   \"I\" -> 1 |    \"X\" -> 10 |    \"C\" -> 100 |    \"M\" -> 1000 \n  \"II\" -> 2 |   \"XX\" -> 20 |   \"CC\" -> 200 |   \"MM\" -> 2000 \n \"III\" -> 3 |  \"XXX\" -> 30 |  \"CCC\" -> 300 |  \"MMM\" -> 3000 \n  \"IV\" -> 4 |   \"XL\" -> 40 |   \"CD\" -> 400 | \"MMMM\" -> 4000 \n   \"V\" -> 5 |    \"L\" -> 50 |    \"D\" -> 500 | \n  \"VI\" -> 6 |   \"LX\" -> 60 |   \"DC\" -> 600 | \n \"VII\" -> 7 |  \"LXX\" -> 70 |  \"DCC\" -> 700 | \n\"VIII\" -> 8 | \"LXXX\" -> 80 | \"DCCC\" -> 800 | \n  \"IX\" -> 9 |   \"XC\" -> 90 |   \"CM\" -> 900 | \n\n \"MCMXC\" -> 1990 (\"M\" -> 1000 + \"CM\" -> 900 + \"XC\" -> 90)\n\"MMVIII\" -> 2008 (\"MM\" -> 2000 + \"VIII\" -> 8)\n  \"XCIX\" -> 99   (\"XC\" -> 90 + \"IX\" -> 9)\n \"XLVII\" -> 47   (\"XL\" -> 40 + \"VII\" -> 7)\n\n"},"exercise":"Reverse_Roman"}