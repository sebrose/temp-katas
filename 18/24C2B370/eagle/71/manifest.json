{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int a = Math.abs(x - other.x);\n    int b = Math.abs(y - other.y);\n      \n    return (int) Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)); \n\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n    \npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String shouter) throws Throwable {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerShouldNotHearShouter(String listener, String shouter) throws Throwable {\n        Map<String, List<String>> heardMap = shouty.getShoutsHeardBy(listener);\n        Assert.assertFalse(heardMap.containsKey(shouter));\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearShouter(String listener, String shouter) throws Throwable {\n        Map<String, List<String>> heardMap = shouty.getShoutsHeardBy(listener);\n        Assert.assertTrue(heardMap.containsKey(shouter));\n    }\n    \n\n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listenerShouldHearXShoutsFromShouter(String listener, int numShouts, String shouter) throws Throwable {\n        Map<String, List<String>> heardMap = shouty.getShoutsHeardBy(listener);\n        \n        Assert.assertEquals(numShouts, heardMap.get(shouter).size());\n\n    }\n    \n\n\n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n      \n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (shouter.equals(listener)) {\n              continue;\n          }\n          List<String> personsShouts = entry.getValue();\n\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n//    Scenario: In range shout is heard\n//        Given Lucy is at 0, 0\n//        And Sean is at 0, 900\n//        When Sean shouts\n//        Then Lucy should hear Sean\n//      Scenario: Out of range shout is not heard\n//        Given Lucy is at 0, 0\n//        And Sean is at 800, 800\n//        When Sean shouts\n//        Then Lucy should not hear Sean\n        \n      Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 900, 0         | Sean            |\n\n\n      Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should not hear Sean\n        Examples: some simple examples\n          | Seans-location | \n          | 800, 800       | \n          | 1000, 1000     |\n\n      Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n      Scenario: Multiple shouters\n        Given people are located at\n            | name  | x     | y    |\n            | Lucy  | 0     | 0    |\n            | Sean  | 500   | 0    |\n            | Oscar | 0     | 1100 |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n","output":"JUnit version 4.12\n........EE.....EE.....EE.....EE......EE.....EEI....\nFailed scenarios:\nhear_shout.feature:23 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:24 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:34 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:35 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:37 # Scenario: Multiple shouts from one person\nhear_shout.feature:44 # Scenario: Multiple shouters\n\n7 Scenarios (6 failed, 1 passed)\n29 Steps (6 failed, 1 skipped, 22 passed)\n0m0.323s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearXShoutsFromShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:42)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:52)\n\n\nTime: 1.489\nThere were 12 failures:\n1) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n2) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n3) Then Lucy should hear Sean(| 900, 0 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n4) | 900, 0 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:20)\n5) Then Lucy should not hear Sean(| 800, 800 |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n6) | 800, 800 |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n7) Then Lucy should not hear Sean(| 1000, 1000 |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n8) | 1000, 1000 |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:31)\n9) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearXShoutsFromShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:42)\n10) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldHearXShoutsFromShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:42)\n11) Then Lucy should not hear Oscar(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:52)\n12) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:52)\n\nFAILURES!!!\nTests run: 38,  Failures: 12\n\nNov 28, 2017 1:20:10 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@5dda768f: startup date [Tue Nov 28 01:20:10 GMT 2017]; root of context hierarchy\nNov 28, 2017 1:20:10 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nNov 28, 2017 1:20:11 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@5dda768f: startup date [Tue Nov 28 01:20:10 GMT 2017]; root of context hierarchy\n","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n    \n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void shouterIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<ShouterLoc> locList) throws Throwable {\n        locList.stream()\n            .forEach(sl -> shouty.setLocation(sl.name, new Coordinate(sl.x, sl.y)));\n    }\n}\n\n\nclass ShouterLoc {\n    String name;\n    int x;\n    int y;\n}"}