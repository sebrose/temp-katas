{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      //Get absolute x-axis distance \n      int xDistance= Math.abs(x - other.x);\n      //Get absolute y-axis distance\n      int yDistance=Math.abs(y - other.y);\n      //Get hypotenuse distance\n      double hypotenuseDistance = (Math.sqrt(xDistance*xDistance + yDistance*yDistance));\n      //Get absolute distance\n      int finalDistance = (int) Math.abs(hypotenuseDistance);\n\n   return finalDistance;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.lang.*;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n   \n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void userIsAt(String user, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(user, new Coordinate(xCoord, yCoord));\n    }\n    \n    @When(\"^(\\\\w+) shouts$\")\n    public void userShouts(String shouter) throws Throwable {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n \n     @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listener_should_not_hear_shouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(listener,shouter).size());\n    }\n    \n      @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listener_should_hear_shouter(String listener, String shouter) throws Throwable {\n        if(shouter.equals(\"nothing\")){\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(listener,shouter).size());\n        }\n        else{\n           Assert.assertEquals(1, shouty.getShoutsHeardBy(listener,shouter).size()); \n        }\n    }\n    \n     @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<UserInfo> userInfo) throws Throwable {\n        List<UserInfo> userDetails = new ArrayList<UserInfo>();\n\n        for (UserInfo user : userInfo) {\n            String name = user.getName();\n            int x = user.getX();\n            int y = user.getY();\n            shouty.setLocation(name, new Coordinate(x, y));\n        }\n    }\n    \n        @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listenerShouldHearShoutsFromSean(String listener, int count, String shouter) throws Throwable {\n        int shoutNumber = shouty.getShoutsHeardBy(listener,shouter).size();\n        System.out.println(\" count = \" + count);\n        System.out.println(\" shout number  = \" + shoutNumber);\n        Assert.assertEquals(count, shoutNumber);        \n}\n    \n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener, String getShouter) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n         \n          String shouter = entry.getKey();       \n          if((shouter.equals(getShouter))&&(!(shouter.equals(listener)))){\n             \n             List<String> personsShouts = entry.getValue();\n               System.out.println(\" Get Key \"+shouter+\" Get Value \"+personsShouts);\n                int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n             System.out.println(\" Shouter \"+shouter+\" Distance \"+distance);\n             if (distance < MESSAGE_RANGE)\n                shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n          return shoutsHeard;\n  }\n    \n    \n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n      Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should not hear Sean\n        \n       Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500   \n        And Oscar is at 1100, 0     \n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        Then Lucy should hear Sean\n        \n       Scenario: Shouter should not hear himself\n        Given Lucy is at 0, 0  \n        When Lucy shouts\n        Then Lucy should not hear Lucy \n\n       Scenario: Shouter should not hear himself\n         Given people are located at  \n          |name    |x      |y      |\n          |Lucy    |0      |0      |\n          |Sean    |500    |0      |\n          |Oscar   |0      |1100   |\n         When Sean shouts\n         Then Lucy should hear Sean\n         Then Lucy should not hear Lucy\n         Then Lucy should not hear Oscar\n         \n        Scenario Outline: only hear in-range shouts\n         Given Lucy is at 0, 0\n         And Sean is at <Seans-location>\n         When Sean shouts\n         Then Lucy should hear <what-Lucy-hears>\n         \n         Examples: some simple examples\n         |Seans-location    | what-Lucy-hears   |\n         |0, 900            |   Sean            |\n         |800, 800          |   nothing         |\n         \n       Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500   \n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean \n         ","output":"JUnit version 4.12\n....... Get Key Sean Get Value [Hello, world]\n Shouter Sean Distance 900\n..... Get Key Sean Get Value [Hello, world]\n Shouter Sean Distance 1131\n....... Get Key Oscar Get Value [Hello, world]\n Shouter Oscar Distance 1100\n. Get Key Sean Get Value [Hello, world]\n Shouter Sean Distance 500\n........ Get Key Sean Get Value [Hello, world]\n Shouter Sean Distance 500\n....... Get Key Sean Get Value [Hello, world]\n Shouter Sean Distance 900\n........... Get Key Sean Get Value [Hello, world, Hello, world]\n Shouter Sean Distance 500\n count = 2\n shout number  = 1\n.EE\nFailed scenarios:\nhear_shout.feature:53 # Scenario: Multiple shouts from one person\n\n8 Scenarios (1 failed, 7 passed)\n36 Steps (1 failed, 35 passed)\n0m0.183s\n\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.listenerShouldHearShoutsFromSean(ShoutSteps.java:55)\n\tat âœ½.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:58)\n\n\nTime: 1.291\nThere were 2 failures:\n1) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.listenerShouldHearShoutsFromSean(ShoutSteps.java:55)\n\tat âœ½.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:58)\n2) Scenario: Multiple shouts from one person\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.listenerShouldHearShoutsFromSean(ShoutSteps.java:55)\n\tat âœ½.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:58)\n\nFAILURES!!!\nTests run: 47,  Failures: 2\n\nNov 28, 2017 3:49:22 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2a5c8d3f: startup date [Tue Nov 28 03:49:22 GMT 2017]; root of context hierarchy\nNov 28, 2017 3:49:22 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","UserInfo.java":"public class UserInfo {\n    private String name;\n    private int x;\n    private int y;\n\n    public UserInfo(String name, int x, int y) {\n        this.name = name;\n        this.x = x;\n        this.y = y;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Integer getX() {\n        return x;\n    }\n\n    public Integer getY() {\n        return y;\n    }\n}"}