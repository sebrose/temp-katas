{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){    \n    int distance = (int)Math.sqrt(Math.pow(Math.abs(other.x-x),2) + Math.pow(Math.abs(other.y-y),2));\n      //System.out.println(\"Distance between X:\" + this.toString() + \"Y:\" + other + \" is : \" + distance);\n    return distance;\n  }\n    public String toString() {\n        return \"(\" + x + \",\" + y + \")\";\n    }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport cucumber.api.DataTable;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void user_is_at(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }    \n    \n    @When(\"^people are located at$\")\n    public void user_is_at(List<User> asList) throws Throwable {\n        for(User user:asList) {\n            shouty.setLocation(user.getName(), new Coordinate(user.getX(), user.getY()));\n        }\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouter_shouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }    \n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listener_should_hear_shouter(String name, String expectedShouter) throws Throwable {\n        if ( expectedShouter != null && expectedShouter.equals(\"nothing\")) {\n            Assert.assertEquals(0, shouty.getShoutsHeardBy(name).size());\n        } else {\n            Assert.assertTrue(shouty.amIhearing(name, expectedShouter));\n        }\n    } \n    \n     @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listener_should_hear_shouter(String name, int noOfShouts, String expectedShouter) throws Throwable {\n        List<Message> messages = shouty.getShoutsHeardBy(name).get(expectedShouter);\n        if(messages != null)\n        Assert.assertEquals(noOfShouts, messages.size());\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listener_should_not_hear_shouter(String name, String expectedShouter) throws Throwable {\n        Assert.assertFalse(shouty.amIhearing(name, expectedShouter));\n    }\n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<Message> > shouts = new HashMap<String, List<Message> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      this.shout(shouter, shout, false);\n  }\n    \n  public void shout(String shouter, String shout, boolean isPremium) {\n      if (!shouts.containsKey(shouter)) {\n          List<Message> personsShouts = new ArrayList<Message>();\n          shouts.put(shouter, personsShouts);\n      }\n        Message message = new Message(shout, isPremium);\n      System.out.println(\"++++:\"+message.getRange());\n      shouts.get(shouter).add(message);\n  }\n    \n  private Map<String, List<Message> > getDistance(String listener) {\n      HashMap<String, List<Message> > shoutsHeard = new HashMap<String, List<Message> >();\n\n      for (Map.Entry<String, List<Message> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<Message> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          for(Message message: personsShouts) {\n              System.out.println(message.getRange());\n          if (distance < message.getRange())\n              shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n      return shoutsHeard;\n  }\n\n  public Map<String, List<Message> > getShoutsHeardBy(String listener) {      \n      return this.getDistance(listener);\n  }\n    \n   public boolean amIhearing(String listener, String expectedShouter) {\n      Map<String, List<Message> > shoutsHeard = this.getDistance(listener);\n      List<Message> shouts = shoutsHeard.get(expectedShouter);\n      if(shouts != null) {\n          if (listener.equals(expectedShouter)) return false;\n          return true;\n      }\n      return false;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Multiple shouters2\n        Given people are located at\n        | name  | x    | y   |\n        | Lucy  | 0    | 0   |\n        | Sean  | 0    | 500 |\n        | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario Outline: Only hear in range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n         | Seans-location | what-Lucy-hears |\n         | 0, 900         | Sean            |\n         | 800, 800       | nothing         |\n      \n      Scenario: Shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n      Scenario: Multiple shouts from one person\n         Given Lucy is at 0, 0\n         And Sean is at 0, 500\n         When Sean shouts\n         And Sean shouts\n         Then Lucy should hear 2 shouts from sean\n         \n         \n","output":"JUnit version 4.12\n......++++:1000\n.1000\n....++++:1000\n.1000\n.....++++:1000\n.++++:1000\n.1000\n1000\n.1000\n1000\n...++++:1000\n.++++:1000\n.1000\n1000\n.1000\n1000\n....++++:1000\n.1000\n....++++:1000\n.1000\n...++++:1000\n.1000\n....++++:1000\n.++++:1000\n.1000\n1000\n.....++++:1000\n.---Premium\n++++:2000\n.1000\n.EEI\nFailed scenarios:\npremium_hear_shout.feature:4 # Scenario: Multiple shouters\n\n9 Scenarios (1 failed, 8 passed)\n43 Steps (1 failed, 1 skipped, 41 passed)\n0m0.390s\n\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.listener_should_hear_shouter(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear Oscar(premium_hear_shout.feature:10)\n\n\nTime: 2.383\nThere were 2 failures:\n1) Then Lucy should hear Oscar(Scenario: Multiple shouters)\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.listener_should_hear_shouter(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear Oscar(premium_hear_shout.feature:10)\n2) Scenario: Multiple shouters\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.listener_should_hear_shouter(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear Oscar(premium_hear_shout.feature:10)\n\nFAILURES!!!\nTests run: 54,  Failures: 2\n\nNov 28, 2017 4:35:06 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1ff4931d: startup date [Tue Nov 28 04:35:06 GMT 2017]; root of context hierarchy\nNov 28, 2017 4:35:06 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nNov 28, 2017 4:35:08 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@1ff4931d: startup date [Tue Nov 28 04:35:06 GMT 2017]; root of context hierarchy\n","premium_hear_shout.feature":"Feature: Hearing a shout\n    Premium shouts have a range of approximately 2000 metres\n    \n    Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts premium shout\n        Then Lucy should hear Oscar\n        But Lucy should hear Sean","PremiumShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport cucumber.api.DataTable;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class PremiumShoutSteps {\n    private final String PREMIUM_MESSAGE = \"Hello, Premium World\";\n    private final Shouty shouty = new Shouty();\n    \n    @When(\"^(\\\\w+) shouts premium shout$\")\n    public void shouter_shouts(String name) throws Throwable {\n        System.out.println(\"---Premium\");\n        shouty.shout(name, PREMIUM_MESSAGE, true);\n    }\n}","Message.java":"public class Message {\n    private boolean premium;\n    private int range;\n    private String message;\n    \n    public Message(String message, boolean isPremium) {\n        this.message = message;\n        this.premium = isPremium;\n        this.range = isPremium ? 2000 : 1000;\n    }\n    \n    public boolean isPremium() {\n        return this.premium;\n    }\n    \n    public int getRange() {\n        return this.range;\n    }\n}","User.java":"public class User {\n    private String name;\n    private int x;\n    private int y;\n    \n    public String getName() {\n        return this.name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getX() {\n        return this.x;\n    }\n    \n    public void setX() {\n        this.x = x;\n    }\n    \n    public int getY() {\n        return this.y;\n    }\n    \n    public void setY() {\n        this.y = y;\n    }\n    \n    \n}"}