{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){    \n    int distance = (int)Math.sqrt(Math.pow(Math.abs(other.x-x),2) + Math.pow(Math.abs(other.y-y),2));\n      System.out.println(\"Distance between X:\" + this.toString() + \"Y:\" + other + \" is : \" + distance);\n    return distance;\n  }\n    public String toString() {\n        return \"(\" + x + \",\" + y + \")\";\n    }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport cucumber.api.DataTable;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void user_is_at(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    @When(\"^people are located at$\")\n    public void user_is_at(DataTable datatable) throws Throwable {\n        List<User> asList = datatable.asList(User.class);\n        for(User user:asList) {\n            shouty.setLocation(user.getName(), new Coordinate(user.getX(), user.getY()));\n        }\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouter_shouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }    \n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listener_should_hear_shouter(String name, String expectedShouter) throws Throwable {\n        if ( expectedShouter != null && expectedShouter.equals(\"nothing\")) {\n            Assert.assertEquals(0, shouty.getShoutsHeardBy(name).size());\n        } else {\n            Assert.assertTrue(shouty.amIhearing(name, expectedShouter));\n        }\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listener_should_not_hear_shouter(String name, String expectedShouter) throws Throwable {\n        Assert.assertFalse(shouty.amIhearing(name, expectedShouter));\n    }    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n    \n  private Map<String, List<String> > getDistance(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n      return shoutsHeard;\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {      \n      return this.getDistance(listener);\n  }\n    \n   public boolean amIhearing(String listener, String expectedShouter) {\n      Map<String, List<String> > shoutsHeard = this.getDistance(listener);\n      List<String> shouts = shoutsHeard.get(expectedShouter);\n      if(shouts != null) {\n          if (listener.equals(expectedShouter)) return false;\n          return true;\n      }\n      return false;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Multiple shouters2\n        Given people are located at\n        | name  | x    | y   |\n        | Sean  | 0    | 500 |\n        | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n","output":"JUnit version 4.12\n.Distance between X:(0,0)Y:(0,0) is : 0\n.Distance between X:(0,0)Y:(600,0) is : 600\n.Distance between X:(0,0)Y:(300,400) is : 500\n....Distance between X:(0,0)Y:(0,900) is : 900\n.....Distance between X:(0,0)Y:(800,800) is : 1131\n.......Distance between X:(0,0)Y:(0,500) is : 500\nDistance between X:(0,0)Y:(1100,0) is : 1100\n.Distance between X:(0,0)Y:(0,500) is : 500\nDistance between X:(0,0)Y:(1100,0) is : 1100\n......EEI...Distance between X:(0,0)Y:(0,0) is : 0\n.\nFailed scenarios:\nhear_shout.feature:26 # Scenario: Multiple shouters2\n\n5 Scenarios (1 failed, 4 passed)\n23 Steps (1 failed, 1 skipped, 21 passed)\n0m0.286s\n\njava.lang.NullPointerException\n\tat Shouty.getDistance(Shouty.java:27)\n\tat Shouty.amIhearing(Shouty.java:39)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:41)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n\n\nTime: 1.633\nThere were 2 failures:\n1) Then Lucy should not hear Oscar(Scenario: Multiple shouters2)\njava.lang.NullPointerException\n\tat Shouty.getDistance(Shouty.java:27)\n\tat Shouty.amIhearing(Shouty.java:39)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:41)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n2) Scenario: Multiple shouters2\njava.lang.NullPointerException\n\tat Shouty.getDistance(Shouty.java:27)\n\tat Shouty.amIhearing(Shouty.java:39)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:41)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n\nFAILURES!!!\nTests run: 30,  Failures: 2\n\nNov 28, 2017 2:30:40 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4b2bac3f: startup date [Tue Nov 28 02:30:40 GMT 2017]; root of context hierarchy\nNov 28, 2017 2:30:40 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","User.java":"public class User {\n    private String name;\n    private int x;\n    private int y;\n    \n    public User() {}\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public void setX(int x) {\n        this.x = x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public void setY(int y) {\n        this.y = y;\n    }\n}\n    \n   "}