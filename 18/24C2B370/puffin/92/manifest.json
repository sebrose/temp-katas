{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      return (int)\n        Math.sqrt((Math.pow((x-other.x),2)) \n                  + (Math.pow((y-other.y),2)));\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.DataTable;\n\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n  \n    private final Shouty shouty = new Shouty();\n    \n    \n   \n     @Given(\"^(\\\\w+) is at (\\\\d+),(\\\\d+)$\")\n    public void personisAtXY(String name,int x,int y) throws Throwable {\n        \n        shouty.setLocation(name,new Coordinate(x,y));   \n       \n    }\n    \n    @Given(\"^People are at x,y$\")\n    public void peopleAreAtXY(DataTable inputData) throws Throwable {\n        List<List<String> > shouts = inputData.raw();\n        for(List<String> strs : shouts) {\n            System.out.println(strs.get(1));\n        shouty.setLocation(strs.get(0), \n              new Coordinate(Integer.parseInt(strs.get(1)), \n                             Integer.parseInt(strs.get(2))));   \n        }\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    \n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")    \n    public void shouteeShouldHearShouter(String name, String shouter) throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(name).size());\n    }\n        \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void shouteeShouldNotHearShouter(String name, String shouter) throws Throwable {\n        Map<String, List<String> > listOfShoutsHeard = shouty.getShoutsHeardBy(name);\n        if(listOfShoutsHeard.get(shouter) != null) {\n            Assert.assertEquals(0, listOfShoutsHeard.get(shouter).size());\n        }\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void shouteeShouldHearShouterTwice(String name, int count, String shouter) throws Throwable {\n        Assert.assertEquals(count, shouty.getShoutsHeardBy(name).size());\n    }\n    \n    @Then(\"^(\\\\w+) should not hear their own shout$\")\n    public void shouterShouldNotHearShouter(String shouter) throws Throwable {\n        Map<String, List<String> > listOfShoutsHeard = shouty.getShoutsHeardBy(shouter);\n        if(listOfShoutsHeard.get(shouter) != null) {\n            Assert.assertEquals(0, listOfShoutsHeard.get(shouter).size());\n        }\n    }\n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(!shouter.equalsIgnoreCase(listener)) {\n              List<String> personsShouts = entry.getValue();\n              int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n              if (distance < MESSAGE_RANGE)\n                  shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: In range shout is heard\n        Given Lucy is at 0,0\n        And Sean is at <Sean-location>\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear <what-Lucy-hears > from Sean\n        # And Sean should not hear their own shout\n        | Sean-location | what-Lucy-hears |\n        |0,500       | 2  |\n \n      Scenario: Out of range shout is not heard\n         Given People are at x,y\n         | Lucy | 0 | 0  |\n         | Sean | 800 | 800|\n        When Sean shouts\n        Then Lucy should not hear Sean\n        And Sean should not hear their own shout\n\n      Scenario: Multiple shouters\n       Given People are at x,y\n         | Lucy | 0 | 0  |\n         | Sean | 0 | 500|\n         |Oscar |1100|0  |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        And Sean should not hear their own shout\n        And Oscar should not hear their own shout\n        ","output":"JUnit version 4.12\n....0\n800\n.....0\n0\n1100\n.......\n2 Scenarios (2 passed)\n11 Steps (11 passed)\n0m0.164s\n\n\nTime: 1.204\n\nOK (16 tests)\n\nNov 28, 2017 3:51:10 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3c9754d8: startup date [Tue Nov 28 03:51:10 GMT 2017]; root of context hierarchy\nNov 28, 2017 3:51:10 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","Shouts.java":"import java.util.*;\n\nclass Shouts {\n     \n        private String name;\n        private int x;\n        private int y;\n        \n        Shouts(String name, int x, int y) {\n            this.name = name;\n            this.x = x;\n            this.y = y;\n        }\n        \n        public String getName() { return this.name; }\n        public int getX() { return this.x; }\n        public int getY() { return this.y; }\n    }"}