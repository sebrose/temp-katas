{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n// TODO Actually calculate distance\n    return 0;\n\n\n// Maybe Pythagoras might be able to help...?\n//  int xDiff = x - other.x;\n//  int yDiff = y - other.y;\n\n//  return (int) Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));\n  }\n}","CoordinateTest.java":"import junit.framework.TestCase;\nimport org.junit.Test;\n\npublic class CoordinateTest extends TestCase {\n\n    @Test\n    public void itCalculatesTheDistanceFromItself() {\n        Coordinate a = new Coordinate(0, 0);\n        assertEquals(0, a.distanceFrom(a));\n    }\n\n    @Test\n    public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n        Coordinate a = new Coordinate(0, 0);\n        Coordinate b = new Coordinate(1000, 0);\n        assertEquals(1000, a.distanceFrom(b));\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^Lucy is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(\"Lucy\", new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"^Sean is at (\\\\d+), (\\\\d+)$\")\n    public void seanIsAt(int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^Sean shouts$\")\n    public void seanShouts() throws Throwable {\n        shouty.shout(\"Sean\", ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear him$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getMessagesHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getMessagesHeardBy(\"Lucy\").size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n    private final int MESSAGE_RANGE = 1000;\n    private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n    private Map<String, String> messages = new HashMap<String, String>();\n\n    public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n    }\n\n    public void shout(String person, String message) {\n      messages.put(person, message);\n    }\n\n    public Map<String, String> getMessagesHeardBy(String listener) {\n         HashMap<String, String> result = new HashMap<String, String>();\n\n        for (Map.Entry<String, String> entry: messages.entrySet()) {\n            String shouter = entry.getKey();\n            String message = entry.getValue();\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE)\n                result.put(shouter, message);\n        }\n\n        return result;\n    }\n}","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n//  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 CoordinateTest.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear him\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 1100\n        When Sean shouts\n        Then Lucy should hear nothing\n","output":"JUnit version 4.12\n.E\nTime: 0.008\nThere was 1 failure:\n1) warning(junit.framework.TestSuite$1)\njunit.framework.AssertionFailedError: No tests found in CoordinateTest\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat junit.framework.TestSuite$1.runTest(TestSuite.java:97)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:252)\n\tat junit.framework.TestSuite.run(TestSuite.java:247)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n\nFAILURES!!!\nTests run: 1,  Failures: 1\n\n./cyber-dojo.sh: line 7: //: Permission denied\n"}