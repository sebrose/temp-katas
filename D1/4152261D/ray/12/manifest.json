{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    const dx = this.x - other.x\n    const dy = this.y - other.y\n    return Math.sqrt(dx * dx + dy * dy)\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  // it(\"should calculate the distance from another coordinate\", ()=>{\n  //   var a = new Coordinate(0, 0)\n  //   var b = new Coordinate(300, 400)\n  //\n  //   assert.equal(a.distanceFrom(b), 500)\n  // })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should not hear Lucy\n\n  Scenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  Scenario: Lucy doesn't hear herself\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})\n\nGiven('{word} is at {int}, {int}', function (personName, x, y) {\n  shouty.setLocation(personName, new Coordinate(x, y))\n})\n\nWhen('{word} shouts', function (personName) {\n  shouty.shout(personName, ARBITARY_MESSAGE)\n})\n\nThen('${word} should hear ${word}', function (listener, shouter) {\n  const heardShouters = Object.keys(shouty.getShoutsHeardBy(listener))\n  assert(heardShouters.indexOf(shouter) != -1)\n})\n\nThen('${word} should not hear ${word}', function (listener, shouter) {\n  const heardShouters = Object.keys(shouty.getShoutsHeardBy(listener))\n  assert(!heardShouters.indexOf(shouter) != -1)\n})","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\n\nfunction CustomWorld() {\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n..\n\n\n2 specs, 0 failures\nFinished in 0.012 seconds\n\nCUCUMBER FEATURES\n=================\n....U....U......UU...U\n\nWarnings:\n\n1) Scenario: In range shout is heard # ../../../../../sandboxes/ray/features/hear_shout.feature:5\n   ✔ Before # ../../../../../sandboxes/ray/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ And Sean is at 0, 900 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ When Sean shouts # ../../../../../sandboxes/ray/features/shout_steps.js:17\n   ? Then Lucy should hear Sean\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy should hear Sean', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n2) Scenario: Out of range shout is not heard # ../../../../../sandboxes/ray/features/hear_shout.feature:11\n   ✔ Before # ../../../../../sandboxes/ray/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ And Sean is at 800, 800 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ When Sean shouts # ../../../../../sandboxes/ray/features/shout_steps.js:17\n   ? Then Lucy should not hear Lucy\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy should not hear Lucy', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n3) Scenario: Multiple shouters # ../../../../../sandboxes/ray/features/hear_shout.feature:17\n   ✔ Before # ../../../../../sandboxes/ray/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ And Sean is at 0, 500 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ And Oscar is at 1100, 0 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ When Sean shouts # ../../../../../sandboxes/ray/features/shout_steps.js:17\n   ✔ And Oscar shouts # ../../../../../sandboxes/ray/features/shout_steps.js:17\n   ? Then Lucy should not hear Oscar\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy should not hear Oscar', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n   ? But Lucy should hear Sean\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy should hear Sean', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n4) Scenario: Lucy doesn't hear herself # ../../../../../sandboxes/ray/features/hear_shout.feature:26\n   ✔ Before # ../../../../../sandboxes/ray/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/ray/features/shout_steps.js:13\n   ✔ When Lucy shouts # ../../../../../sandboxes/ray/features/shout_steps.js:17\n   ? Then Lucy should not hear Lucy\n       Undefined. Implement with the following snippet:\n\n         Then('Lucy should not hear Lucy', function () {\n           // Write code here that turns the phrase above into concrete actions\n           return 'pending';\n         });\n\n\n4 scenarios (4 undefined)\n18 steps (5 undefined, 13 passed)\n0m00.009s\n"}