{"output":"JUnit version 4.12\n...E\nTime: 0.005\nThere was 1 failure:\n1) initializationError(RunCukesTest)\ncucumber.runtime.CucumberException: Error parsing feature file hear_shout.feature\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:133)\n\tat cucumber.runtime.model.CucumberFeature.loadFromFeaturePath(CucumberFeature.java:104)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:54)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:34)\n\tat cucumber.runtime.RuntimeOptions.cucumberFeatures(RuntimeOptions.java:235)\n\tat cucumber.api.junit.Cucumber.<init>(Cucumber.java:60)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n\tat org.junit.runner.Computer.getRunner(Computer.java:40)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:101)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:87)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:75)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:118)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\nCaused by: gherkin.lexer.LexingError: Lexing error on line 6: 'Shouts have a range of approximately 1000 metres\n    \n      Scenario Outline: only hear in-range shouts\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | 0 shouts        |\n        \n      Scenario: Multiple shouters\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n      \n      Scenario: Multiple shouters v2\n        Given people are located at\n          | name  | x    | y   |\n          | Sean  | 0    | 500 |\n          | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n       \n      Scenario: Multiple shouts from one person\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n      \n      Scenario: Self shout\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n%_FEATURE_END_%'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.\n\tat gherkin.lexer.En.scan(En.java:872)\n\tat gherkin.lexer.I18nLexer.scan(I18nLexer.java:36)\n\tat gherkin.parser.Parser.parse(Parser.java:62)\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:131)\n\t... 24 more\n\nFAILURES!!!\nTests run: 3,  Failures: 1\n\n","Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    return (int) Math.pow((Math.pow(x - other.x, 2) + Math.pow(y - other.y, 2)), 0.5);\n\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private Shouty shouty;// = new Shouty();\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void personShouts(String personName) throws Throwable {\n        shouty.shout(personName, ARBITRARY_MESSAGE);\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should hear 0 shouts$\")\n    public void listenerHearNoShouter(String listener) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(listener).size() == 0);\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerNotHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(false, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listerHearMultipleShouts(String listener, int numShouts ,String shouter){\n        Assert.assertEquals(numShouts, shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !(shouter.equals(listener)))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n  \nBackground:\n  Given Lucy is at 0, 0\n\n    Shouts have a range of approximately 1000 metres\n    \n      Scenario Outline: only hear in-range shouts\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | 0 shouts        |\n        \n      Scenario: Multiple shouters\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n      \n      Scenario: Multiple shouters v2\n        Given people are located at\n          | name  | x    | y   |\n          | Sean  | 0    | 500 |\n          | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n       \n      Scenario: Multiple shouts from one person\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n      \n      Scenario: Self shout\n        When Lucy shouts\n        Then Lucy should not hear Lucy","PersonLocation.java":"public class PersonLocation {\n   private String name;\n   private int x;\n   private int y;\n    \n   public PersonLocation(String name, int x, int y) {\n       this.name = name;\n       this.x = x;\n       this.y = y;\n   }\n   \n   public String getName() {\n       return name;\n   }\n   \n   public int getX() {\n       return x;\n   }\n    \n   public int getY() {\n       return y;\n   }\n   \n}","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private Shouty shouty;\n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String personName, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(personName, new Coordinate(xCoord, yCoord));\n    }\n    \n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> locations) throws Throwable {\n        for (int row = 0; row < locations.size(); row++) {\n            shouty.setLocation(locations.get(row).getName(), new Coordinate(locations.get(row).getX(), locations.get(row).getY()));\n        }\n    }\n}\n"}