{"output":"JUnit version 4.12\n.......EE.....EE.......EEI.....EEI......EE....EE\nFailed scenarios:\nhear_shout.feature:13 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:14 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:16 # Scenario: Multiple shouters\nhear_shout.feature:25 # Scenario: Multiple shouters v2\nhear_shout.feature:36 # Scenario: Multiple shouts from one person\nhear_shout.feature:44 # Scenario: Self shout\n\n6 Scenarios (6 failed)\n28 Steps (6 failed, 2 skipped, 20 passed)\n0m0.198s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearShouter(ShoutSteps.java:18)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:9)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearNoShouter(ShoutSteps.java:23)\n\tat ✽.Then Lucy should hear 0 shouts(hear_shout.feature:9)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:22)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listerHearMultipleShouts(ShoutSteps.java:33)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:41)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:47)\n\n\nTime: 1.264\nThere were 12 failures:\n1) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearShouter(ShoutSteps.java:18)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:9)\n2) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearShouter(ShoutSteps.java:18)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:9)\n3) Then Lucy should hear 0 shouts(| 800, 800 | 0 shouts |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearNoShouter(ShoutSteps.java:23)\n\tat ✽.Then Lucy should hear 0 shouts(hear_shout.feature:9)\n4) | 800, 800 | 0 shouts |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerHearNoShouter(ShoutSteps.java:23)\n\tat ✽.Then Lucy should hear 0 shouts(hear_shout.feature:9)\n5) Then Lucy should not hear Oscar(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:22)\n6) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:22)\n7) Then Lucy should not hear Oscar(Scenario: Multiple shouters v2)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n8) Scenario: Multiple shouters v2\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:33)\n9) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listerHearMultipleShouts(ShoutSteps.java:33)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:41)\n10) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listerHearMultipleShouts(ShoutSteps.java:33)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:41)\n11) Then Lucy should not hear Lucy(Scenario: Self shout)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:47)\n12) Scenario: Self shout\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerNotHearShouter(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:47)\n\nFAILURES!!!\nTests run: 34,  Failures: 12\n\nJun 28, 2018 6:56:06 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1ce24091: startup date [Thu Jun 28 06:56:06 GMT 2018]; root of context hierarchy\nJun 28, 2018 6:56:06 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nJun 28, 2018 6:56:07 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@1ce24091: startup date [Thu Jun 28 06:56:06 GMT 2018]; root of context hierarchy\n","Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    return (int) Math.pow((Math.pow(x - other.x, 2) + Math.pow(y - other.y, 2)), 0.5);\n\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void personShouts(String personName) throws Throwable {\n        shouty.shout(personName, ARBITRARY_MESSAGE);\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should hear 0 shouts$\")\n    public void listenerHearNoShouter(String listener) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(listener).size() == 0);\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerNotHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(false, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listerHearMultipleShouts(String listener, int numShouts ,String shouter){\n        Assert.assertEquals(numShouts, shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !(shouter.equals(listener)))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n        \n      Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | 0 shouts        |\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n      \n      Scenario: Multiple shouters v2\n        Given people are located at\n          | name  | x    | y   |\n          | Lucy  | 0    | 0   |\n          | Sean  | 0    | 500 |\n          | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n       \n      Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n      \n      Scenario: Self shout\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy","PersonLocation.java":"public class PersonLocation {\n   private String name;\n   private int x;\n   private int y;\n    \n   public PersonLocation(String name, int x, int y) {\n       this.name = name;\n       this.x = x;\n       this.y = y;\n   }\n   \n   public String getName() {\n       return name;\n   }\n   \n   public int getX() {\n       return x;\n   }\n    \n   public int getY() {\n       return y;\n   }\n   \n}","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String personName, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(personName, new Coordinate(xCoord, yCoord));\n    }\n    \n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> locations) throws Throwable {\n        for (int row = 0; row < locations.size(); row++) {\n            shouty.setLocation(locations.get(row).getName(), new Coordinate(locations.get(row).getX(), locations.get(row).getY()));\n        }\n    }\n}\n"}