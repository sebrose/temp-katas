{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // actually calculate distance beteen the coordinates.\n    int xDistToZero = calculateDistance(x, y);\n    int otherXDistToZero = calculateDistance(other.x, other.y);\n    return calculateDistance(xDistToZero, otherXDistToZero);\n  }\n    \n    public int calculateDistance(int p1, int p2) {\n        return (int)Math.sqrt(Math.abs(Math.pow(p1, 2) + Math.pow(p2, 2)));\n    }\n    \n    \n  public int getX() {return x;}\n  public void setX(int x) {this.x = x;}\n    \n  public int getY() {return y;}\n  public void setY(int y) {this.y = y;}\n    \n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, \n                 format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n\n    @Autowired\n    private Shouty shouty;\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void personShouts(String person) throws Throwable {\n        shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void shoutsAreHeard(String listener, String shouter) throws Throwable {\n        Map<String,List<String>> shouts = shouty.getShoutsHeardBy(listener);\n        List<String> shoutsByShouter = shouts.get(shouter);\n        if(shoutsByShouter == null) \n            shoutsByShouter = new ArrayList<String>();\n        \n        if(shouter.equals(\"nothing\")) {\n            Assert.assertTrue(shoutsByShouter.size() == 0);\n        }\n        else {\n            Assert.assertTrue(shoutsByShouter.size() > 0);\n        }\n    }\n\n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void shoutIsnotHeard(String listener, String shouter) throws Throwable {\n        Map<String,List<String>> shouts = shouty.getShoutsHeardBy(listener);\n        Assert.assertTrue(!shouts.containsKey(shouter));\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void hearMultipleShouts(String listener, int numOfShouts, String shouter) throws Throwable {\n        Map<String,List<String>> shouts = shouty.getShoutsHeardBy(listener);\n        Assert.assertEquals(shouts.get(shouter).size(), numOfShouts);\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (!shouter.equals(listener)) {\n              List<String> personsShouts = entry.getValue();\n              \n              Coordinate listenerLocation = locations.get(listener); \n              if(listenerLocation != null) {\n                int distance = listenerLocation.distanceFrom(locations.get(shouter));\n                if (distance < MESSAGE_RANGE)\n                    shoutsHeard.put(shouter, personsShouts);\n              }\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\"/>\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n    \n    @wip1\n    Scenario: Multiple shouters\n        Given people are located at\n          | name   |  x   | y  |\n          | Lucy   |  0   | 0  |\n          | Sean   |  0   | 500|\n          | Oscar  | 1100 | 0  |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n\n    Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples:\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | nothing         |\n    \n    @wip2\n    Scenario: Shouters should not hear own shouts\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 0, 600\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should hear Sean\n        And Lucy should hear Oscar        \n        And Sean should hear Oscar        \n        And Sean should not hear Sean\n    \n    Scenario: Multiple shouts from one person\n        And people are located at\n          | name   |  x   | y  |\n          | Lucy   |  0   | 0  |\n          | Sean   |  0   | 500|\n          | Oscar  | 1100 | 0  |\n        And Sean shouts\n        And Sean shouts\n        And Oscar shouts\n        And Lucy should hear 2 shouts from Sean\n        \n     \n    Scenario: Moving target\n        Given people are located at\n          | name   |  x   | y   |\n          | Sean   |  0   | 0   |\n          | Lucy   |  0   | 1100|\n        When Sean shouts\n        Then Lucy should not hear Sean\n        Then Lucy is at 0, 800\n        And Lucy should hear 2 shouts from Sean\n\n        \n        \n        ","output":"JUnit version 4.12\n....Wip, wip, running.....\nI ran before the scenario\n.....I ran after the scenario\n\n.I ran before the scenario\n....I ran after the scenario\n\n.I ran before the scenario\n....I ran after the scenario\n\n.Wip, wip, running.....\nI ran before the scenario\n.........I ran after the scenario\n\n.I ran before the scenario\n.....I ran after the scenario\n\n.I ran before the scenario\n.....EEI ran after the scenario\n\n\nFailed scenarios:\nhear_shout.feature:52 # Scenario: Moving target\n\n6 Scenarios (1 failed, 5 passed)\n32 Steps (1 failed, 31 passed)\n0m0.270s\n\njava.lang.AssertionError: expected:<1> but was:<2>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.hearMultipleShouts(ShoutSteps.java:43)\n\tat ✽.And Lucy should hear 2 shouts from Sean(hear_shout.feature:60)\n\n\nTime: 1.423\nThere were 2 failures:\n1) And Lucy should hear 2 shouts from Sean(Scenario: Moving target)\njava.lang.AssertionError: expected:<1> but was:<2>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.hearMultipleShouts(ShoutSteps.java:43)\n\tat ✽.And Lucy should hear 2 shouts from Sean(hear_shout.feature:60)\n2) Scenario: Moving target\njava.lang.AssertionError: expected:<1> but was:<2>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.hearMultipleShouts(ShoutSteps.java:43)\n\tat ✽.And Lucy should hear 2 shouts from Sean(hear_shout.feature:60)\n\nFAILURES!!!\nTests run: 41,  Failures: 2\n\nJun 28, 2018 7:07:51 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3bd82cf5: startup date [Thu Jun 28 07:07:51 GMT 2018]; root of context hierarchy\nJun 28, 2018 7:07:51 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nJun 28, 2018 7:07:52 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@3bd82cf5: startup date [Thu Jun 28 07:07:51 GMT 2018]; root of context hierarchy\n","PersonLocation.java":"public class PersonLocation {\n  \n  private String name;\n  private int x;\n  private int y;\n\n  public PersonLocation(String name, int xCoord, int yCoord){\n    this.name = name;\n    this.x = xCoord;\n    this.y = yCoord;\n  }\n\n  public String getName() {return name;}\n  public void setName(String name) {this.name = name;}\n    \n  public int getX() {return x;}\n  public void setX(int x) {this.x = x;}\n    \n  public int getY() {return y;}\n  public void setY(int y) {this.y = y;}\n    \n  public String toString() {\n    return name + \" (\" + x + \", \" + y + \")\";   \n  }\n}\n","LocationSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class LocationSteps {\n\n    @Autowired\n    private Shouty shouty;\n    \n    @Given(\"people are located at\")\n    public void setPeopleCoordinates(List<PersonLocation> pLocations) throws Throwable {\n        for(PersonLocation pLoc : pLocations) {\n            shouty.setLocation(pLoc.getName(), new Coordinate(pLoc.getX(), pLoc.getY()));\n        }\n    }\n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void setPersonCoordinate(String person, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n}\n","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\n\npublic class ShoutyHooks {\n    \n    @Before(value=\"@wip1,@wip2\", order = 1)\n    public void runBeforeOrdered() {\n        System.out.println(\"Wip, wip, running.....\");\n    }\n    \n    @Before\n    public void runBefore() {\n        System.out.println(\"I ran before the scenario\");\n    }\n    \n    @After\n    public void runAfter() {\n        System.out.println(\"I ran after the scenario\\n\");\n    }\n    \n    \n    \n}"}