{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n   // TODO: actually calculate distance beteen the coordinates.\n       let a = Math.abs(this.x - other.x)\n       let b = Math.abs(this.y - other.y)\n       return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n   \n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\nit(\"should calculate the distance from another coordinate\", ()=>{\n    var a = new Coordinate(0, 0)\n   var b = new Coordinate(300, 400)\n \n    assert.equal(a.distanceFrom(b), 500)\n })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n  \n Background:\n       Given Lucy is at 0, 0\n@ShoutHeard\n  Scenario: In range shout is heard\n#  Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n #   Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    # This means Sean is approximately 1130m from Lucy\n    When Sean shouts\n    Then Lucy should hear nothing\n    \n   Scenario Outline: Only hear in-range shouts\n  #   Given Lucy is at 0, 0\n     And Sean is at <Seans-location>\n     When Sean shouts\n     Then Lucy should hear <what-Lucy-hears>\n   \n   Examples: some simple examples\n     | Seans-location | what-Lucy-hears|\n     | 0, 900         | Sean           |\n     | 800, 800       | nothing        |\n    \n    \n    Scenario: Multiple shouters\n     Given people are located at\n     | name  | x    |    y    |\n     | Lucy  | 0    |    0    |\n     | Sean  | 0    |    500  |\n     | Oscar | 1100 |    0    |\n     \n   Scenario: Multiple shouts from one person\n  #   Given Lucy is at 0, 0 \n      And  Sean is at 0, 500\n      When Sean shouts\n      And  Sean shouts\n      Then Lucy should hear 2 shouts from Sean\n     \n     \n     And Sean is at 0, 500\n     And Oscar is at 1100, 0\n     When Sean shouts\n     And Oscar shouts\n     Then Lucy should not hear Oscar\n     But Lucy should hear Sean\n     \n     \n     Scenario: Shouters should not heart their own shouts\n    #   Given Lucy is at 0, 0\n       When Lucy shouts\n       Then Lucy should not hear Lucy\n       \n       \n \n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\n\nThen('Lucy should hear Sean', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 1)\n})\n\n\nThen('{word} should not hear {word}', function (nameA, nameB) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(nameA)).includes(nameB), \n               false)\n})\n\nThen('Lucy should hear nothing', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 0)\n})\n\n\nThen('Lucy should hear {int} shouts from Sean', function (numberShouts) {\n  assert.equal((this.shouty.getShoutsHeardBy('Lucy')[\"Sean\"]).length, numberShouts)\n})\n\n\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE && shouter != listener) {\n          shoutsHeard[shouter] = personsShouts\n          \n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  --tags \"@ShoutNotHeard or @ShoutHeard\" \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\n....after\n.\n\n1 scenario (1 passed)\n4 steps (4 passed)\n0m00.002s\n","location_steps.js":"","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nGiven('{word} is at {int}, {int}', function (name, x, y) {\n  this.shouty.setLocation(name, new Coordinate(x, y))\n})\n\nGiven('people are located at', function (dataTable) {\n           dataTable.hashes().forEach(row => {\n            this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  })\n})","features/shouty_hooks.js":"var { Before, After, Given, When, Then} = require('cucumber')\n\nBefore({tags: \"@foo\"}, function() {\n  // This hook will be executed before scenarios tagged with @foo\n  console.log('before');\n  \n});\n\nAfter(function(){\n  \n  console.log('after');\n  \n});"}