{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    let x = Math.abs(this.x - other.x);\n    let y = Math.abs(this.y - other.y);\n    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\nvar Shouty = require('../shouty')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n  })\n  \n  it(\"shouter should not hear own shout\", ()=>{\n     var shouty = new Shouty(); \n     shouty.setLocation(\"Lucy\", new Coordinate(0, 0));\n     shouty.shout(\"Lucy\", \"Hello\");\n     assert.equal(Object.keys(shouty.getShoutsHeardBy(\"Lucy\")).length, 0)\n\n  })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n  Shouts have a range of approximately 1000m\n\nBackground:\n  Given Lucy is at 0, 0\n\n  @ShoutHeard\n  Scenario Outline: In range shout is heard\n    And Sean is at <seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-lucy-hears>\n    \n    Examples:\n      | seans-location  | what-lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800        | nothing         |\n          \n  Scenario: Multiple shouters\n    Given people are located at \n      | name  | x    | y    |\n      | Lucy  | 0    | 0    |\n      | Sean  | 0    | 500  |\n      | Oscar | 1100 | 0    |\n      \n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  @ShoutNotHeard\n  Scenario: Shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should hear nothing\n    \n  Scenario: Multiple shouts from one person\n    Given Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n  \n  Scenario:\n  Given Sean is at 0, 1100\n  And Sean shouts\n  And Sean is at 0, 900\n  And Sean Shouts\n  Then Lucy should hear 1 shouts from Sean\n  \n  Scenario:\n  Given Sean is at 0, 0\n  And Lucy is at 0, 1100\n  And Sean shouts\n  And Lucy is at 0, 900\n  And Sean shouts\n  Then Lucy should hear 1 shouts from Sean\n    \n","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nBefore(function () {\n  console.log('shout_steps - before 1');\n});\n\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('Lucy should hear Sean', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 1)\n})\n\nThen('{word} should not hear {word}', function (nameA, nameB) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(nameA)).includes(nameB), false)\n})\n\nThen('Lucy should hear nothing', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 0)\n})\n\nThen('Lucy should hear {int} shouts from Sean', function (numShouts) {\n  assert.equal(this.shouty.getShoutsHeardBy('Lucy')[\"Sean\"].length, numShouts)\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE && shouter != listener) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nvar Shouty = require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  --tags \"@ShoutNotHeard or @ShoutHeard\" \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n....\n\n\n4 specs, 0 failures\nFinished in 0.009 seconds\n\nCUCUMBER FEATURES\n=================\nshout_steps - before 1\n.tagged hooks\n.tagged hooks - shout heard\n.....hooks - after 2\n.hooks - after 1\n.shout_steps - before 1\n.tagged hooks\n.tagged hooks - shout heard\n.....hooks - after 2\n.hooks - after 1\n.shout_steps - before 1\n.tagged hooks\n.tagged hooks - shout not heard\n....hooks - after 2\n.hooks - after 1\n.\n\n3 scenarios (3 passed)\n11 steps (11 passed)\n0m00.006s\n","features/locations_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nGiven('{word} is at {coordinate}', function (name, coord) {\n  this.shouty.setLocation(name, coord);\n})\n\nGiven('people are located at', function (dataTable) {\n  dataTable.hashes().forEach(row => {\n    this.shouty.setLocation(row.name, new Coordinate(row.x, row.y))\n  });\n});","features/shouty_hooks.js":"var {Before, After, Given, When, Then } = require('cucumber')\n\nBefore({tags: \"@ShoutNotHeard or @ShoutHeard\"}, function () {\n  console.log('tagged hooks');\n});\n\nBefore({tags: \"@ShoutNotHeard\"}, function () {\n  console.log('tagged hooks - shout not heard');\n});\n\nBefore({tags: \"@ShoutHeard\"}, function () {\n  console.log('tagged hooks - shout heard');\n});\n\nAfter(function () {\n  console.log('hooks - after 1');\n});\n\n\nAfter(function () {\n  console.log('hooks - after 2');\n});","features/parameter_types.js":"const { defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate'\n});"}