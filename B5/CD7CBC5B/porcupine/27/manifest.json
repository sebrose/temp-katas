{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    return Math.sqrt(Math.pow((this.x - other.x),2) + Math.pow((this.y - other.y),2))\n\n//    return 0\n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n   it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Scenario Outline: only hear in-range shouts\n    Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n  \n  Examples: some examples\n    | Seans-location | what-Lucy-hears |\n    | 0, 900         | Sean            |\n    | 800, 800       | nothing         |\n    \n  Scenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  Scenario: Shouter does not hear own shout\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should not hear Lucy","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})\n\nGiven('{word} is at {int}, {int}', function (name, x, y) {\n  shouty.setLocation(name, new Coordinate(x, y))\n})\n\nWhen('{word} shouts', function (name) {\n  shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear {word}', function (name1, name2) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name1)).filter(s => s == name2).length, 1)\n})\n\nThen('{word} should not hear {word}', function (name1, name2) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(name1)).filter(s => s == name2).length, 0)\n})","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE && listener != shouter) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}","features/world.js":"const { setWorldConstructor } = require('cucumber')\n\nfunction CustomWorld() {\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.009 seconds\n\nCUCUMBER FEATURES\n=================\n.........F............\n\nFailures:\n\n1) Scenario: only hear in-range shouts # ../../../../../sandboxes/porcupine/features/hear_shout.feature:12\n   ✔ Before # ../../../../../sandboxes/porcupine/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/porcupine/features/shout_steps.js:13\n   ✔ And Sean is at 800, 800 # ../../../../../sandboxes/porcupine/features/shout_steps.js:13\n   ✔ When Sean shouts # ../../../../../sandboxes/porcupine/features/shout_steps.js:17\n   ✖ Then Lucy should hear nothing # ../../../../../sandboxes/porcupine/features/shout_steps.js:21\n       AssertionError [ERR_ASSERTION]: 0 == 1\n           + expected - actual\n\n           -0\n           +1\n\n           at CustomWorld.<anonymous> (/sandboxes/porcupine/features/shout_steps.js:22:10)\n\n4 scenarios (1 failed, 3 passed)\n18 steps (1 failed, 17 passed)\n0m00.007s\n"}