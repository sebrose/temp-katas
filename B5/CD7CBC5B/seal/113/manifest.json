{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    \n    return Math.sqrt((this.x - other.x)*(this.x - other.x) + (this.y -other.y)*(this.y -other.y));\n   \n  }\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  // it(\"should calculate the distance from another coordinate\", ()=>{\n  //   var a = new Coordinate(0, 0)\n  //   var b = new Coordinate(300, 400)\n  //\n  //   assert.equal(a.distanceFrom(b), 500)\n  // })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background:\n    Given Lucy is at 0, 0 \n    \n  @ShoutHeard\n  Scenario Outline: only hear in-range shouts\n    And Sean is at <Seans-locations>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n   \n    Examples: some simple examples\n      | Seans-locations | what-Lucy-hears |\n      | 0, 900          | Sean            |\n      | 800, 800        | nothing         |\n  \n  Scenario: Multiple shouters\n    Given people are located at\n      | name  | x     | y     |\n      | Sean  | 0     | 500   |\n      | Oscar | 1100  | 0     |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  @ShoutNotHeard\n  Scenario: Shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should hear nothing\n\n  Scenario: Multiple shouts from one person\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n  Scenario: TEST TST\n    Given people are located at\n      | name  | x     | y |\n      | Sean  | 1100  | 0 |\n      | Lucy  | 0     | 0 |\n    When Sean shouts\n    Then Lucy should hear nothing\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n   \n    ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE)\n})\n\nThen('Lucy should hear Sean', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 1)\n})\n\nThen('Lucy should hear nothing', function () {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy('Lucy')).length, 0)\n})\n\nThen('Lucy should not hear Oscar', function () {\n  assert.equal( this.shouty.getShoutsHeardBy('Lucy')['Oscar'] === undefined, 1)\n})\n\nThen('Lucy should hear {int} shouts from Sean', function (shoutcount) {\n assert.equal(this.shouty.getShoutsHeardBy('Lucy')['Sean'].length == shoutcount, 1)\n});\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n  \n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n       \n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n      \n        if (distance < MESSAGE_RANGE) {\n          if (shouter != listener && distance != 0)\n            shoutsHeard[shouter] = personsShouts\n        }\n    })\n    \n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\nconst Shouty =require('../shouty')\n\nfunction CustomWorld() {\n  this.shouty = new Shouty()\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  --tags @ShoutNotHeard \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n \n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n..\n\n\n2 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\nbefore\n....after\n.\n\n1 scenario (1 passed)\n3 steps (3 passed)\n0m00.003s\n","features/location_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nGiven('{word} is at {coordinate}', function(name,coordinate) {\n  this.shouty.setLocation(name,coordinate)\n})\n\nGiven('people are located at', function (dataTable) {\n  // Write code here that turns the phrase above into concrete actions\n  \n  dataTable.hashes().forEach(row => { \n    this.shouty.setLocation(row['name'], new Coordinate(row['x'], row['y']))\n  })\n  \n\n})","features/shouty_hooks.js":"var {Before, After } = require('cucumber')\n\n\nBefore({tags: \"@ShoutNotHeard\"}, function(){\n  console.log(\"before\")\n})\n\nAfter( function(){\n  console.log(\"after\")\n})\n\n","features/parameter_types.js":"const {defineParameterType } = require('cucumber')\nconst Coordinate = require('../coordinate')\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x,y) => new Coordinate(parseInt(x),parseInt(y)),\n  name: 'coordinate'\n})\n"}