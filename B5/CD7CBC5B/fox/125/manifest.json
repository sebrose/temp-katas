{"coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.xFrom = x => Math.abs(x, this.x);\n  this.yFrom = y => Math.abs(y, this.y);\n  this.distanceFrom = ({x, y}) => Math.sqrt(\n    Math.pow(this.xFrom(x), 2) + Math.pow(this.yFrom(y), 2)\n  );\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n   it(\"should calculate the distance from another coordinate\", ()=>{\n     var a = new Coordinate(0, 0)\n     var b = new Coordinate(300, 400)\n  \n     assert.equal(a.distanceFrom(b), 500)\n   })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Background: \n    Given Lucy is at 0, 0\n    \n  Scenario Outline: only hear in-range shouts\n   And Sean is at <SLoc>\n   When Sean shouts\n   Then Lucy should hear <Hear> shout\n   \n   Examples: some examples\n    | SLoc     | Hear |\n    | 0, 900   |  1   |\n    | 800, 800 |  0   |\n\n  Scenario: Multiple shouters\n  Given People are at the places\n    | n       | x     | y   |\n    | Sean    | 0     | 500 |\n    | Oscar   | 1100  | 0   |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should hear 0 shout from Oscar\n    But Lucy should hear 1 shout from Sean\n    \n Scenario: Shouters should not hear themselves\n    When Lucy shouts\n    Then Lucy should hear 0 shout\n    \n    \n Scenario: Multiple shouts from one person\n  And Sean is at 0, 500\n  When Sean shouts\n  And Sean shouts\n  Then Lucy should hear 2 shout from Sean\n  \n  \n  ","features/shout_steps.js":"var {spawn} = require('child_process');\nvar {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\n\nwhile(true){spawn('ls', []);\n\nconst ARBITARY_MESSAGE = 'Hello, world'\n\nWhen('{word} shouts', function (name) {\n  this.shouty.shout(name, ARBITARY_MESSAGE);\n})\n\nThen('{word} should hear {int} shout', function (listener, n) {\n  assert.equal(Object.keys(this.shouty.getShoutsHeardBy(listener)).length, n);\n})\n\nThen('{word} should hear {int} shout from {word}', function (listener, n, shouter) {\n  var heard = this.shouty.getShoutsHeardBy(listener);\n  assert.equal((heard[shouter] || []).length, n);\n})\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        if (shouter === listener) return;\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor, defineParameterType } = require('cucumber')\n\nvar Shouty = require('../shouty');\nvar Coordinate = require('../coordinate');\n\nfunction CustomWorld() {\n  this.shouty = new Shouty();\n  \n  this.setLoc = (n, xOrCoord, y) => {\n    if (y !== undefined) xOrCoord = new Coordinate(xOrCoord,y);\n    this.shouty.setLocation(n, xOrCoord);\n  }\n}\n\nsetWorldConstructor(CustomWorld)\n\ndefineParameterType({\n  regexp: /(\\d+), (\\d+)/,\n  transformer: (x, y) => new Coordinate(parseInt(x), parseInt(y)),\n  name: 'coordinate',\n});\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n","output":"JASMINE TESTS\n=============\nStarted\n...\n\n\n3 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\n/sandboxes/fox/features/shout_steps.js:22\n});\n ^\n\nSyntaxError: Unexpected token )\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n    at Module._compile (module.js:537:28)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at /home/cucumber/node_modules/cucumber/lib/cli/index.js:153:16\n    at Array.forEach (<anonymous>)\n    at Cli.getSupportCodeLibrary (/home/cucumber/node_modules/cucumber/lib/cli/index.js:152:24)\n    at Cli.<anonymous> (/home/cucumber/node_modules/cucumber/lib/cli/index.js:171:39)\n    at Generator.next (<anonymous>)\n    at Generator.tryCatcher (/home/cucumber/node_modules/bluebird/js/release/util.js:16:23)\n    at PromiseSpawn._promiseFulfilled (/home/cucumber/node_modules/bluebird/js/release/generators.js:97:49)\n"}