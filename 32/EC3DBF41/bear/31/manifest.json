{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n// TODO Actually calculate distance\n//    return 0;\n\n\n// Maybe Pythagoras might be able to help...?\n  int xDiff = x - other.x;\n  int yDiff = y - other.y;\n\n  return (int) Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));\n  }\n}","CoordinateTest.java":"import org.junit.Assert;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n\n    @Test\n    public void itCalculatesTheDistanceFromItself() {\n        Coordinate a = new Coordinate(0, 0);\n        Assert.assertEquals(0, a.distanceFrom(a));\n    }\n\n    @Test\n    public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n        Coordinate a = new Coordinate(0, 0);\n        Coordinate b = new Coordinate(1000, 0);\n        Assert.assertEquals(1000, a.distanceFrom(b));\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String who, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(who, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void someoneShouts(String who) throws Throwable {\n        shouty.shout(who, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void someoneShouldHearAnother(String listener, String listenFor) throws Throwable {\n//        Assert.assertEquals(1, shouty.getMessagesHeardBy(listener).size());\n        if (listenFor.equalsIgnoreCase(\"nothing\"))\n       \n          Assert.assertEquals(0, shouty.getMessagesHeardBy(listener).size());\n        else\n            Assert.assertEquals(1, shouty.getMessagesHeardByAndSentBy(listener, listenFor).size());\n\n\n\n    }\n\n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void someoneShouldNotHearAnother(String listener, String listenFor) throws Throwable {\n//        Assert.assertEquals(1, shouty.getMessagesHeardBy(listener).size());\n        Assert.assertEquals(0, shouty.getMessagesHeardByAndSentBy(listener, listenFor).size());\n\n\n    }\n@Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\npublic void lucyShouldHearShoutsFromSean(String listener, int arg1, String listenFor) throws Throwable {\n    // Write code here that turns the phrase above into concrete action\n    Assert.assertEquals(arg1, shouty.getMessagesHeardByAndSentBy(listener, listenFor).size());\n}\n\n/*    @Then(\"^(\\\\w+) should hear nothing$\")\n    public void listener_should_hear_nothing(String listener) throws Throwable {\n        Assert.assertEquals(0, shouty.getMessagesHeardBy(listener).size());\n    }\n\n@Then(\"^Lucy should not hear Oscar$\")\npublic void lucyShouldNotHearOscar() throws Throwable {\n        Assert.assertEquals(1, shouty.getMessagesHeardBy(\"Lucy\").size());\n\n}\n*/\n\n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n    private final int MESSAGE_RANGE = 1000;\n    private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n    private Map<String, String> messages = new HashMap<String, String>();\n\n    public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n    }\n\n    public void shout(String person, String message) {\n      messages.put(person, message);\n    }\n\n    public Map<String, String> getMessagesHeardBy(String listener) {\n         HashMap<String, String> result = new HashMap<String, String>();\n\n        for (Map.Entry<String, String> entry: messages.entrySet()) {\n            String shouter = entry.getKey();\n            String message = entry.getValue();\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE)\n                result.put(shouter, message);\n        }\n\n        return result;\n    }\n\n        public Map<String, String> getMessagesHeardByAndSentBy(String listener, String shouting) {\n         HashMap<String, String> result = new HashMap<String, String>();\n            \n            \n        for (Map.Entry<String, String> entry: messages.entrySet()) {\n            String shouter = entry.getKey();\n            if (shouter.equalsIgnoreCase(shouting)) {\n                String message = entry.getValue();\n                int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n                if (distance < MESSAGE_RANGE)\n                    result.put(shouter, message);\n            }\n        }\n        \n            \n        return result;\n    }\n\n\n\n}","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Background: \n    Given Lucy is at 0, 0\n\n    Scenario: In range shout is heard\n//        Given Lucy is at 0, 0\n        Given Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n    Scenario: Two In range shouts are heard\n//        Given Lucy is at 0, 0\n        Given Sean is at 0, 900\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean \n\n\n      Scenario: Out of range shout is not heard\n //       Given Lucy is at 0, 0\n        Given Sean is at 0, 1100\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n      Scenario: Multiple shouters one heard\n//        Given Lucy is at 0, 0\n        Given Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should hear Sean\n        But Lucy should not hear Oscar\n\n      Scenario: Multiple shouters all heard\n //       Given Lucy is at 0, 0\n        Given Sean is at 0, 500\n        And Oscar is at 100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should hear Sean\n        But Lucy should hear Oscar\n\n\n       ","output":"JUnit version 4.12\n.............EE.....................\nFailed scenarios:\nhear_shout.feature:14 # Scenario: Two In range shouts are heard\n\n5 Scenarios (1 failed, 4 passed)\n27 Steps (1 failed, 26 passed)\n0m0.135s\n\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:43)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:19)\n\n\nTime: 1.098\nThere were 2 failures:\n1) Then Lucy should hear 2 shouts from Sean(Scenario: Two In range shouts are heard)\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:43)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:19)\n2) Scenario: Two In range shouts are heard\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:43)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:19)\n\nFAILURES!!!\nTests run: 34,  Failures: 2\n\nOct 16, 2017 8:33:36 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4d1c00d0: startup date [Mon Oct 16 20:33:36 GMT 2017]; root of context hierarchy\nOct 16, 2017 8:33:36 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nOct 16, 2017 8:33:37 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@4d1c00d0: startup date [Mon Oct 16 20:33:36 GMT 2017]; root of context hierarchy\n"}