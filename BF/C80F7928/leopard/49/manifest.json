{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // int xdiff =  Math.abs(x - other.x);\n    //  int ydiff =  Math.abs(y - other.y);\n    //  return (int)Math.sqrt(Math.pow(xdiff,2) + Math.pow(ydiff,2));\n      return (int)Math.hypot(x - other.x, y - other.y);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\",\"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\n\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String name, int xCoord, int yCoord) {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"{word} shouts\")\n    public void person_shouts(String name) {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should hear {word}\")\n    public void listener_should_hear_shouter(String listener,String shouter) {\n        if( shouter.equals(\"nothing\")){\n            assertEquals(emptyMap(), shouty.getShoutsHeardBy(\"Lucy\"));\n        }\n        else{\n            assertTrue(shouty.getShoutsHeardBy(listener).containsKey(shouter));\n        }\n    }\n    \n    @Then(\"{word} should not hear {word}\")\n    public void lucy_should_not_hear_oscar(String listener, String shouter) {\n        assertFalse(String.format(\"Heard the following: %s\", shouty.getShoutsHeardBy(listener)), shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }  \n\n   // @Then(\"Lucy should hear nothing\")\n   // public void lucy_should_hear_nothing() {\n   //  assertEquals(emptyMap(), shouty.getShoutsHeardBy(\"Lucy\"));   \n   // }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(!shouter.equals(listener)){\n            List<String> personsShouts = entry.getValue();\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n    Scenario: Multiple shouter\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n    Scenario: Shouter should not hear own shout\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n","output":"JUnit version 4.12\n...Feature: Hearing a shout\n    Shouts have a range of approximately 1000 metres\n\n  Scenario: In range shout is heard # hear_shout.feature:5\n.    Given Lucy is at 0, 0           # ShoutSteps.person_is_at(String,int,int)\n    And Sean is at 0, 900           # ShoutSteps.person_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.person_shouts(String)\n    Then Lucy should hear Sean      # ShoutSteps.listener_should_hear_shouter(String,String)\n\n  Scenario: Out of range shout is not heard # hear_shout.feature:11\n.    Given Lucy is at 0, 0                   # ShoutSteps.person_is_at(String,int,int)\n    And Sean is at 800, 800                 # ShoutSteps.person_is_at(String,int,int)\n    When Sean shouts                        # ShoutSteps.person_shouts(String)\n    Then Lucy should hear nothing           # ShoutSteps.listener_should_hear_shouter(String,String)\n\n  Scenario: Multiple shouter        # hear_shout.feature:17\n.    Given Lucy is at 0, 0           # ShoutSteps.person_is_at(String,int,int)\n    And Sean is at 0, 500           # ShoutSteps.person_is_at(String,int,int)\n    And Oscar is at 1100, 0         # ShoutSteps.person_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.person_shouts(String)\n    And Oscar shouts                # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Oscar # ShoutSteps.lucy_should_not_hear_oscar(String,String)\n    But Lucy should hear Sean       # ShoutSteps.listener_should_hear_shouter(String,String)\n\n  Scenario: Shouter should not hear own shout # hear_shout.feature:26\n.    When Lucy shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Lucy            # ShoutSteps.lucy_should_not_hear_oscar(String,String)\n\n4 Scenarios (4 passed)\n17 Steps (17 passed)\n0m0.894s\n\n\nTime: 0.946\n\nOK (7 tests)\n\nJun 05, 2018 6:44:51 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@25359ed8: startup date [Tue Jun 05 18:44:51 GMT 2018]; root of context hierarchy\nJun 05, 2018 6:44:51 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n"}