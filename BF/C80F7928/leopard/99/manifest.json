{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // int xdiff =  Math.abs(x - other.x);\n    //  int ydiff =  Math.abs(y - other.y);\n    //  return (int)Math.sqrt(Math.pow(xdiff,2) + Math.pow(ydiff,2));\n      return (int)Math.hypot(x - other.x, y - other.y);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\",\"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport io.cucumber.datatable.DataTable;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private Shouty shouty;\n    \n    @When(\"{word} shouts\")\n    public void person_shouts(String name) {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should hear {word}\")\n    public void listener_should_hear_shouter(String listener,String shouter) {\n        if( shouter.equals(\"nothing\")){\n            assertEquals(emptyMap(), shouty.getShoutsHeardBy(\"Lucy\"));\n        }\n        else{\n            assertTrue(shouty.getShoutsHeardBy(listener).containsKey(shouter));\n        }\n    }\n    \n    @Then(\"{word} should not hear {word}\")\n    public void lucy_should_not_hear_oscar(String listener, String shouter) {\n        assertFalse(String.format(\"Heard the following: %s\", shouty.getShoutsHeardBy(listener)), shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }  \n\n    @Then(\"{word} should hear {int} shouts from {word}\")\n    public void lucyShouldHearShoutsFromSean(String listener, Integer int1, String shouter) {\n        assertEquals((int)int1, shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n            List<String> personsShouts = entry.getValue();\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE && !listener.equals(shouter))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType( new DataTableType( PersonLocation.class,\n           (TableEntryTransformer<PersonLocation>) row -> {\n                String name = row.get(\"name\");\n                int x = Integer.parseInt(row.get(\"x\"));\n                int y = Integer.parseInt(row.get(\"y\"));\n                return new PersonLocation(name, x, y);\n           }));\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n    \n    Background:\n        Given Lucy is at 0, 0\n    \n    @wip\n    Scenario: Multiple shouter\n       # Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n    Scenario: Multiple shouters\n        Given people are located at\n        | name  | x     | y     |\n       # | Lucy  | 0     | 0     |\n        | Sean  | 0     | 500   |\n        | Oscar | 1100  | 0     |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n        Given people are located at\n        | name  | x     | y     |\n        #| Lucy  | 0     | 0     |\n        | Sean  | 0     | 500   |\n        | Oscar | 1100  | 0     |\n        \n    @NoEcho\n    Scenario: Shouter should not hear own shout\n        Given Lucy has an account\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n    Scenario Outline: only hear in-range shouts\n        #Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n\n        Examples: test nothing scenario\n        | Seans-location | what-Lucy-hears | \n        | 800, 800       | nothing         |\n        | 0, 1100        | nothing         |\n    \n        Examples: test with real locations \n        | Seans-location | what-Lucy-hears | \n        | 0, 900         | Sean            |\n        \n     Scenario: Multiple shouts from one person\n        #Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean","output":"JUnit version 4.12\n...Feature: Hearing a shout\n    Shouts have a range of approximately 1000 metres\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  @wip\n  Scenario: Multiple shouter        # hear_shout.feature:9\n    And Sean is at 0, 500           # LocationSteps.person_is_at(String,int,int)\n    And Oscar is at 1100, 0         # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.person_shouts(String)\n    And Oscar shouts                # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Oscar # ShoutSteps.lucy_should_not_hear_oscar(String,String)\n    But Lucy should hear Sean       # ShoutSteps.listener_should_hear_shouter(String,String)\nSteps taken after each test\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  Scenario: Multiple shouters       # hear_shout.feature:18\n    Given people are located at     # LocationSteps.peopleAreLocatedAt(List<PersonLocation>)\n    When Sean shouts                # ShoutSteps.person_shouts(String)\n    And Oscar shouts                # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Oscar # ShoutSteps.lucy_should_not_hear_oscar(String,String)\n    But Lucy should hear Sean       # ShoutSteps.listener_should_hear_shouter(String,String)\n    Given people are located at     # LocationSteps.peopleAreLocatedAt(List<PersonLocation>)\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  @NoEcho\n  Scenario: Shouter should not hear own shout # hear_shout.feature:36\n    Given Lucy has an account                 # LocationSteps.person_has_account(String)\n    When Lucy shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Lucy            # ShoutSteps.lucy_should_not_hear_oscar(String,String)\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:41\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n\n    Examples: test nothing scenario\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:49\n    And Sean is at 800, 800                   # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear nothing             # ShoutSteps.listener_should_hear_shouter(String,String)\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:50\n    And Sean is at 0, 1100                    # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear nothing             # ShoutSteps.listener_should_hear_shouter(String,String)\n\n    Examples: test with real locations\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:54\n    And Sean is at 0, 900                     # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear Sean                # ShoutSteps.listener_should_hear_shouter(String,String)\n\n  Background:             # hear_shout.feature:5\n.    Given Lucy is at 0, 0 # LocationSteps.person_is_at(String,int,int)\n\n  Scenario: Multiple shouts from one person  # hear_shout.feature:56\n    And Sean is at 0, 500                    # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                         # ShoutSteps.person_shouts(String)\n    And Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear 2 shouts from Sean # ShoutSteps.lucyShouldHearShoutsFromSean(String,Integer,String)\n\n7 Scenarios (7 passed)\n35 Steps (35 passed)\n0m0.990s\n\n\nTime: 1.047\n\nOK (10 tests)\n\nJun 05, 2018 9:25:14 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@75c072cb: startup date [Tue Jun 05 21:25:14 GMT 2018]; root of context hierarchy\nJun 05, 2018 9:25:14 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","PersonLocation.java":"public class PersonLocation{\n    String name;\n    int x;\n    int y; \n    \n    PersonLocation(String name, int x, int y){\n        this.name = name;\n        this.x = x;\n        this.y = y;\n    }\n}","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport io.cucumber.datatable.DataTable;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\n\n\npublic class LocationSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private Shouty shouty;\n    \n    @Given(\"{word} has an account\")\n    public void person_has_account(String name) {\n        shouty.setLocation(name, new Coordinate(0, 0));\n    }\n    \n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String name, int xCoord, int yCoord) {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocations) {\n        for (PersonLocation personLocation: personLocations){\n            shouty.setLocation(personLocation.name, new Coordinate(personLocation.x, personLocation.y));\n        }\n    }\n    \n}\n","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\npublic class ShoutyHooks{\n \n    \n      @Before({\"@wip\", \"@NoEcho\"})\n      public void runBefore(){\n          System.out.println(\"Steps taken before each test\");\n      }\n    \n      @After(\"@wip\")  \n      public void runAfter(){\n          System.out.println(\"Steps taken after each test\");\n      }\n}"}