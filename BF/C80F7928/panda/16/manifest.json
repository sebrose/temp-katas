{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    return (int) Math.hypot(x - other.x, y - other.y);\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\", \"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.assertEquals;\n\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void lucy_is_at(String name, int xCoord, int yCoord) {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"{word} shouts\")\n    public void sean_shouts(String name) {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should hear {word}\")\n    public void receiver_should_hear_sender(String receiver, String sender) {\n        assertEquals(1, shouty.getShoutsHeardBy(receiver).size());\n    }\n    \n    @Then(\"{word} should not hear {word}\")\n    public void receiver_should_not_hear_sender(String receiver, String sender) {\n        assertEquals(0, shouty.getShoutsHeardBy(receiver).size());\n    }\n\n    @Then(\"{word} should hear nothing \")\n    public void receiver_should_hear_nothing(String receiver) {\n        assertEquals(emptyMap(), shouty.getShoutsHeardBy(receiver));\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing \n\n    Scenario: Multiple Shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy Should hear Sean","output":"JUnit version 4.12\n...Feature: Hearing a shout\n    Shouts have a range of approximately 1000 metres\n\n  Scenario: In range shout is heard # hear_shout.feature:5\n.    Given Lucy is at 0, 0           # ShoutSteps.lucy_is_at(String,int,int)\n    And Sean is at 0, 900           # ShoutSteps.lucy_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.sean_shouts(String)\n    Then Lucy should hear Sean      # ShoutSteps.receiver_should_hear_sender(String,String)\n\n  Scenario: Out of range shout is not heard # hear_shout.feature:11\n.    Given Lucy is at 0, 0                   # ShoutSteps.lucy_is_at(String,int,int)\n    And Sean is at 800, 800                 # ShoutSteps.lucy_is_at(String,int,int)\n    When Sean shouts                        # ShoutSteps.sean_shouts(String)\n    Then Lucy should hear nothing           # ShoutSteps.receiver_should_hear_sender(String,String)\n      java.lang.AssertionError: expected:<1> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_hear_sender(ShoutSteps.java:25)\n\tat ✽.Lucy should hear nothing(hear_shout.feature:15)\n\nE\n  Scenario: Multiple Shouters       # hear_shout.feature:17\n.    Given Lucy is at 0, 0           # ShoutSteps.lucy_is_at(String,int,int)\n    And Sean is at 0, 500           # ShoutSteps.lucy_is_at(String,int,int)\n    And Oscar is at 1100, 0         # ShoutSteps.lucy_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.sean_shouts(String)\n    And Oscar shouts                # ShoutSteps.sean_shouts(String)\n    Then Lucy should not hear Oscar # ShoutSteps.receiver_should_not_hear_sender(String,String)\n      java.lang.AssertionError: expected:<0> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_not_hear_sender(ShoutSteps.java:30)\n\tat ✽.Lucy should not hear Oscar(hear_shout.feature:23)\n\n    But Lucy Should hear Sean       # null\nEE\nFailed scenarios:\nhear_shout.feature:11 # Out of range shout is not heard\nhear_shout.feature:17 # Multiple Shouters\n\n3 Scenarios (2 failed, 1 passed)\n15 Steps (2 failed, 1 undefined, 12 passed)\n0m1.011s\n\njava.lang.AssertionError: expected:<1> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_hear_sender(ShoutSteps.java:25)\n\tat ✽.Lucy should hear nothing(hear_shout.feature:15)\n\njava.lang.AssertionError: expected:<0> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_not_hear_sender(ShoutSteps.java:30)\n\tat ✽.Lucy should not hear Oscar(hear_shout.feature:23)\n\n\nYou can implement missing steps with the snippets below:\n\n@Then(\"Lucy Should hear Sean\")\npublic void lucyShouldHearSean() {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n\nTime: 1.083\nThere were 3 failures:\n1) Out of range shout is not heard(Hearing a shout)\njava.lang.AssertionError: expected:<1> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_hear_sender(ShoutSteps.java:25)\n\tat ✽.Lucy should hear nothing(hear_shout.feature:15)\n2) Multiple Shouters(Hearing a shout)\njava.lang.AssertionError: expected:<0> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.receiver_should_not_hear_sender(ShoutSteps.java:30)\n\tat ✽.Lucy should not hear Oscar(hear_shout.feature:23)\n3) Multiple Shouters(Hearing a shout)\ncucumber.runtime.junit.UndefinedThrowable: The step \"Lucy Should hear Sean\" is undefined\n\nFAILURES!!!\nTests run: 6,  Failures: 3\n\nJun 05, 2018 4:37:18 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@25359ed8: startup date [Tue Jun 05 16:37:18 GMT 2018]; root of context hierarchy\nJun 05, 2018 4:37:18 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n"}