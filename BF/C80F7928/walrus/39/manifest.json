{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n\n    return (int) Math.hypot(x - other.x, y - other.y);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\", \"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\n\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n\n    @Autowired\n    private ShoutyHelper shouty;\n\n    @When(\"{word} shouts\")\n    public void person_shouts(String who) {\n        shouty.shout(who, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should not hear {word}\")\n    public void receiver_should_not_hear_sender(String receiver, String sender) {\n        assertFalse(shouty.getShoutsHeardBy(receiver).containsKey(sender));\n    }\n\n    @Then(\"{word} should hear {word}\")\n    public void person_should_hear_xyz(String receiver, String sender) {\n        if  (\"nothing\".equals(sender))\n            assertEquals(emptyMap(), shouty.getShoutsHeardBy(receiver));\n        else if (\"himself\".equals(sender) || \"herself\".equals(sender))\n            assertEquals(emptyMap(), shouty.getShoutsHeardBy(receiver));\n        else\n            assertTrue(shouty.getShoutsHeardBy(receiver).containsKey(sender));\n    }\n\n    @Given(\"{word} is a gold member status\")\n    public void mitchellIsAGoldMemberStatus(String person) {\n        shouty.enableGoldMember(person);\n    }\n\n\n    @Then(\"{word} should hear {int} shouts from {word}\")\n    public void lucyShouldHearShoutsFromSean(String listener, int count, String shouter) {\n        assertEquals(count, shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n    private static final int MESSAGE_RANGE = 1000;\n    private static final int GOLD_MESSAGE_RANGE = 2000;\n    private Map<String, Coordinate> locations = new HashMap<>();\n    private Map<String, Boolean> goldMembers = new HashMap<>();\n    private Map<String, List<String> > shouts = new HashMap<>();\n\n    public void enableGoldMember(String person) {\n        goldMembers.put(person, true);\n    }\n    public void disableGoldMember(String person) {\n        goldMembers.remove(person);\n    }\n\n    public void setLocation(String person, Coordinate location) {\n        locations.put(person, location);\n    }\n\n    public void shout(String shouter, String shout) {\n        if (!shouts.containsKey(shouter)) {\n            List<String> personsShouts = new ArrayList<String>();\n            shouts.put(shouter, personsShouts);\n        }\n\n        shouts.get(shouter).add(shout);\n    }\n\n    public Map<String, List<String> > getShoutsHeardBy(String listener) {\n        HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n        for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n            String shouter = entry.getKey();\n            List<String> personsShouts = entry.getValue();\n\n            Coordinate listenerLocation = locations.get(listener);\n            Coordinate shouterLocation = locations.get(shouter);\n\n            if (listenerLocation == null || shouterLocation == null) continue;\n\n            int distance = listenerLocation.distanceFrom(shouterLocation);\n\n            if ( (distance < MESSAGE_RANGE && !goldMembers.containsKey(listener)) ||\n               (distance <= GOLD_MESSAGE_RANGE && goldMembers.containsKey(shouter))\n            )\n                shoutsHeard.put(shouter, personsShouts);\n        }\n\n        return shoutsHeard;\n    }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(\n                new DataTableType(PersonLocation.class, (TableEntryTransformer<PersonLocation>) row -> {\n                    String name = row.get(\"name\");\n                    int x = Integer.parseInt(row.get(\"x\"));\n                    int y = Integer.parseInt(row.get(\"y\"));\n\n                    return new PersonLocation(name, x, y);\n                })\n        );\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"ShoutyHelper\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n  Shouts have a range of approximately 1000 metres\n\n  Scenario Outline: only hear in-range shouts\n    Given Lucy is at 0, 0\n    And Sean is at <shouters-location>\n    When Sean shouts\n    Then Lucy should hear <the-shouter>\n\n    Examples:\n      | shouters-location | the-shouter     |\n      | 0, 900            | Sean            |\n      | 800, 800          | nothing         |\n\n  Scenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n\n  Scenario: Multiple shouters should be heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should hear Oscar\n    And Lucy should hear Sean\n\n  Scenario: A shouter does not hear their own Shouty McShoutFace\n    When Lucy shouts\n    Then Lucy should not hear herself\n\n    When Stephanie shouts\n    Then Stephanie should not hear himself\n\n  Scenario: A shouter does not hear anything when they are a Gold Member\n    Given Lucy is at 0, 0\n    And Mitchell is at 0, 1\n    And Mitchell is a gold member status\n    When Lucy shouts\n    Then Mitchell should hear nothing\n\n\n  Scenario: Paid Shouty members get a limit of 2000 meters\n    Given Fred is a gold member status\n    And Fred is at 0, 0\n    And Lucy is at 1200, 1200\n    When Fred shouts\n    Then Lucy should hear Fred","output":"JUnit version 4.12\n..Feature: Hearing a shout\n  Shouts have a range of approximately 1000 metres\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:5\n    Given Lucy is at 0, 0\n    And Sean is at <shouters-location>\n    When Sean shouts\n    Then Lucy should hear <the-shouter>\n\n    Examples: \n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:13\n.    Given Lucy is at 0, 0                     # LocationSteps.person_is_at(String,int,int)\n    And Sean is at 0, 900                     # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear Sean                # ShoutSteps.person_should_hear_xyz(String,String)\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:14\n.    Given Lucy is at 0, 0                     # LocationSteps.person_is_at(String,int,int)\n    And Sean is at 800, 800                   # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear nothing             # ShoutSteps.person_should_hear_xyz(String,String)\n\n  Scenario: Multiple shouters       # hear_shout.feature:16\n.    Given Lucy is at 0, 0           # LocationSteps.person_is_at(String,int,int)\n    And Sean is at 0, 500           # LocationSteps.person_is_at(String,int,int)\n    And Oscar is at 1100, 0         # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                # ShoutSteps.person_shouts(String)\n    And Oscar shouts                # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear Oscar # ShoutSteps.receiver_should_not_hear_sender(String,String)\n    But Lucy should hear Sean       # ShoutSteps.person_should_hear_xyz(String,String)\n\n  Scenario: Multiple shouters should be heard # hear_shout.feature:25\n.    Given Lucy is at 0, 0                     # LocationSteps.person_is_at(String,int,int)\n    And Sean is at 0, 500                     # LocationSteps.person_is_at(String,int,int)\n    And Oscar is at 100, 0                    # LocationSteps.person_is_at(String,int,int)\n    When Sean shouts                          # ShoutSteps.person_shouts(String)\n    And Oscar shouts                          # ShoutSteps.person_shouts(String)\n    Then Lucy should hear Oscar               # ShoutSteps.person_should_hear_xyz(String,String)\n    And Lucy should hear Sean                 # ShoutSteps.person_should_hear_xyz(String,String)\n\n  Scenario: A shouter does not hear their own Shouty McShoutFace # hear_shout.feature:34\n.    When Lucy shouts                                             # ShoutSteps.person_shouts(String)\n    Then Lucy should not hear herself                            # ShoutSteps.receiver_should_not_hear_sender(String,String)\n    When Stephanie shouts                                        # ShoutSteps.person_shouts(String)\n    Then Stephanie should not hear himself                       # ShoutSteps.receiver_should_not_hear_sender(String,String)\n\n  Scenario: A shouter does not hear anything when they are a Gold Member # hear_shout.feature:41\n.    Given Lucy is at 0, 0                                                # LocationSteps.person_is_at(String,int,int)\n    And Mitchell is at 0, 1                                              # LocationSteps.person_is_at(String,int,int)\n    And Mitchell is a gold member status                                 # ShoutSteps.mitchellIsAGoldMemberStatus(String)\n    When Lucy shouts                                                     # ShoutSteps.person_shouts(String)\n    Then Mitchell should hear nothing                                    # ShoutSteps.person_should_hear_xyz(String,String)\n\n  Scenario: Paid Shouty members get a limit of 2000 meters # hear_shout.feature:49\n.    Given Fred is a gold member status                     # ShoutSteps.mitchellIsAGoldMemberStatus(String)\n    And Fred is at 0, 0                                    # LocationSteps.person_is_at(String,int,int)\n    And Lucy is at 1200, 1200                              # LocationSteps.person_is_at(String,int,int)\n    When Fred shouts                                       # ShoutSteps.person_shouts(String)\n    Then Lucy should hear Fred                             # ShoutSteps.person_should_hear_xyz(String,String)\n\n7 Scenarios (7 passed)\n36 Steps (36 passed)\n0m1.033s\n\n\nTime: 1.081\n\nOK (9 tests)\n\nJun 05, 2018 8:34:36 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@41ee392b: startup date [Tue Jun 05 20:34:36 GMT 2018]; root of context hierarchy\nJun 05, 2018 8:34:36 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nJun 05, 2018 8:34:37 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@41ee392b: startup date [Tue Jun 05 20:34:36 GMT 2018]; root of context hierarchy\n","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n\npublic class LocationSteps {\n    @Autowired\n    private ShoutyHelper shouty;\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String who, int xCoord, int yCoord) {\n        shouty.setLocation(who, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> blah) {\n\n        for (PersonLocation personLocation : blah) {\n            shouty.setLocation(personLocation.getName(), personLocation.getCoordinate());\n\n        }\n        // Write code here that turns the phrase above into concrete actions\n        // For automatic transformation, change DataTable to one of\n        // List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n        // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n        // Double, Byte Short, Long, BigInteger or BigDecimal.\n        //\n        // For other transformations you can register a DataTableType.\n    }\n}\n","PersonLocation.java":"public class PersonLocation {\n    private String name;\n    Coordinate coordinate;\n\n    public PersonLocation(String name, int x, int y) {\n        this.name = name;\n        coordinate = new Coordinate(x, y);\n    }\n    public Coordinate getCoordinate() {\n        return coordinate;\n    }\n\n    public void setCoordinate(Coordinate coordinate) {\n        this.coordinate = coordinate;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}","ShoutyHelper.java":"import org.springframework.stereotype.Component;\nimport org.springframework.context.annotation.Scope;\n\n@Component\n@Scope(\"cucumber-glue\")\npublic class ShoutyHelper extends Shouty {\n}"}