{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n    return (int)Math.hypot((x-other.x), (y-other.y));\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\", \"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport cucumber.api.PendingException;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\nimport java.util.List;\n\n\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String person, int xCoord, int yCoord) {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n    \n    @When(\"{word} shouts\")\n    public void person_shouts(String person) {\n        shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should hear {word}\")\n    public void person_should_hear_shouter(String person, String shouter) {\n        if (shouter.equals(\"nothing\")) {\n            assertEquals(emptyMap(), shouty.getShoutsHeardBy(person));\n        } else {\n            assertTrue(shouty.getShoutsHeardBy(person).containsKey(shouter));\n        }\n    }\n\n    \n    @Then(\"{word} should not hear {word}\")\n    public void person_should_not_hear_shouter(String person, String shouter) {\n        assertFalse(String.format(\"Heard the following: %s\", shouty.getShoutsHeardBy(person)), shouty.getShoutsHeardBy(person).containsKey(shouter));\n    }\n    \n\n    @Then(\"{word} should hear {int} shouts from {word}\")\n    public void person_should_hear_shouts_from_sean(String person, Integer count, String shouter) {\n        // Write code here that turns the phrase above into concrete actions\n        assertEquals(String.format(\"Heard the following: %s\", shouty.getShoutsHeardBy(person)), count, shouty.getShoutsHeardBy(person).get(shouter).size());\n    }\n\n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          if (!shouter.equals(listener)) {\n              int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n              if (distance < MESSAGE_RANGE) {\n                  shoutsHeard.put(shouter, personsShouts);\n              }\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(new DataTableType(PersonLocation.class,\n                                        (TableEntryTransformer<PersonLocation>) row -> {\n                                            String name = row.get(\"name\");\n                                            int x = Integer.parseInt(row.get(\"x\"));\n                                            int y = Integer.parseInt(row.get(\"y\"));\n                                            return new PersonLocation(name, x, y);\n                                        }));\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n  \n    Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n            | Seans-location | what-Lucy-hears |\n            | 0, 900         | Sean            |\n            | 800, 800       | nothing         |\n\n    Scenario: Multiple shouters\n        Given people are located at\n            | name  | x    | y    |\n            | Lucy  | 0    | 0    |\n            | Sean  | 0    | 500  |\n            | Oscar | 1100 | 0    |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n    Scenario: Shouter should not hear their own shouts\n        When Lucy shouts\n        And Lucy shouts\n        Then Lucy should not hear Lucy\n        \n    Scenario: Mulitple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean","output":"ShoutSteps.java:45: error: reference to assertEquals is ambiguous\n        assertEquals(String.format(\"Heard the following: %s\", shouty.getShoutsHeardBy(person)), count, shouty.getShoutsHeardBy(person).get(shouter).size());\n        ^\n  both method assertEquals(String,long,long) in Assert and method assertEquals(String,Object,Object) in Assert match\n1 error\n","PersonLocation.java":"class PersonLocation {\n    String name;\n    Coordinate coordinate;\n    \n    public PersonLocation(String name, int x, int y) {\n        this.name = name;\n        this.coordinate = new Coordinate(x, y);\n    }\n}","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport cucumber.api.PendingException;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\nimport java.util.List;\n\n\n\npublic class LocationSteps {\n    private final Shouty shouty = new Shouty();\n    \n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocations) {\n        for (PersonLocation personLocation : personLocations) {\n           shouty.setLocation(personLocation.name, personLocation.coordinate);\n        }\n    }\n    \n}"}