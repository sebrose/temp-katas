{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //return Math.abs(x - other.x);\n     // return (int) Math.sqrt((x-other.x)*(x-other.x) + (y-other.y)*(y-other.y));\n      return (int) Math.hypot(x-other.x, y-other.y);\n\n   //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin={\"pretty\", \"junit:/tmp/output\"}, snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport java.util.*;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;//.assertEquals;\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    //@Given(\"{word} is at {int}, {int}\")\n    //public void name_is_at(String name, int xCoord, int yCoord) {\n    //    shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    //}\n    \n    \n    @Given(\"{string} is at {int}, {int}\")\n    public void name_is_at(String name, int xCoord, int yCoord) {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    \n/*    \n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocationList) {\n        // Write code here that turns the phrase above into concrete actions\n        // For automatic transformation, change DataTable to one of\n        // List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n        // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n        // Double, Byte Short, Long, BigInteger or BigDecimal.\n        //\n        // For other transformations you can register a DataTableType.\n        //throw new PendingException();\n        \n        //Similiar to for (int i; i < 0; i++)\n        for (PersonLocation personLocation : personLocationList) {\n            shouty.setLocation(personLocation.getName(), new Coordinate(\n                Integer.parseInt(personLocation.getX()), Integer.parseInt(personLocation.getY())));\n        }\n    }\n*/\n\n    //@Given(\"Sean is at {int}, {int}\")\n    //public void sean_is_at(int xCoord, int yCoord) {\n    //    shouty.setLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n    //}\n\n    @When(\"{string} shouts\")\n    public void name_shouts(String name) {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n    \n    \n    //@When(\"Oscar shouts\")\n    //public void oscar_shouts() {\n    //    shouty.shout(\"Oscar\", ARBITRARY_MESSAGE);\n    //}\n\n    \n    @Then(\"Lucy should hear Sean\")\n    public void lucy_should_hear_sean() {\n        assertTrue(shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Sean\"));\n    }\n    \n    /*\n    @Then(\"Lucy should not hear Oscar\")\n    public void lucy_should_not_hear_oscar() {\n        assertFalse(shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Oscar\"));\n    }\n    */\n    \n    //@Then(\"Lucy should not hear Oscar\")\n    //public void lucy_should_not_hear_oscar() {\n    //    assertFalse(String.format(\"Heard the following: %s\", \n    //            shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Oscar\")));\n    //}\n\n    @Then(\"Lucy should hear nothing\")\n    public void lucy_should_hear_nothing() {\n        assertEquals(emptyMap(), shouty.getShoutsHeardBy(\"Lucy\"));\n    }\n    \n    /*\n    @Then(\"Lucy should not hear Lucy\")\n    public void lucy_should_not_hear_lucy() {\n        assertFalse(shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Lucy\"));\n    }\n    */\n    \n    @Then(\"{string} should not hear {string}\")\n    public void listener_should_not_hear_shouter(String listener, String shouter) {\n        assertFalse(shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n}","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          if (shouter.equals(listener))\n          { }\n          else\n          {\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    /*\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n    };\n    */\n    \n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(new DataTableType(PersonLocation.class, \n          (TableEntryTransformer<PersonLocation>) row -> {\n            String name = row.get(\"name\");\n            String x = row.get(\"x\");\n            String y = row.get(\"y\");\n            return new PersonLocation(name, x, y);\n        }));\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    #Scenario: In range shout is heard\n        #Given \"Lucy\" is at 0, 0\n        #And \"Sean\" is at 0, 900\n        #When \"Sean\" shouts\n        #Then Lucy should hear Sean\n\n      #Scenario: Out of range shout is not heard\n        #Given \"Lucy\" is at 0, 0\n        #And \"Sean\" is at 1800, 800\n        #When \"Sean\" shouts\n        #Then Lucy should hear nothing\n        \n      Scenario Outline: only hear in-range shouts\n        Given \"Lucy\" is at <Lucys-location>\n        And \"Sean\" is at <Seans-location>\n        When \"Sean\" shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: In-range\n          | Seans-location | what-Lucy-hears | Lucys-location |\n          | 0, 900         | Sean            | 0, 0           |\n          | 0, 400         | Sean            | 0, 0           |\n          \n        Examples: Out of-range\n          | Seans-location | what-Lucy-hears | Lucys-location |\n          | 900, 900       | nothing         | 0, 0           |\n          | 800, 800       | nothing         | 0, 0           |  \n        \n      #Scenario: Multiple shouters\n        #Given \"Lucy\" is at 0, 0\n        #And \"Sean\" is at 0, 500\n        #And \"Oscar\" is at 1100, 0\n        #When \"Sean\" shouts\n        #And \"Oscar\" shouts\n        #Then \"Lucy\" should not hear \"Oscar\"\n        #But Lucy should hear Sean\n        \n      Scenario: Multiple shouters\n        Given people are located at\n          | name  | x     | y     |\n          | Lucy  | 0     | 0     |\n          | Sean  | 0     | 500   |\n          | Oscar | 1100  | 0     |\n        When \"Sean\" shouts\n        And \"Oscar\" shouts\n        Then \"Lucy\" should not hear \"Oscar\"\n        But Lucy should hear Sean  \n        \n        \n      Scenario: Shouters should not hear there own shout\n        When \"Lucy\" shouts\n        Then \"Lucy\" should not hear \"Lucy\"\n","output":"JUnit version 4.12\n...Feature: Hearing a shout\n    Shouts have a range of approximately 1000 metres\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:17\n    Given \"Lucy\" is at <Lucys-location>\n    And \"Sean\" is at <Seans-location>\n    When \"Sean\" shouts\n    Then Lucy should hear <what-Lucy-hears>\n\n    Examples: In-range\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:25\n.    Given \"Lucy\" is at 0, 0                   # ShoutSteps.name_is_at(String,int,int)\n    And \"Sean\" is at 0, 900                   # ShoutSteps.name_is_at(String,int,int)\n    When \"Sean\" shouts                        # ShoutSteps.name_shouts(String)\n    Then Lucy should hear Sean                # ShoutSteps.lucy_should_hear_sean()\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:26\n.    Given \"Lucy\" is at 0, 0                   # ShoutSteps.name_is_at(String,int,int)\n    And \"Sean\" is at 0, 400                   # ShoutSteps.name_is_at(String,int,int)\n    When \"Sean\" shouts                        # ShoutSteps.name_shouts(String)\n    Then Lucy should hear Sean                # ShoutSteps.lucy_should_hear_sean()\n\n    Examples: Out of-range\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:30\n.    Given \"Lucy\" is at 0, 0                   # ShoutSteps.name_is_at(String,int,int)\n    And \"Sean\" is at 900, 900                 # ShoutSteps.name_is_at(String,int,int)\n    When \"Sean\" shouts                        # ShoutSteps.name_shouts(String)\n    Then Lucy should hear nothing             # ShoutSteps.lucy_should_hear_nothing()\n\n  Scenario Outline: only hear in-range shouts # hear_shout.feature:31\n.    Given \"Lucy\" is at 0, 0                   # ShoutSteps.name_is_at(String,int,int)\n    And \"Sean\" is at 800, 800                 # ShoutSteps.name_is_at(String,int,int)\n    When \"Sean\" shouts                        # ShoutSteps.name_shouts(String)\n    Then Lucy should hear nothing             # ShoutSteps.lucy_should_hear_nothing()\n\n  Scenario: Multiple shouters           # hear_shout.feature:42\n.    Given people are located at         # LocationSteps.peopleAreLocatedAt(List<PersonLocation>)\n    When \"Sean\" shouts                  # ShoutSteps.name_shouts(String)\n    And \"Oscar\" shouts                  # ShoutSteps.name_shouts(String)\n    Then \"Lucy\" should not hear \"Oscar\" # ShoutSteps.listener_should_not_hear_shouter(String,String)\n      java.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:94)\n\tat ✽.\"Lucy\" should not hear \"Oscar\"(hear_shout.feature:50)\n\n    But Lucy should hear Sean           # ShoutSteps.lucy_should_hear_sean()\nE\n  Scenario: Shouters should not hear there own shout # hear_shout.feature:54\n.    When \"Lucy\" shouts                               # ShoutSteps.name_shouts(String)\n    Then \"Lucy\" should not hear \"Lucy\"               # ShoutSteps.listener_should_not_hear_shouter(String,String)\n\nFailed scenarios:\nhear_shout.feature:42 # Multiple shouters\n\n6 Scenarios (1 failed, 5 passed)\n23 Steps (1 failed, 1 skipped, 21 passed)\n0m0.999s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:94)\n\tat ✽.\"Lucy\" should not hear \"Oscar\"(hear_shout.feature:50)\n\n\nTime: 1.053\nThere was 1 failure:\n1) Multiple shouters(Hearing a shout)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:31)\n\tat ShoutSteps.listener_should_not_hear_shouter(ShoutSteps.java:94)\n\tat ✽.\"Lucy\" should not hear \"Oscar\"(hear_shout.feature:50)\n\nFAILURES!!!\nTests run: 9,  Failures: 1\n\nJun 05, 2018 9:01:09 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@52aa2946: startup date [Tue Jun 05 21:01:09 GMT 2018]; root of context hierarchy\nJun 05, 2018 9:01:09 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","PersonLocation.java":"public class PersonLocation {\n    \n    public PersonLocation(String inName, String inX, String inY)\n    {\n        name = inName;\n        x = inX;\n        y = inY;\n    }\n    \n    private String name;\n    private String x;\n    private String y;\n    \n    public String getName()\n    {\n        return name;\n    }\n    \n    public void setName(String inName)\n    {\n         name = inName;\n    }\n    \n    public String getX()\n    {\n        return x;   \n    }\n    \n    public void setX(String inX)\n    {\n        x = inX;   \n    }\n    \n    public String getY()\n    {\n        return y;   \n    }\n    \n    public void setY(String inY)\n    {\n        y = inY;   \n    }\n}","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n//import cucumber.api.java.en.Autowired;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.*;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;//.assertEquals;\n\npublic class LocationSteps {\n    \n    //private final Shouty shouty = new Shouty();\n    @Autowired\n    private Shouty shouty;\n    \n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocationList) {\n        // Write code here that turns the phrase above into concrete actions\n        // For automatic transformation, change DataTable to one of\n        // List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n        // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n        // Double, Byte Short, Long, BigInteger or BigDecimal.\n        //\n        // For other transformations you can register a DataTableType.\n        //throw new PendingException();\n        \n        //Similiar to for (int i; i < 0; i++)\n        for (PersonLocation personLocation : personLocationList) {\n            shouty.setLocation(personLocation.getName(), new Coordinate(\n                Integer.parseInt(personLocation.getX()), Integer.parseInt(personLocation.getY())));\n        }\n    }\n}"}