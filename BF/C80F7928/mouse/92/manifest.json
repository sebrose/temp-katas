{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    double xDiff = (double) Math.pow(x - other.x, 2);\n    double yDiff = (double) Math.pow(y - other.y, 2);\n      \n    return (int) Math.sqrt(xDiff + yDiff);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin=\"junit:/tmp/output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport cucumber.api.PendingException;\nimport io.cucumber.datatable.DataTable;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\nimport java.util.*;\nimport java.util.Collections.*;\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n    \n    @When(\"{word} shouts\")\n    public void individual_shouts(String individual) {\n        shouty.shout(individual, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} hears {word}\")\n    public void should_hear(String shoutee, String shouter) {\n        Map<String, List<String>> shoutsHeardByShouter = shouty.getShoutsHeardBy(shoutee);\n        \n        if(shouter.equals(\"nobody\"))\n            assertTrue(shoutsHeardByShouter.size() == 0);\n        else {\n            assertTrue(shoutsHeardByShouter.get(shouter) != null);\n            assertTrue(shoutsHeardByShouter.get(shouter).size() > 0);\n        }\n    }\n    \n    @Then(\"{word} shouldn't hear {word}\")\n    public void shouldTHear(String shoutee, String shouter) {\n        // Write code here that turns the phrase above into concrete actions\n        Map<String, List<String>> shoutsByShouter = shouty.getShoutsHeardBy(shoutee);\n        assertEquals(null, shoutsByShouter.get(shouter));\n    }\n    \n    @Then(\"{word} hears {word} 1 time\")\n    public void hearsOneShout( String listener, \n                               String shouter) {\n        hearsNumShouts(listener, shouter, 1);\n    }\n    \n    @Then(\"{word} hears {word} {int} times\")\n    public void hearsNumShouts( String listener, \n                                String shouter,\n                                Integer shoutCount) {\n        Map<String, List<String>> shoutsHeardByListener = shouty.getShoutsHeardBy(listener);\n        assertTrue(shoutsHeardByListener.get(shouter) != null);\n        assertTrue(shoutCount == shoutsHeardByListener.get(shouter).size());\n    }\n}\n\n","Shouty.java":"import java.util.*;\nimport java.util.Collections.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          \n          if(shouter.equals(listener))\n              continue;\n          \n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(\n            new DataTableType(\n                PersonLocation.class,\n                (TableEntryTransformer<PersonLocation>) row -> {\n                    return new PersonLocation(row.get(\"name\"),\n                                              Integer.parseInt(row.get(\"x\")),\n                                              Integer.parseInt(row.get(\"y\")));\n                }\n            )\n        );\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shouts are heard\n        Given people located at\n        |   name    |   x   |   y   |\n        |   Lucy    |   0   |   0   |\n        |   Sean    |   0   |   500 |\n        |   Oscar   |   800 |   800 |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy shouldn't hear Oscar\n        But Lucy hears Sean 1 time\n        \n    Scenario: Don't talk to yourself\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy shouldn't hear Lucy\n        \n    Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy hears Sean 2 times","output":"LocationSteps.java:14: error: cannot find symbol\n    public void peopleLocatedAt(List<PersonLocation> locations) {\n                                ^\n  symbol:   class List\n  location: class LocationSteps\n1 error\n","PersonLocation.java":"public class PersonLocation {\n    private final String name;\n    private final int x, y;\n    \n    public PersonLocation(String name, int x, int y) {\n        this.name = name;\n        this.x = x;\n        this.y = y;\n    }\n    \n    public String name() {\n        return name;\n    }\n    \n    public int x() {\n        return x;\n    }\n    \n    public int y() {\n        return y;\n    }\n}","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n\npublic class LocationSteps {\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String individual, int xCoord, int yCoord) {\n        shouty.setLocation(individual, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"people located at\")\n    public void peopleLocatedAt(List<PersonLocation> locations) {\n        for (PersonLocation location : locations) {\n            person_is_at(location.name(),\n                         location.x(),\n                         location.y());\n        }\n    }\n}"}