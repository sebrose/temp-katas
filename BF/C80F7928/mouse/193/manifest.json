{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public Coordinate(Coordinate copyFrom) {\n    x = copyFrom.x;\n    y = copyFrom.y;\n  }\n    \n  public int x() {\n    return x;\n  }\n    \n  public int y() {\n    return y;  \n  }\n    \n  public void updateFrom(Coordinate other) {\n    this.x = other.x;\n    this.y = other.y;\n  }\n    \n  public int distanceFrom(Coordinate other){\n    double xDiff = (double) Math.pow(x - other.x, 2);\n    double yDiff = (double) Math.pow(y - other.y, 2);\n      \n    return (int) Math.sqrt(xDiff + yDiff);\n  }\n   \n  @Override\n  public String toString() {\n    return String.format(\"%d, %d\", x, y);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n//@CucumberOptions(tags={\"@test\"}, strict=true, monochrome=true, plugin=\"junit:/tmp/output\", snippets=SnippetType.CAMELCASE)\n@CucumberOptions(strict=true, monochrome=true, plugin=\"junit:/tmp/output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport cucumber.api.PendingException;\nimport io.cucumber.datatable.DataTable;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.*;\nimport java.util.*;\nimport java.util.Collections.*;\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private ShoutyHelper shouty;\n    \n    @When(\"{word} shouts\")\n    public void individual_shouts(String individual) {\n        shouty.shout(individual, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} hears {word}\")\n    public void should_hear(String shoutee, String shouter) {\n        Map<String, List<String>> shoutsHeardByShouter = shouty.getShoutsHeardBy(shoutee);\n        \n        if(shouter.equals(\"nobody\"))\n            assertTrue(shoutsHeardByShouter.size() == 0);\n        else {\n            assertTrue(shoutsHeardByShouter.get(shouter) != null);\n            assertTrue(shoutsHeardByShouter.get(shouter).size() > 0);\n        }\n    }\n    \n    @Then(\"{word} shouldn't hear {word}\")\n    public void shouldTHear(String shoutee, String shouter) {\n        // Write code here that turns the phrase above into concrete actions\n        Map<String, List<String>> shoutsByShouter = shouty.getShoutsHeardBy(shoutee);\n        assertEquals(null, shoutsByShouter.get(shouter));\n    }\n    \n    @Then(\"{word} hears {word} 1 time\")\n    public void hearsOneShout( String listener, \n                               String shouter) {\n        hearsNumShouts(listener, shouter, 1);\n    }\n    \n    @Then(\"{word} hears {word} {int} times\")\n    public void hearsNumShouts( String listener, \n                                String shouter,\n                                Integer shoutCount) {\n        Map<String, List<String>> shoutsHeardByListener = shouty.getShoutsHeardBy(listener);\n        \n        if (shoutCount == 0) {\n            assertTrue(shoutsHeardByListener.get(shouter) == null);\n            return;\n        }\n     \n        List<String> shoutsHeardFromShouter = shoutsHeardByListener.get(shouter);\n                           \n        assertTrue(shoutsHeardFromShouter != null);\n        assertTrue(shoutCount == shoutsHeardFromShouter.size());\n    }\n}\n\n","Shouty.java":"import java.util.*;\nimport java.util.Collections.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, PersonInformation> people = new HashMap<String, PersonInformation>();\n  private Map<String, List<Pair<String, Coordinate>>> shouts = \n    new HashMap<String, List<Pair<String, Coordinate>>>();\n\n  public void enrollPerson(String person, Coordinate location) {\n    people.put(person, new PersonInformation(person, location));   \n  }\n    \n  public void setLocation(String person, Coordinate location) {\n    if (!(people.containsKey(person))) {\n        enrollPerson(person, location);\n        return;\n    }\n      \n    people.get(person).updateLocation(location);\n  }\n\n  public void shout(String shouter, String shout) {\n      Coordinate location = people.get(shouter).location();\n      \n      if (!shouts.containsKey(shouter)) {\n          List<Pair<String, Coordinate>> personsShouts = \n              new ArrayList<Pair<String, Coordinate>>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(new Pair<String, Coordinate>(shout, new Coordinate(location)));\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n      Coordinate listenerLocation = people.get(listener).location();\n      \n      for (Map.Entry<String, List<Pair<String, Coordinate>>> entry : shouts.entrySet()) {\n          PersonInformation shouter = people.get(entry.getKey());\n          \n          if(shouter.name().equals(listener))\n              continue;\n          \n          List<Pair<String, Coordinate>> personsShouts = entry.getValue();\n          List<String> shoutsHeardFromThisShouter = new ArrayList<String>();\n          System.out.println(shouter);\n          \n          int voiceStrength = shouter.voice();\n \n          for (Pair<String, Coordinate> shout : personsShouts) {\n              int distance = listenerLocation.distanceFrom(shout.b());\n          \n              if (distance < voiceStrength)\n                  shoutsHeardFromThisShouter.add(shout.a());\n          }\n          \n          if (shoutsHeardFromThisShouter.size() > 0)\n            shoutsHeard.put(shouter.name(), shoutsHeardFromThisShouter);\n      }\n\n      return shoutsHeard;\n  }\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(\n            new DataTableType(\n                PersonInformation.class,\n                (TableEntryTransformer<PersonInformation>) row -> {\n                    System.out.println(row);\n                    \n                    return new PersonInformation(row.get(\"name\"),\n                                                Integer.parseInt(row.get(\"x\")),\n                                                Integer.parseInt(row.get(\"y\")),\n                                                Integer.parseInt(row.get(\"voice\")));\n                }\n            )\n        );\n        \n        typeRegistry.defineParameterType(\n            new ParameterType<>(\n                \"coord\",\n                \"(\\\\d+),(\\\\d+)\",\n                Coordinate.class,\n                (CaptureGroupTransformer<Coordinate>) groups ->\n                    new Coordinate(parseInt(groups[0]), parseInt(groups[1]))\n            )\n        );\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"ShoutyHelper\" autowire-candidate=\"true\" scope=\"cucumber-glue\"/>\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n    Shouts have a range of approximately 1000 metres\n\n    Background:\n        Given   people are\n        |   name    |   x   |   y       |   voice   |\n        |   Sean    |   0   |   500     |   1000    |\n        |   Oscar   |   800 |   800     |   1000    |\n        |   Lucy    |   0   |   0       |   1000    |\n        |   Mouse   |   100 |   100     |   50      |\n        |   Ogre    |   1500|   1500    |   5000    |\n        \n    Scenario Outline: In range shouts are heard\n        When    <shouter> shouts\n        Then    Lucy hears <shouter> <times-heard> times\n        \n        Examples: Shouter and times heard\n        |   shouter |   times-heard |\n        |   Sean    |   1           |\n        |   Oscar   |   0           |\n        \n    Scenario: Don't talk to yourself\n        When    Lucy shouts\n        Then    Lucy hears Lucy 0 times\n        \n    Scenario: Multiple shouts from one person\n        When    Sean shouts\n        And     Sean shouts\n        Then    Lucy hears Sean 2 times\n        \n    Scenario: Shouter moves closer\n        When    Oscar shouts\n        And     Oscar moves to 0,900\n        And     Oscar shouts\n        Then    Lucy hears Oscar 1 time\n        \n    Scenario: Shouter moves away after shouting\n        When    Sean shouts\n        And     Sean moves to 0,5000\n        Then    Lucy hears Sean 1 time\n        \n    Scenario: Listener moves closer\n        When    Oscar shouts\n        And     Lucy moves to 700,700\n        Then    Lucy hears Oscar 1 time\n        \n    Scenario: Listener moves but not close enough\n        When    Oscar shouts\n        And     Lucy moves to 50,50\n        Then    Lucy hears Oscar 0 times\n        \n    Scenario: Quiet person isn't heard\n        When    Mouse shouts\n        Then    Lucy hears Mouse 0 times\n        \n    Scenario: Loud person is heard\n        When    Ogre shouts\n        Then    Lucy hears Ogre 1 time","output":"JUnit version 4.12\n....{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Sean\nLocation: 0, 500\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Oscar\nLocation: 800, 800\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Sean\nLocation: 0, 500\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Oscar\nLocation: 0, 900\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Sean\nLocation: 0, 5000\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Oscar\nLocation: 800, 800\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Oscar\nLocation: 800, 800\nVoice: 1000\n\n.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Mouse\nLocation: 100, 100\nVoice: 1000\n\nE.{name=Sean, x=0, y=500, voice=1000}\nGot here\n{name=Oscar, x=800, y=800, voice=1000}\nGot here\n{name=Lucy, x=0, y=0, voice=1000}\nGot here\n{name=Mouse, x=100, y=100, voice=50}\nGot here\n{name=Ogre, x=1500, y=1500, voice=5000}\nGot here\nName: Ogre\nLocation: 1500, 1500\nVoice: 1000\n\nE\nFailed scenarios:\nhear_shout.feature:52 # Quiet person isn't heard\nhear_shout.feature:56 # Loud person is heard\n\n10 Scenarios (2 failed, 8 passed)\n36 Steps (2 failed, 34 passed)\n0m1.020s\n\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.hearsNumShouts(ShoutSteps.java:56)\n\tat ✽.Lucy hears Mouse 0 times(hear_shout.feature:54)\n\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.hearsNumShouts(ShoutSteps.java:62)\n\tat ShoutSteps.hearsOneShout(ShoutSteps.java:46)\n\tat ✽.Lucy hears Ogre 1 time(hear_shout.feature:58)\n\n\nTime: 1.073\nThere were 2 failures:\n1) Quiet person isn't heard(Hearing a shout)\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.hearsNumShouts(ShoutSteps.java:56)\n\tat ✽.Lucy hears Mouse 0 times(hear_shout.feature:54)\n2) Loud person is heard(Hearing a shout)\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat ShoutSteps.hearsNumShouts(ShoutSteps.java:62)\n\tat ShoutSteps.hearsOneShout(ShoutSteps.java:46)\n\tat ✽.Lucy hears Ogre 1 time(hear_shout.feature:58)\n\nFAILURES!!!\nTests run: 13,  Failures: 2\n\nJun 05, 2018 8:51:06 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@525f1e4e: startup date [Tue Jun 05 20:51:06 GMT 2018]; root of context hierarchy\nJun 05, 2018 8:51:06 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nJun 05, 2018 8:51:07 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@525f1e4e: startup date [Tue Jun 05 20:51:06 GMT 2018]; root of context hierarchy\n","LocationSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.*;\nimport java.util.Collections.*;\n\npublic class LocationSteps {\n    @Autowired\n    private ShoutyHelper shouty;\n\n    @Given(\"{word} is at {coord}\")\n    public void person_is_at(String individual, Coordinate coord) {\n        shouty.setLocation(individual, coord);\n    }\n\n    @Given(\"people are\")\n    public void peopleLocatedAt(List<PersonInformation> people) {\n        for (PersonInformation person : people) {\n            person_is_at(person.name(), person.location());\n        }\n    }\n    \n    @When(\"{word} moves to {coord}\")\n    public void personMovesTo(String individual, Coordinate coord) {\n        person_is_at(individual, coord);\n    }\n}","ShoutyHelper.java":"import org.springframework.stereotype.Component;\nimport org.springframework.context.annotation.Scope;\n\n@Component\n@Scope(\"cucumber-glue\")\npublic class ShoutyHelper extends Shouty {}","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\npublic class ShoutyHooks {\n/*\n    @Before(order=2)\n    public void beforeHook() {\n        System.out.println(\"Marco...\");\n    }    \n    \n    @Before(order=1)\n    public void anotherBeforeHook() {\n        System.out.println(\"Heads\");   \n    }\n    \n    @After(order=1)\n    public void afterHook() {\n        System.out.println(\"...Polo\");   \n    }\n    \n    @After(order=2)\n    public void anotherAfterHook() {\n        System.out.println(\"Tails\");   \n    }\n*/\n}","Pair.java":"public class Pair<T1,T2> {\n    private final T1 a;\n    private final T2 b;\n    \n    public Pair(T1 a, T2 b) {\n        this.a = a;\n        this.b = b;\n    }\n    \n    public T1 a() {\n        return a;    \n    }\n    \n    public T2 b() {\n        return b;    \n    }\n    \n    @Override\n    public String toString() {\n        return String.format(\"Pair: {%s, %s}\", a, b);    \n    }\n}","PersonInformation.java":"public class PersonInformation {\n    private final String name;\n    private final Coordinate coord;\n    private int voice;\n    \n    private final static int DEFAULT_VOICE = 1000;\n    \n    public PersonInformation(String name, Coordinate coordinate, int voice) {\n        this.name = name;\n        this.coord = new Coordinate(coordinate);\n        this.voice = voice;\n    }\n\n    public PersonInformation(String name, int x, int y) {\n        this(name, new Coordinate(x, y), DEFAULT_VOICE);\n    }\n\n    public PersonInformation(String name, int x, int y, int voice) {\n        this(name, new Coordinate(x, y), voice);\n        System.out.println(\"Got here\");\n        \n    }\n    \n    public PersonInformation(String name, Coordinate coordinate) {\n        this(name, new Coordinate(coordinate), DEFAULT_VOICE);\n    }\n    \n    @Override\n    public String toString() {\n        return String.format(\"Name: %s\\nLocation: %s\\nVoice: %d\\n\",\n            this.name, this.coord, this.voice);\n    }\n    \n    public String name() {\n        return name;\n    }\n    \n    public Coordinate location() {\n        return coord;\n    }\n    \n    public void updateLocation(Coordinate coordinate) {\n        this.coord.updateFrom(coordinate);    \n    }\n\n    public int voice() {\n        return voice;    \n    }\n    \n    public void updateVoice(int voice) {\n        this.voice = voice;    \n    }\n}"}