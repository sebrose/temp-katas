{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          // TODO: actually calculate distance beteen the coordinates.\n          //       e.g. return Math.Abs(xCoord - other.xCoord);\n            \n          int dx = xCoord - other.xCoord;\n          int dy = yCoord - other.yCoord;\n            \n          return (int)Math.Sqrt((dx*dx)+(dy*dy));\n\n          //return 0;\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(300, 400);\n            Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n    \n  Scenario Outline: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    Examples: some simple examples\n    | Seans-location | what-Lucy-hears |\n    | 0, 900         | Sean            |\n    | 800, 800       | nothing         |\n    \n   Scenario: Multiple shouters\n    Given people are located at\n        | Name | X   | Y  |\n        | Lucy | 0   | 0  |\n        | Sean | 0   | 500|\n        |Oscar | 1100| 0  |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n   Scenario: Shouters should not hear their own shouts\n    Given Lucy is at 0, 0\n    When Lucy shouts\n    Then Lucy should hear nothing\n    \n   Scenario: Multiple shouts from one person\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean    ","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\nusing System.Collections.Generic;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (\\d*), (\\d*)\")]\n        public void GivenSomebodyAt(string name, int x, int y)\n        {\n            shouty.SetLocation(name, new Coordinate(x, y));\n        }\n        \n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            var locations=table.CreateSet<Location>();\n            \n            foreach (var location in locations)\n            {\n                shouty.SetLocation(location.Name, new Coordinate(location.X, location.Y));\n            }\n        }\n\n        [When(@\"(Sean|Oscar|Lucy) shouts\")]\n        public void WhenSomebodyShouts(string name)\n        {\n            shouty.Shout(name, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"Lucy should not hear Oscar\")]\n        public void ThenLucyShouldNotHearOscar()\n        {\n             Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"Lucy should hear 2 shouts from Sean\")]\n        public void ThenLucyShouldHear2ShoutsFromSean()\n        {\n             Assert.AreEqual(2, shouty.GetShoutsHeardBy(\"Lucy\")[\"Sean\"].Count);\n        }\n        \n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                var personsShouts = shout.Value;\n                \n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE && shouter!=listenerName)\n                    shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\nGiven people are located at\n  --- table step argument ---\n  | Name  | X    | Y   |\n  | Lucy  | 0    | 0   |\n  | Sean  | 0    | 500 |\n  | Oscar | 1100 | 0   |\n-> binding error: Ambiguous step definitions found for step 'Given people are located at': LocationSteps.GivenPeopleAreLocatedAt(Table), ShoutSteps.GivenPeopleAreLocatedAt(Table)\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Oscar shouts\n-> skipped because of previous errors\nThen Lucy should not hear Oscar\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should not hear Oscar': LocationSteps.ThenLucyShouldNotHearOscar(), ShoutSteps.ThenLucyShouldNotHearOscar()\nBut Lucy should hear Sean\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear Sean': LocationSteps.ThenLucyShouldHearSean(), ShoutSteps.ThenLucyShouldHearSean()\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\nGiven Lucy is at 0, 0\n-> binding error: Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nAnd Sean is at 0, 500\n-> binding error: Ambiguous step definitions found for step 'Given Sean is at 0, 500': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nWhen Sean shouts\n-> skipped because of previous errors\nAnd Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear 2 shouts from Sean\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear 2 shouts from Sean': LocationSteps.ThenLucyShouldHear2ShoutsFromSean(), ShoutSteps.ThenLucyShouldHear2ShoutsFromSean()\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard(\"0, 900\",\"Sean\",null)\nGiven Lucy is at 0, 0\n-> binding error: Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nAnd Sean is at 0, 900\n-> binding error: Ambiguous step definitions found for step 'Given Sean is at 0, 900': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear Sean\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear Sean': LocationSteps.ThenLucyShouldHearSean(), ShoutSteps.ThenLucyShouldHearSean()\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard(\"800, 800\",\"nothing\",null)\nGiven Lucy is at 0, 0\n-> binding error: Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nAnd Sean is at 800, 800\n-> binding error: Ambiguous step definitions found for step 'Given Sean is at 800, 800': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nWhen Sean shouts\n-> skipped because of previous errors\nThen Lucy should hear nothing\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear nothing': LocationSteps.ThenLucyShouldHearNothing(), ShoutSteps.ThenLucyShouldHearNothing()\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nGiven Lucy is at 0, 0\n-> binding error: Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\nWhen Lucy shouts\n-> skipped because of previous errors\nThen Lucy should hear nothing\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear nothing': LocationSteps.ThenLucyShouldHearNothing(), ShoutSteps.ThenLucyShouldHearNothing()\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found for step 'Given people are located at': LocationSteps.GivenPeopleAreLocatedAt(Table), ShoutSteps.GivenPeopleAreLocatedAt(Table)\n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetStepMatch (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0003f] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00033] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <53be748087b146898cbdb0906918ec9c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters () [0x00116] in <53be748087b146898cbdb0906918ec9c>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n2) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetStepMatch (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0003f] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00033] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <53be748087b146898cbdb0906918ec9c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson () [0x00086] in <53be748087b146898cbdb0906918ec9c>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n3) Error : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard(\"0, 900\",\"Sean\",null)\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetStepMatch (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0003f] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00033] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <53be748087b146898cbdb0906918ec9c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard (System.String seans_Location, System.String what_Lucy_Hears, System.String[] exampleTags) [0x0007b] in <53be748087b146898cbdb0906918ec9c>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n4) Error : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard(\"800, 800\",\"nothing\",null)\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found for step 'Given Lucy is at 0, 0': LocationSteps.GivenSomebodyAt(String, Int32, Int32), ShoutSteps.GivenSomebodyAt(String, Int32, Int32)\n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetStepMatch (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0003f] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00033] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <53be748087b146898cbdb0906918ec9c>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard (System.String seans_Location, System.String what_Lucy_Hears, System.String[] exampleTags) [0x0007b] in <53be748087b146898cbdb0906918ec9c>:0 \n  at (wrapper managed-to-\noutput truncated by cyber-dojo","Location.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Location\n    {\n        public string Name { get; set; }\n        public int X { get; set; }\n        public int Y { get; set; }\n    }\n}\n","LocationSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing TechTalk.SpecFlow.Assist;\nusing Shouty;\nusing System.Collections.Generic;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (\\d*), (\\d*)\")]\n        public void GivenSomebodyAt(string name, int x, int y)\n        {\n            shouty.SetLocation(name, new Coordinate(x, y));\n        }\n        \n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            var locations=table.CreateSet<Location>();\n            \n            foreach (var location in locations)\n            {\n                shouty.SetLocation(location.Name, new Coordinate(location.X, location.Y));\n            }\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"Lucy should not hear Oscar\")]\n        public void ThenLucyShouldNotHearOscar()\n        {\n             Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"Lucy should hear 2 shouts from Sean\")]\n        public void ThenLucyShouldHear2ShoutsFromSean()\n        {\n             Assert.AreEqual(2, shouty.GetShoutsHeardBy(\"Lucy\")[\"Sean\"].Count);\n        }\n        \n    }\n}\n"}