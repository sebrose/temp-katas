{"README":"This Cucumber environment is bundled with:\n- PicoContainer DI framework\n- JMock2\n- Mockito\n","Hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","HikerStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\n\npublic class HikerStepDef {\n\n    private int answer;\n\n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.12\n....EE\nFailed scenarios:\nHiker.feature:4 # Scenario: hitch-hiker playing scrabble in the past\n\n1 Scenarios (1 failed)\n3 Steps (1 failed, 2 passed)\n0m0.240s\n\njava.lang.AssertionError: expected:<42> but was:<54>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat HikerStepDef.theScoreIs(HikerStepDef.java:20)\n\tat ✽.Then the score is 42(Hiker.feature:7)\n\n\nTime: 0.52\nThere were 2 failures:\n1) Then the score is 42(Scenario: hitch-hiker playing scrabble in the past)\njava.lang.AssertionError: expected:<42> but was:<54>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat HikerStepDef.theScoreIs(HikerStepDef.java:20)\n\tat ✽.Then the score is 42(Hiker.feature:7)\n2) Scenario: hitch-hiker playing scrabble in the past\njava.lang.AssertionError: expected:<42> but was:<54>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat HikerStepDef.theScoreIs(HikerStepDef.java:20)\n\tat ✽.Then the score is 42(Hiker.feature:7)\n\nFAILURES!!!\nTests run: 4,  Failures: 2\n\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n"}