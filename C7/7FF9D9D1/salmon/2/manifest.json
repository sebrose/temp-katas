{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n//         TODO: actually calculate distance. I think we need to use pythagoras' theorem?\n            return 0;\n\n//            int xDiff = xCoord - other.xCoord;\n//            int yDiff = yCoord - other.yCoord;\n\n//            return (int) Math.Sqrt(Math.Pow(xDiff, 2) + Math.Pow(yDiff, 2));\n\n        }\n    }\n}","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(1000, 0);\n            Assert.AreEqual(1000, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 1100\n    When Sean shouts\n    Then Lucy should hear nothing\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"Lucy is at (.*), (.*)\")]\n        public void GivenLucyIsAt(int xCoord, int yCoord)\n        {\n            shouty.SetLocation(\"Lucy\", new Coordinate(xCoord, yCoord));\n        }\n\n        [Given(@\"Sean is at (.*), (.*)\")]\n        public void GivenSeanIsAt(int xCoord, int yCoord)\n        {\n            shouty.SetLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n        }\n\n        [When(@\"Sean shouts\")]\n        public void WhenSeanShouts()\n        {\n            shouty.Shout(\"Sean\", ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.AreEqual(1, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetMessagesHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, string> messagesByPerson = new Dictionary<string, string>();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson.Add(personName, coordinate);\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            messagesByPerson.Add(shouterName, message);\n        }\n\n        public IDictionary<string, string> GetMessagesHeardBy(string listenerName)\n        {\n            var result = new Dictionary<string, string>();\n\n            foreach (var shout in messagesByPerson)\n            {\n                var shouter = shout.Key;\n                var message = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE)\n                    result.Add(shouter, message);\n            }\n\n            return result;\n        }\n    }\n}","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","output":"WARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nCompilation succeeded - 2 warning(s)\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n.F..Given Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenSeanIsAt(0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSeanShouts() (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenLucyShouldHearSean() (0.0s)\n.Given Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(0, 0) (0.0s)\nAnd Sean is at 0, 1100\n-> done: ShoutSteps.GivenSeanIsAt(0, 1100) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSeanShouts() (0.0s)\nThen Lucy should hear nothing\n-> error:   Expected: 0\n  But was:  1\n\nF\nTests run: 4, Errors: 0, Failures: 2, Inconclusive: 0, Time: 0.338141 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\nErrors and Failures:\n1) Test Failure : Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis\n     Expected: 1000\n  But was:  0\n\nat Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis () [0x00020] in <f601ef0b5c0c4fc6a249710d4c3ca0b2>:0\n\n2) Test Failure : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\n     Expected: 0\n  But was:  1\n\nat Shouty.Specs.ShoutSteps.ThenLucyShouldHearNothing () [0x00016] in <f601ef0b5c0c4fc6a249710d4c3ca0b2>:0\nat (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager)\nat TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding (TechTalk.SpecFlow.Bindings.IBinding binding, TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, System.Object[] arguments, TechTalk.SpecFlow.Tracing.ITestTracer testTracer, System.TimeSpan& duration) [0x000ea] in <275232c0d74f41b78aee428ed79db9f2>:0\nat TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch (TechTalk.SpecFlow.Bindings.BindingMatch match, System.Object[] arguments) [0x00012] in <275232c0d74f41b78aee428ed79db9f2>:0\nat TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f5] in <275232c0d74f41b78aee428ed79db9f2>:0\nat TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <275232c0d74f41b78aee428ed79db9f2>:0\nat SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <f601ef0b5c0c4fc6a249710d4c3ca0b2>:0\nat SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard () [0x0006b] in <f601ef0b5c0c4fc6a249710d4c3ca0b2>:0\n\n\nCoordinate.cs(10,30): warning CS0414: The private field `Shouty.Coordinate.xCoord' is assigned but its value is never used\nCoordinate.cs(11,30): warning CS0414: The private field `Shouty.Coordinate.yCoord' is assigned but its value is never used\n"}