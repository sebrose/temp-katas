{"Coordinate.java":"import static java.lang.Math.sqrt;\nimport static java.lang.Math.pow;\n\npublic class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int diffX = x - other.x;\n    int diffY = y - other.y;\n    Double distance = sqrt(pow(diffX,2) + pow(diffY,2));\n    return distance.intValue();\n  }\n  \n  @Override\n  public String toString(){\n    return String.format(\"{%d,%d}\",x,y);  \n  }\n    \n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String person, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String shouter) throws Throwable {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\d+) shout[s]* from (\\\\w+)$\")\n    public void receiverShouldHearShouter(String receiver, int shoutCount, String shouter) throws Throwable {\n        Map<String, List<String>> shoutsHeard = shouty.getShoutsHeardBy(receiver);\n        Assert.assertEquals(shoutCount, shoutsHeard.get(shouter).size());\n    }\n\n    @Then(\"^(\\\\w+) should hear nothing$\")\n    public void receiverShouldHearNothing(String receiver) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(receiver).size());\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void receiverShouldNotHearShouter(String receiver, String shouter) throws Throwable {\n        Assert.assertFalse(shouty.getShoutsHeardBy(receiver).containsKey(shouter));\n    }\n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !shouter.equals(listener))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: Only hear in-range shout\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-Location>\n        When Sean shouts\n        Then Lucy should hear <What-Lucy-Hears>\n        \n        Examples: simple examples\n          |Seans-Location|What-Lucy-Hears|\n          |0,900         |1 shout from Sean|\n          |800,800       |nothing|\n    \n    Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear 1 shout from Sean\n        \n    Scenario: Shouter should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should hear nothing\n","output":"JUnit version 4.12\n....E\nTime: 0.004\nThere was 1 failure:\n1) initializationError(RunCukesTest)\ncucumber.runtime.CucumberException: Error parsing feature file hear_shout.feature\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:133)\n\tat cucumber.runtime.model.CucumberFeature.loadFromFeaturePath(CucumberFeature.java:104)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:54)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:34)\n\tat cucumber.runtime.RuntimeOptions.cucumberFeatures(RuntimeOptions.java:235)\n\tat cucumber.api.junit.Cucumber.<init>(Cucumber.java:60)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n\tat org.junit.runner.Computer.getRunner(Computer.java:40)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:101)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:87)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:75)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:118)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\nCaused by: gherkin.parser.ParseError: Parse error at hear_shout.feature:11. Found examples when expecting one of: comment, doc_string, row, scenario, scenario_outline, step, tag. (Current getState: step).\n\tat gherkin.parser.Parser$Machine.event(Parser.java:207)\n\tat gherkin.parser.Parser.event(Parser.java:159)\n\tat gherkin.parser.Parser.examples(Parser.java:124)\n\tat gherkin.lexer.En.scan(En.java:780)\n\tat gherkin.lexer.I18nLexer.scan(I18nLexer.java:36)\n\tat gherkin.parser.Parser.parse(Parser.java:62)\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:131)\n\t... 24 more\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n\n"}