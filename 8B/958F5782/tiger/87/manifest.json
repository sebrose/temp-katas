{"Coordinate.java":"import static java.lang.Math.sqrt;\nimport static java.lang.Math.pow;\n\npublic class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int diffX = x - other.x;\n    int diffY = y - other.y;\n    Double distance = sqrt(pow(diffX,2) + pow(diffY,2));\n    return distance.intValue();\n  }\n  \n  @Override\n  public String toString(){\n    return String.format(\"{%d,%d}\",x,y);  \n  }\n    \n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class ShoutSteps {\n    private final static String ARBITRARY_MESSAGE = \"Hello, world\";\n    \n    @Autowired\n    private ShoutyHelper shouty;\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String shouter) {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n      \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shout[s]* from (\\\\w+)$\")\n    public void receiverShouldHearShouter(String receiver, int shoutCount, String shouter){\n        Map<String, List<String>> shoutsHeard = shouty.getShoutsHeardBy(receiver);\n        Assert.assertEquals(shoutCount, shoutsHeard.get(shouter).size());\n    }\n\n    @Then(\"^(\\\\w+) should hear nothing$\")\n    public void receiverShouldHearNothing(String receiver) {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(receiver).size());\n    }\n    \n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void receiverShouldNotHearShouter(String receiver, String shouter) {\n        Assert.assertFalse(shouty.getShoutsHeardBy(receiver).containsKey(shouter));\n    }\n\n}\n","Shouty.java":"import java.util.*;\n//import org.springframework.stereotype.Component;\n//import org.springframework.context.annotation.Scope;\n\n//@Component\n//@Scope(\"cucumber-glue\")\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n      shouts.remove(listener);\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"ShoutyHelper\" autowire-candidate=\"true\" scope=\"cucumber-glue\"/>\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: Only hear in-range shout\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-Location>\n        When Sean shouts\n        Then Lucy should hear <What-Lucy-Hears>\n        Examples: Basic Examples\n          |Seans-Location|What-Lucy-Hears  |\n          |0, 900        |1 shout from Sean|\n          |800, 800      |nothing          |\n    \n    Scenario: Multiple shouters\n        Given people are located at\n          | name  | x    | y   |\n          | Lucy  | 0    | 0   |\n          | Sean  | 0    | 500 |\n          | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear 1 shout from Sean\n        \n    Scenario: Shouter should not hear their own shouts\n        When Lucy shouts \n        Then Lucy should hear nothing\n    \n    Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n","output":"JUnit version 4.12\n............................\n5 Scenarios (5 passed)\n20 Steps (20 passed)\n0m0.268s\n\n\nTime: 1.644\n\nOK (28 tests)\n\nApr 18, 2018 2:36:58 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Wed Apr 18 14:36:58 GMT 2018]; root of context hierarchy\nApr 18, 2018 2:36:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nApr 18, 2018 2:36:59 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Wed Apr 18 14:36:58 GMT 2018]; root of context hierarchy\n","PersonLocation.java":"class PersonLocation {\n  private String name;\n  private int x;\n  private int y;\n    \n  public PersonLocation(String name, int x, int y){\n    this.name = name;\n    this.x = x;\n    this.y = y;\n  }\n    \n  public String getName(){ return name; }\n   \n  public int getX(){ return x; }\n    \n  public int getY(){ return y; }\n}\n","LocationSteps.java":"import org.junit.*;\nimport java.util.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class LocationSteps{\n    @Autowired\n    private ShoutyHelper shouty;\n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String person, int xCoord, int yCoord) {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> table) {\n        for(PersonLocation personLocation : table){\n           String person = personLocation.getName();\n           int xCoord = personLocation.getX();\n           int yCoord = personLocation.getY();\n           shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n        }\n    }\n  \n}","ShoutyHelper.java":"import org.springframework.stereotype.Component;\n\n@Component\npublic class ShoutyHelper extends Shouty {\n}"}