{"output":"JUnit version 4.12\n.......EE\nFailed scenarios:\nhear_shout.feature:11 # Scenario Outline: Only hear in-range shouts\n\n1 Scenarios (1 failed)\n3 Steps (1 failed, 2 passed)\n0m0.206s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:8)\n\n\nTime: 1.367\nThere were 2 failures:\n1) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:8)\n2) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:8)\n\nFAILURES!!!\nTests run: 7,  Failures: 2\n\nApr 18, 2018 2:31:16 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3cd3e762: startup date [Wed Apr 18 14:31:16 GMT 2018]; root of context hierarchy\nApr 18, 2018 2:31:16 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n      int xDelta = x - other.x;\n      int yDelta = y - other.y;\n      \n    return (int) Math.sqrt(xDelta*xDelta + yDelta*yDelta);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    //@Given(\"^Sean is at (\\\\d+), (\\\\d+)$\")\n    //public void seanIsAt(int xCoord, int yCoord) throws Throwable {\n        //shouty.setLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n    //}\n\n    @When(\"^Sean shouts$\")\n    public void seanShouts() throws Throwable {\n        shouty.shout(\"Sean\", ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear (nothing|something)$\")\n    public void lucy_should_hear_nothing(String message) throws Throwable {\n        if (message.equals(\"nothing\")){\n           Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n        } else {\n           Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n        }\n            }\n  \n    @When(\"^Oscar shouts$\")\n    public void oscarShouts() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n        shouty.shout(\"Oscar\", ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should not hear Oscar$\")\n    public void lucyShouldNotHearOscar() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n        Assert.assertEquals(null, shouty.getShoutsHeardBy(\"Lucy\").get(\"Oscar\"));\n    }\n    \n    @When(\"^Lucy Shouts$\")\n    public void lucyShouts() throws Throwable {\n        // Write code here that turns the phrase above into concrete actions\n        shouty.shout(\"Lucy\", ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should not hear Lucy$\")\n    public void lucyShouldNotHearLucy() throws Throwable {\n        // Write code here that turns the phrase above into concrete actions\n         Assert.assertEquals(null, shouty.getShoutsHeardBy(\"Lucy\").get(\"Lucy\"));\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (shouter.equals(listener))\n              continue;\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: Only hear in-range shouts\n        Given Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        Examples: some simple examples\n            | Seans-location | what-Lucy-hears |\n            |0, 900         |Sean            |\n            \n"}