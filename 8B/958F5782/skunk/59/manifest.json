{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n      \n      int xAbs = Math.abs(x - other.x);\n      int yAbs = Math.abs(y - other.y);\n     \n      return (int) Math.sqrt(Math.pow(xAbs, 2)+ Math.pow(yAbs, 2));\n      \n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  Coordinate a = new Coordinate(0, 0);\n  Coordinate b = new Coordinate(300, 400);\n  assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.*) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(DataTable data) throws Throwable {\n        \n     for (int i = 0; i < data.size(); i++) {\n         \n            name = String.valueOf(data.get(i).get(0));\n            x = String.valueOf(data.get(i).get(1));\n            y = String.valueOf(data.get(i).get(2));\n            shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n     }\n\n    }\n\n    @When(\"^(Lucy|Sean|Oscar) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(.*) should hear Sean$\")\n    public void lucyShouldHearHim(String name) throws Throwable {\n                  \n        Assert.assertEquals(1, shouty.getShoutsHeardBy(name).size());\n    }\n\n    @Then(\"^(.*) should hear nothing$\")\n    public void lucy_should_hear_nothing(String name) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(name).size());\n    }\n    \n    @Then(\"^([^ ]*) should not hear ([^ ]*)$\")\n    public void lucyShouldNotHearOscar(String name, String name2) throws Throwable {\n      \n          Assert.assertEquals(false,shouty.getShoutsHeardBy(name).containsKey(name2));\n     \n                \n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          if(shouter!=listener){\n              int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n              if (distance < MESSAGE_RANGE && shouter!=listener)\n                  shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: only hear in range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n        |Seans-location| what-Lucy-hears |\n        | 0, 900       | Sean            |\n        | 800, 800     |                 |\n        \n      Scenario:\n        Given people are located at\n         |name         | x    |    y |\n         |Lucy         | 0    | 0    |\n         |Sean         | 0    | 500  |\n         |Oscar        | 1100 | 0    |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario:\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n     \n        \n        \n","output":"ShoutSteps.java:17: error: cannot find symbol\n    public void peopleAreLocatedAt(DataTable data) throws Throwable {\n                                   ^\n  symbol:   class DataTable\n  location: class ShoutSteps\nShoutSteps.java:21: error: cannot find symbol\n            name = String.valueOf(data.get(i).get(0));\n            ^\n  symbol:   variable name\n  location: class ShoutSteps\nShoutSteps.java:22: error: cannot find symbol\n            x = String.valueOf(data.get(i).get(1));\n            ^\n  symbol:   variable x\n  location: class ShoutSteps\nShoutSteps.java:23: error: cannot find symbol\n            y = String.valueOf(data.get(i).get(2));\n            ^\n  symbol:   variable y\n  location: class ShoutSteps\nShoutSteps.java:24: error: cannot find symbol\n            shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n                               ^\n  symbol:   variable name\n  location: class ShoutSteps\nShoutSteps.java:24: error: cannot find symbol\n            shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n                                                    ^\n  symbol:   variable xCoord\n  location: class ShoutSteps\nShoutSteps.java:24: error: cannot find symbol\n            shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n                                                            ^\n  symbol:   variable yCoord\n  location: class ShoutSteps\n7 errors\n","PersonLocation.java":"import java.util.*;\n\npublic class PersonLocation {\n    \n    String name;\n    int x, y;\n        \n}"}