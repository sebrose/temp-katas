{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(final int xCoord, final int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n    \n  public int getX(){\n      return x;\n  }\n    \n  public int getY(){\n      return y;\n  }\n\n  public int distanceFrom(final Coordinate other){\n      \n    double dx = this.getX() - other.getX();   \n    double dy = this.getY() - other.getY();\n     \n    return (int) Math.hypot(dx,dy);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<Person> people) throws Throwable {\n        people.forEach(person -> \n                       shouty.setLocation(person.getName(),\n                                          new Coordinate(person.getX(),\n                                                         person.getY())));\n    }\n    \n    @Given(\"^(.+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String person, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n    \n    @When(\"^(.+) shouts$\")\n    public void personShouts(String person) throws Throwable {\n        shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertTrue(shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Sean\"));\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int shouts) throws Throwable {\n    \n        Assert.assertEquals(2, shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n    }\n\n    @Then(\"^Lucy should not hear (.+)$\")\n    public void lucyShouldNotHearPerson(String person) throws Throwable {\n        Assert.assertFalse(shouty.getShoutsHeardBy(\"Lucy\").containsKey(person));\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !listener.equals(shouter) )\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n        | Seans-location | what-Lucy-hears |\n        | 0, 900         | Sean            |\n        | 800, 800       | nothing         |\n        \n      Scenario: Multiple shouters\n        Given people are located at\n        | name | x    | y |\n        | Lucy |     0| 0 |\n        |Sean  |     0|500|\n        |Oscar | 1100 | 0 |\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n     Scenario: Shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n     Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n","output":"JUnit version 4.12\n...............................\n5 Scenarios (5 passed)\n23 Steps (23 passed)\n0m0.329s\n\n\nTime: 1.49\n\nOK (31 tests)\n\nDec 05, 2017 2:40:27 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@367ffa75: startup date [Tue Dec 05 14:40:27 GMT 2017]; root of context hierarchy\nDec 05, 2017 2:40:27 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 2:40:28 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@367ffa75: startup date [Tue Dec 05 14:40:27 GMT 2017]; root of context hierarchy\n","Person.java":"public class Person{\n\n    String name;\n    int x, y;\n    \n    public Person(final String name, final int x,final int y){\n        this.name = name;\n        this.x = x;\n        this.y = y;\n           \n    }\n    \n    public String getName(){\n        return name;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n}"}