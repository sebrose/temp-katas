{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n      int dx = this.x - other.x;\n      int dy = this.y - other.y;\n      \n     return (int) Math.sqrt( dx*dx + dy*dy);\n\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.*;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(Lucy|Sean|Oscar) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear him$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n    @Then(\"^(Lucy|Oscar|Sean) should hear (Lucy|Oscar|Sean)$\")\n    public void lucyShouldHearSean(String name, String shouter) throws Throwable {\n        Map<String, List<String>> shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsBySean = shouts.get(shouter);\n        if(shoutsBySean != null)\n        {\n            Assert.assertEquals(1, shoutsBySean.size());\n        }    \n    }\n    \n    @Then(\"^(Lucy|Oscar|Sean) should hear (\\\\d+) shouts from (Lucy|Oscar|Sean)$\")\n    public void personShouldHearNShoutsFromAnotherPerson(String name, int shoutCount, String shouter) throws Throwable {\n        Map<String, List<String>> shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsBySean = shouts.get(shouter);\n        if(shoutsBySean != null)\n        {\n            Assert.assertEquals(shoutCount, shoutsBySean.size());\n        }    \n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n    \n    @Then(\"^(Lucy|Oscar|Sean) should not hear (Oscar|Lucy|Sean)$\")\n    public void lucy_should_not_hear_nothing(String name, String shouter) throws Throwable {\n        Map<String, List<String>> shouts = shouty.getShoutsHeardBy(name);\n        List<String> shoutsByOscar = shouts.get(shouter);\n        if(shoutsByOscar != null)\n        {\n            Assert.assertEquals(0, shoutsByOscar.size());\n        }\n    }\n    \n\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(!shouter.equals(listener))\n          {\n              List<String> personsShouts = entry.getValue();\n              int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n              if (distance < MESSAGE_RANGE)\n                  shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear him\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n\n      Scenario: Multiple Shouters\n        Given people are located at\n        |name|x|y|\n        |Lucy|0|0|\n        |Sean|0|500|\n        |Oscar|1100|0|\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        And Lucy should hear Sean\n\n      Scenario: Shouter should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should hear nothing\n        \n      Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-lucy-hears>\n        \n        Examples: some simple examples\n        |Seans-location|what-lucy-hears|\n        |0, 900        |     Sean      |\n        |800, 800      |    nothing    |\n\n      Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n\n  ","output":"JUnit version 4.12\n........EE.....EE.....EEI.........EE.....EE......EE\nFailed scenarios:\nhear_shout.feature:5 # Scenario: In range shout is heard\nhear_shout.feature:11 # Scenario: Out of range shout is not heard\nhear_shout.feature:17 # Scenario: Multiple Shouters\nhear_shout.feature:41 # Scenario Outline: Only hear in-range shouts\nhear_shout.feature:42 # Scenario Outline: Only hear in-range shouts\nhear_shout.feature:44 # Scenario: Multiple shouts from one person\n\n7 Scenarios (6 failed, 1 passed)\n29 Steps (6 failed, 1 skipped, 22 passed)\n0m0.201s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:19)\n\tat ✽.Then Lucy should hear him(hear_shout.feature:9)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:15)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_not_hear_nothing(ShoutSteps.java:49)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:25)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearSean(ShoutSteps.java:24)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:37)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:37)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.personShouldHearNShoutsFromAnotherPerson(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:49)\n\n\nTime: 1.339\nThere were 12 failures:\n1) Then Lucy should hear him(Scenario: In range shout is heard)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:19)\n\tat ✽.Then Lucy should hear him(hear_shout.feature:9)\n2) Scenario: In range shout is heard\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:19)\n\tat ✽.Then Lucy should hear him(hear_shout.feature:9)\n3) Then Lucy should hear nothing(Scenario: Out of range shout is not heard)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:15)\n4) Scenario: Out of range shout is not heard\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:15)\n5) Then Lucy should not hear Oscar(Scenario: Multiple Shouters)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_not_hear_nothing(ShoutSteps.java:49)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:25)\n6) Scenario: Multiple Shouters\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_not_hear_nothing(ShoutSteps.java:49)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:25)\n7) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearSean(ShoutSteps.java:24)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:37)\n8) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucyShouldHearSean(ShoutSteps.java:24)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:37)\n9) Then Lucy should hear nothing(| 800, 800 | nothing |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:37)\n10) | 800, 800 | nothing |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:44)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:37)\n11) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.personShouldHearNShoutsFromAnotherPerson(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:49)\n12) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:29)\n\tat ShoutSteps.personShouldHearNShoutsFromAnotherPerson(ShoutSteps.java:34)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:49)\n\nFAILURES!!!\nTests run: 38,  Failures: 12\n\nDec 05, 2017 1:49:56 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@5dda768f: startup date [Tue Dec 05 13:49:56 GMT 2017]; root of context hierarchy\nDec 05, 2017 1:49:56 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 1:49:57 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@5dda768f: startup date [Tue Dec 05 13:49:56 GMT 2017]; root of context hierarchy\n","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.*;\nimport java.util.*;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n    \n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(DataTable table) throws Throwable {\n        List<MyType> types = table.asList(MyType.class);\n        for(MyType type : types)\n        {\n            this.personIsAt(type.name, type.x, type.y);\n        }     \n    }\n    \n    public static class MyType\n    {\n        public String name;\n        public int x;\n        public int y;\n    }\n}"}