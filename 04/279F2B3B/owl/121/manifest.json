{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int xSide = (x - other.x);\n    int ySide = (y - other.y);\n    return (int)Math.hypot(xSide, ySide);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n     Coordinate a = new Coordinate(0, 0);\n     Coordinate b = new Coordinate(300, 400);\n     assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.Map;\nimport java.util.List;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String shouter) throws Throwable {\n        shouty.shout(shouter, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\n    public void listenerShouldNotHearShouter(String listener, String shouter) throws Throwable {\n        Map<String, List<String> > shoutHeard = shouty.getShoutsHeardBy(listener);\n        boolean hasHeard =  shoutHeard.containsKey(shouter);\n\n        Assert.assertFalse(hasHeard );\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearShouter(String listener, String shouter) throws Throwable {       \n       Assert.assertTrue(shouty.getShoutsHeardBy(listener).containsKey(shouter) );\n    }\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void listenerShouldHearNumberShouter(String listener,int numberShouts, String shouter) throws Throwable {\n        Map<String, List<String> > shoutHeard = shouty.getShoutsHeardBy(listener);\n        List<String> shouts = shoutHeard.get(shouter);\n\n        Assert.assertEquals(numberShouts, shouts.size() );\n    }\n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if ((distance < MESSAGE_RANGE) && (listener != shouter))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n      Scenario: Multiple shouters\n        Given people are located at\n          | name  | x    | y   |\n          | Lucy  | 0    | 0   |\n          | Sean  | 0    | 500 |\n          | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n      Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n\n\n      Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should <what-Lucy-observes>\n\n        Examples: some simple examples\n          | Seans-location | what-Lucy-observes |\n          | 0, 900         | hear Sean          |\n          | 800, 800       | not hear Sean      |\n          \n        \n          \n\n\n          \n          \n\n\n        ","output":"JUnit version 4.12\n........EEI....EE......EE.....EE.....EE\nFailed scenarios:\nhear_shout.feature:5 # Scenario: Multiple shouters\nhear_shout.feature:16 # Scenario: shouters should not hear their own shouts\nhear_shout.feature:21 # Scenario: Multiple shouts from one person\nhear_shout.feature:37 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:38 # Scenario Outline: only hear in-range shouts\n\n5 Scenarios (5 failed)\n21 Steps (5 failed, 1 skipped, 15 passed)\n0m0.297s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:19)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearNumberShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:26)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:33)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:33)\n\n\nTime: 1.695\nThere were 10 failures:\n1) Then Lucy should not hear Oscar(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n2) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n3) Then Lucy should not hear Lucy(Scenario: shouters should not hear their own shouts)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:19)\n4) Scenario: shouters should not hear their own shouts\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:19)\n5) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearNumberShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:26)\n6) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearNumberShouter(ShoutSteps.java:32)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:26)\n7) Then Lucy should hear Sean(| 0, 900 | hear Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:33)\n8) | 0, 900 | hear Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldHearShouter(ShoutSteps.java:27)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:33)\n9) Then Lucy should not hear Sean(| 800, 800 | not hear Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:33)\n10) | 800, 800 | not hear Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.listenerShouldNotHearShouter(ShoutSteps.java:19)\n\tat ✽.Then Lucy should not hear Sean(hear_shout.feature:33)\n\nFAILURES!!!\nTests run: 28,  Failures: 10\n\nDec 05, 2017 2:33:49 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Tue Dec 05 14:33:49 GMT 2017]; root of context hierarchy\nDec 05, 2017 2:33:49 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 2:33:51 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Tue Dec 05 14:33:49 GMT 2017]; root of context hierarchy\n","ShouterTableLoc.java":"public class ShouterTableLoc {\n    public String name;\n    public int x;\n    public int y;\n}\n\n","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.Map;\nimport java.util.List;\n\npublic class LocationSteps {\n    private final Shouty shouty = new Shouty();\n\n     @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String person, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<ShouterTableLoc> arg1) throws Throwable {\n        for (ShouterTableLoc entry : arg1) {\n            shouty.setLocation(entry.name, new Coordinate(entry.x, entry.y));\n        }\n    }\n    \n}\n\n"}