{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    int xSide = (x - other.x);\n    int ySide = (y - other.y);\n    return (int)Math.hypot(xSide, ySide);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n     Coordinate a = new Coordinate(0, 0);\n     Coordinate b = new Coordinate(300, 400);\n     assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n     @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear a shout$\")\n    public void lucyShouldHearHim(String name) throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(name).size());\n    }\n\n    @Then(\"^(\\\\w+) should not hear any shouts$\")\n    public void lucy_should_hear_nothing(String name) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(name).size());\n    }\n       \n\n\n@Then(\"^(\\\\w+) should not hear (\\\\w+)$\")\npublic void lucyShouldNotHearOscar(String listener, String shouter) throws Throwable {\n    Map<String, List<String> > shoutHeard = shouty.getShoutsHeardBy(listener);\n    boolean hasHeard =  shoutHeard.containsKey(shouter);\n    \n    Assert.assertEquals(false,hasHeard );\n}\n\n@Then(\"^(\\\\w+) should hear (\\\\w+)$\")\npublic void lucyShouldHearSean(String listener, String shouter) throws Throwable {\n    Map<String, List<String> > shoutHeard = shouty.getShoutsHeardBy(listener);\n    boolean hasHeard =  shoutHeard.containsKey(shouter);\n    \n    Assert.assertEquals(true,hasHeard );\n\n}\n    \n@Then(\"^Sean should eat chips$\")\npublic void lucyShouldHearSean() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n   // throw new PendingException();\n    //throw new RuntimeException(\"bad steps\");\n}\n\n\n\n    \n}","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear a shout\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should not hear any shouts\n        \n      Scenario: In range shout is heard by Bob\n        Given Bob is at 300, 400\n        And Sean is at 0, 0\n        When Bob shouts\n        Then Sean should hear a shout\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n        Scenario: Weird scenario\n        Given Bob is at 300, 400\n        And Sean is at 0, 0\n        When Bob shouts\n        Then Sean should eat chips\n      ","output":"JUnit version 4.12\n...............................\n5 Scenarios (5 passed)\n23 Steps (23 passed)\n0m0.213s\n\n\nTime: 1.61\n\nOK (31 tests)\n\nDec 05, 2017 11:34:21 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7c6908d7: startup date [Tue Dec 05 11:34:21 GMT 2017]; root of context hierarchy\nDec 05, 2017 11:34:21 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 11:34:22 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@7c6908d7: startup date [Tue Dec 05 11:34:21 GMT 2017]; root of context hierarchy\n"}