{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other) {\n      int dx = this.x - other.x;\n      int dy = this.y - other.y;\n      return (int)Math.sqrt(dx * dx + dy * dy);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import java.util.List;\nimport java.util.Map;\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<IndividualLocation> locations) throws Throwable {\n        locations.forEach(location -> shouty.setLocation(location.name,\n                new Coordinate(location.x, location.y)));\n    }\n    \n    @Given(\"^(.+?) is at (\\\\d+), ?(\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(.+?) shouts$\")\n    public void personShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n    \n    @Then(\"^(.+) should hear (.+) (\\\\d+) times$\")\n    public void personShouldHearAnotherPerson(String listener, String shouter, int times) throws Throwable {\n        int shoutTotal = 0;\n        for (String shoutShouter : shouty.getShoutsHeardBy(listener).keySet()) {\n            if (shoutShouter.equals(shouter)) {\n                shoutTotal++;\n            }\n        }\n        Assert.assertEquals(times, shoutTotal);\n    }\n\n\n    @Then(\"^(.+?) should hear ([^ [:space:]]+)$\")\n    public void personShouldHearAnotherPerson(String listener, String shouter) throws Throwable {\n        Assert.assertTrue(shouty.getShoutsHeardBy(listener)\n                            .containsKey(shouter));\n    }\n    \n    @Then(\"^(.+?) should not hear (.+?)$\")\n    public void personShouldNotHearOtherPerson(String listener, String shouter) throws Throwable {\n        Assert.assertFalse(shouty.getShoutsHeardBy(listener)\n                        .containsKey(shouter));\n\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String>> shouts  = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String>> getShoutsHeardBy(String listener) {\n      HashMap<String, List<String>> shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (shouter.equals(listener)) { \n              continue;\n          }\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE) {\n              shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at <location>\n        When Sean shouts\n        Then Lucy should hear <person>\n  \n        Examples: some simple example\n        |location|person|times|\n        |0,900   | Sean |1    |\n        |800,00  | Sean |1    |\n\n    Scenario: Multiple shouters\n        Given people are located at\n            | name  | x    | y   |\n            | Lucy  | 0    | 0   |\n            | Sean  | 0    | 500 |\n            | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n     Scenario: Shouter should not hear their own shout\n        Given Lucy is at 0, 0\n        And Lucy shouts\n        Then Lucy should not hear Lucy\n        \n     Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear Sean 2 times\n ","output":"JUnit version 4.12\n.............................EE\nFailed scenarios:\nhear_shout.feature:32 # Scenario: Multiple shouts from one person\n\n5 Scenarios (1 failed, 4 passed)\n21 Steps (1 failed, 20 passed)\n0m0.421s\n\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.personShouldHearAnotherPerson(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean 2 times(hear_shout.feature:37)\n\n\nTime: 1.805\nThere were 2 failures:\n1) Then Lucy should hear Sean 2 times(Scenario: Multiple shouts from one person)\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.personShouldHearAnotherPerson(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean 2 times(hear_shout.feature:37)\n2) Scenario: Multiple shouts from one person\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat ShoutSteps.personShouldHearAnotherPerson(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean 2 times(hear_shout.feature:37)\n\nFAILURES!!!\nTests run: 29,  Failures: 2\n\nDec 05, 2017 1:53:31 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Tue Dec 05 13:53:31 GMT 2017]; root of context hierarchy\nDec 05, 2017 1:53:31 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 1:53:32 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Tue Dec 05 13:53:31 GMT 2017]; root of context hierarchy\n","IndividualLocation.java":"public class IndividualLocation {\n    public String name;\n    public int x;\n    public int y;\n}\n"}