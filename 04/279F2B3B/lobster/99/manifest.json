{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n      \n    int diff1 = Math.abs(x - other.x);\n    int diff2 = Math.abs(y - other.y);\n    return (int)Math.sqrt(Math.pow(diff1, 2) + Math.pow(diff2, 2)); \n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(300, 400);\n      assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport org.springframework.beans.factory.annotation.*;\nimport java.util.List;\nimport cucumber.api.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n\n    private final ShoutyHelper shoutyHelper = new ShoutyHelper();\n\n    @When(\"^([A-Z][a-z]*) shouts$\")\n    public void shouterShouts(String shouter) throws Throwable {\n        shoutyHelper.shout(shouter, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^([A-Z][a-z]*) should hear him$\")\n    public void userShouldHearHim(String user) throws Throwable {\n        Assert.assertEquals(1, shoutyHelper.getShoutsHeardBy(user).size());\n    }\n\n    @Then(\"^([A-Z][a-z]*) should hear nothing$\")\n    public void userShouldHearNothing(String user) throws Throwable {\n        Assert.assertEquals(0, shoutyHelper.getShoutsHeardBy(user).size());\n    }\n      \n    @Then(\"^([A-Z][a-z]*) should not hear ([A-Z][a-z]*)$\")\n    public void userShouldNotHearShouter(String user, String shouter) throws Throwable {\n        Assert.assertFalse(shoutyHelper.getShoutsHeardBy(user).containsKey(shouter)); \n    }\n    \n    @Then(\"^([A-Z][a-z]*) should hear ([A-Z][a-z]*)$\")\n    public void userShouldHearShouter(String user, String shouter) throws Throwable {\n        Assert.assertTrue(shoutyHelper.getShoutsHeardBy(user).containsKey(shouter));\n    }\n\n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int numShouts) throws Throwable {\n        Assert.assertTrue(shoutyHelper.getShoutsHeardBy(\"Lucy\").containsKey(\"Sean\"));\n        Assert.assertEquals(numShouts, shoutyHelper.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n    }\n    \n    @Given(\"^([A-Z][a-z]*) is at (.*)$\")\n    public void personIsAt(String person, @Transform(CoordinateConverter.class) Coordinate coordinate) throws Throwable {\n        shoutyHelper.setLocation(person, coordinate);\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocations) throws Throwable {\n        for (PersonLocation personLocation : personLocations) {\n            shoutyHelper.setLocation(personLocation.name, new Coordinate(personLocation.x, personLocation.y));\n        }\n    }\n    \n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  //private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n  private Map<String, HashMap<String, List<String> > >shoutsHeardBy = new HashMap<String, HashMap<String, List<String> > >();\n\n    \n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      for (String person : locations.keySet()) {\n          if (shouter.equals(person)) {\n              continue;\n          }\n          int distance = locations.get(person).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE) {\n              HashMap<String, List<String> > shoutsHeardByUser;\n              if (shoutsHeardBy.containsKey(person)) {\n                  shoutsHeardByUser = shoutsHeardBy.get(person);\n              }\n              else {\n                  shoutsHeardByUser = new HashMap <String, List<String> >();\n                  shoutsHeardBy.put(shouter, shoutsHeardByUser);\n              }\n              if (!shoutsHeardByUser.containsKey(shouter)) {\n                  List<String> personShouts = new ArrayList<String>();\n                  shoutsHeardByUser.put(shouter, personShouts);\n              }\n      \n              shoutsHeardByUser.get(shouter).add(shout);\n          }\n      }\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      return shoutsHeardBy.get(listener);\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n    \n    Background:\n        Given Lucy is at 0, 0\n\n    Scenario Outline: only hear in-range shouts\n        Given Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n        | Seans-location    | what-Lucy-hears   |\n        | 0, 900            | Sean              |\n        | 800, 800          | nothing           |\n        \n        \n      Scenario: Multiple shouters\n        Given people are located at\n        | name  | x     | y     |\n        | Lucy  | 0     | 0     |\n        | Sean  | 0     | 500   |\n        | Oscar | 1100  | 0     |\n\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Shouters should not hear their own shouts\n        When Lucy shouts\n        Then Lucy should hear nothing\n       \n      Scenario: Multiple shouts from one person\n        Given Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n        \n      Scenario: Person shouts, moves, shouts\n        Given Sean is at 0, 1100\n        And Sean shouts\n        Then Lucy should hear nothing\n        Given Sean is at 0, 500\n        And Sean shouts\n        Then Lucy should hear Sean \n        \n       Scenario: Person is away then moves into shouting zone\n         Given Sean is at 0, 1100\n         And Sean shouts\n         Then Lucy should hear nothing\n         Given Lucy is at 0, 1100\n         Then Lucy should hear nothing\n","output":"JUnit version 4.12\n....before\n....EEafter\n.before\n....EEafter\n.before\n.....EEIafter\n.before\n...EEafter\n.before\n.....EEafter\n.before\n....EEIIIafter\n.before\n....EEIIafter\n\nFailed scenarios:\nhear_shout.feature:15 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:16 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:19 # Scenario: Multiple shouters\nhear_shout.feature:31 # Scenario: Shouters should not hear their own shouts\nhear_shout.feature:35 # Scenario: Multiple shouts from one person\nhear_shout.feature:42 # Scenario: Person shouts, moves, shouts\nhear_shout.feature:50 # Scenario: Person is away then moves into shouting zone\n\n7 Scenarios (7 failed)\n35 Steps (7 failed, 6 skipped, 22 passed)\n0m0.258s\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearShouter(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:11)\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:11)\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldNotHearShouter(ShoutSteps.java:31)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:28)\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:33)\n\njava.lang.NullPointerException\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:41)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:45)\n\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:53)\n\n\nTime: 1.568\nThere were 14 failures:\n1) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearShouter(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:11)\n2) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearShouter(ShoutSteps.java:36)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:11)\n3) Then Lucy should hear nothing(| 800, 800 | nothing |)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:11)\n4) | 800, 800 | nothing |\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:11)\n5) Then Lucy should not hear Oscar(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldNotHearShouter(ShoutSteps.java:31)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:28)\n6) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldNotHearShouter(ShoutSteps.java:31)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:28)\n7) Then Lucy should hear nothing(Scenario: Shouters should not hear their own shouts)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:33)\n8) Scenario: Shouters should not hear their own shouts\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:33)\n9) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:41)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n10) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:41)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:39)\n11) Then Lucy should hear nothing(Scenario: Person shouts, moves, shouts)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:45)\n12) Scenario: Person shouts, moves, shouts\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:45)\n13) Then Lucy should hear nothing(Scenario: Person is away then moves into shouting zone)\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:53)\n14) Scenario: Person is away then moves into shouting zone\njava.lang.NullPointerException\n\tat ShoutSteps.userShouldHearNothing(ShoutSteps.java:26)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:53)\n\nFAILURES!!!\nTests run: 39,  Failures: 14\n\nDec 05, 2017 2:46:50 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@5e5d171f: startup date [Tue Dec 05 14:46:50 GMT 2017]; root of context hierarchy\nDec 05, 2017 2:46:50 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 2:46:51 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@5e5d171f: startup date [Tue Dec 05 14:46:50 GMT 2017]; root of context hierarchy\n","PersonLocation.java":"public class PersonLocation {\n  \n    public String name;\n    public int x;\n    public int y;\n    \n    \n}","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.*;\n\npublic class LocationSteps {\n    //@Autowired\n    //private ShoutyHelper shoutyHelper;\n    \n   \n    \n}","ShoutyHelper.java":"import org.springframework.stereotype.*;\nimport org.springframework.context.annotation.*;\nimport java.util.*;\n\n//@Component \n//@Scope(\"cucumber-glue\")\npublic class ShoutyHelper {\n    \n    private Shouty shouty = new Shouty();\n    \n    public void setLocation(String person, Coordinate location) {\n        shouty.setLocation(person, location);\n    }\n\n    public void shout(String shouter, String shout) {\n        shouty.shout(shouter, shout);\n    }\n\n    public Map<String, List<String> > getShoutsHeardBy(String listener) {\n        return shouty.getShoutsHeardBy(listener);\n    }\n}","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\npublic class ShoutyHooks {\n    \n    @Before(order = 1)\n    public void before()\n    {\n        System.out.println(\"before\");\n    }\n    \n    @After(order = 1)\n    public void after()\n    {\n        System.out.println(\"after\");\n    }\n    \n    @Before(\"@wip\")\n    public void anotherBefore()\n    {\n        System.out.println(\"Another Before\");\n    }\n    \n    @After(\"@wip\")\n   \n    public void anotherAfter()\n    {\n        System.out.println(\"Another After\");\n    }\n    \n}","CoordinateConverter.java":"import cucumber.api.*;\n\npublic class CoordinateConverter extends Transformer<Coordinate> {\n    \n    public Coordinate transform(String input) {\n        String[] component = input.split(\",\");\n        int x = Integer.valueOf(component[0].trim());\n        int y = Integer.valueOf(component[1].trim());\n        return new Coordinate(x, y);\n    }\n}"}