{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. \n    return (int)Math.sqrt(Math.pow(other.x-this.x, 2)+Math.pow(other.y-this.y, 2));\n\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.+) is at (\\\\d+), (\\\\d+)$\")\n    public void lucyIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(.+) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(.+) should hear ?!nothing(.+)$\")\n    public void lucyShouldHearHim(String listener, String shouter) throws Throwable {\n        if(\"nothing\".equals(shouter)) {\n            Assert.assertEquals(0, shouty.getShoutsHeardBy(listener).size());\n        } else {\n            Assert.assertEquals(1, shouty.getShoutsHeardBy(listener).size());\n            Assert.assertTrue(shouty.getShoutsHeardBy(listener).containsKey(shouter));\n        }\n    }\n    \n    @Then(\"^(.+) should not hear (.+)$\") \n    public void lucyShouldNotHearOscar(String listener, String shouter) throws Throwable {\n        Assert.assertFalse(shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n      \n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(listener.equals(shouter)) continue;\n          \n          List<String> personsShouts = entry.getValue();\n          Coordinate listenerCoordinate = locations.get(listener);\n          Coordinate shouterCoordinate = locations.get(shouter);\n          int distance = listenerCoordinate.distanceFrom(shouterCoordinate);\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" scope=\"cucumber-glue\" />\n\n    <context:annotation-config/>\n\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n\n     Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n     Scenario: Shouters should not hear their own shouts\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Lucy shouts\n        Then Lucy should hear nothing\n        \n     Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears> \n        Examples: some simple examples\n            | Seans-location | what-Lucy-hears |\n            | 0, 900         | Sean            |\n            | 800, 800       | nothing         |\n        \n\n     ","output":"JUnit version 4.12\n........EE.....EE........EE.....EE.....EE.....EE\nUndefined scenarios:\nhear_shout.feature:5 # Scenario: In range shout is heard\nhear_shout.feature:11 # Scenario: Out of range shout is not heard\nhear_shout.feature:17 # Scenario: Multiple shouters\nhear_shout.feature:26 # Scenario: Shouters should not hear their own shouts\nhear_shout.feature:39 # Scenario Outline: Only hear in-range shouts\nhear_shout.feature:40 # Scenario Outline: Only hear in-range shouts\n\n6 Scenarios (6 undefined)\n27 Steps (6 undefined, 21 passed)\n0m0.183s\n\n\nYou can implement missing steps with the snippets below:\n\n@Then(\"^Lucy should hear Sean$\")\npublic void lucyShouldHearSean() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@Then(\"^Lucy should hear nothing$\")\npublic void lucyShouldHearNothing() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n\nTime: 1.319\nThere were 12 failures:\n1) Then Lucy should hear Sean(Scenario: In range shout is heard)\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n2) Scenario: In range shout is heard\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n3) Then Lucy should hear nothing(Scenario: Out of range shout is not heard)\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n4) Scenario: Out of range shout is not heard\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:9\noutput truncated by cyber-dojoDec 05, 2017 1:50:48 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Tue Dec 05 13:50:48 GMT 2017]; root of context hierarchy\nDec 05, 2017 1:50:48 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nDec 05, 2017 1:50:49 PM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@2cd76f31: startup date [Tue Dec 05 13:50:48 GMT 2017]; root of context hierarchy\n"}