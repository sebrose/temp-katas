{"output":"JASMINE TESTS\n=============\nStarted\n..\n\n\n2 specs, 0 failures\nFinished in 0.007 seconds\n\nCUCUMBER FEATURES\n=================\n...Sean\n.....Sean\n......Sean\n.Oscar\n.F-.Lucy\n.F\n\nFailures:\n\n1) Scenario: Multiple shouters # ../../../../../sandboxes/raccoon/features/hear_shout.feature:19\n   ✔ Before # ../../../../../sandboxes/raccoon/features/shout_steps.js:9\n   ✔ Given Lucy is at 0, 0 # ../../../../../sandboxes/raccoon/features/shout_steps.js:37\n   ✔ And Sean is at 0, 500 # ../../../../../sandboxes/raccoon/features/shout_steps.js:37\n   ✔ And Oscar is at 1100, 0 # ../../../../../sandboxes/raccoon/features/shout_steps.js:37\n   ✔ When Sean shouts # ../../../../../sandboxes/raccoon/features/shout_steps.js:41\n   ✔ And Oscar shouts # ../../../../../sandboxes/raccoon/features/shout_steps.js:41\n   ✖ Then Lucy should not hear Oscar # ../../../../../sandboxes/raccoon/features/shout_steps.js:54\n       AssertionError [ERR_ASSERTION]: 1 == 0\n           + expected - actual\n\n           -1\n           +0\n\n           at CustomWorld.<anonymous> (/sandboxes/raccoon/features/shout_steps.js:55:12)\n   - But Lucy should hear Sean # ../../../../../sandboxes/raccoon/features/shout_steps.js:46\n\n2) Scenario: Shouters should not hear their own shouts # ../../../../../sandboxes/raccoon/features/hear_shout.feature:30\n   ✔ Before # ../../../../../sandboxes/raccoon/features/shout_steps.js:9\n   ✔ When Lucy shouts # ../../../../../sandboxes/raccoon/features/shout_steps.js:41\n   ✖ Then Lucy should not hear Lucy # ../../../../../sandboxes/raccoon/features/shout_steps.js:54\n       TypeError: Cannot read property 'distanceFrom' of undefined\n           at Object.keys.forEach.shouter (/sandboxes/raccoon/shouty.js:22:48)\n           at Array.forEach (<anonymous>)\n           at Shouty.getShoutsHeardBy (/sandboxes/raccoon/shouty.js:20:30)\n           at CustomWorld.<anonymous> (/sandboxes/raccoon/features/shout_steps.js:55:37)\n\n4 scenarios (2 failed, 2 passed)\n17 steps (2 failed, 1 skipped, 14 passed)\n0m00.009s\n","coordinate.js":"module.exports = function Coordinate(x, y) {\n\n  this.x = x\n  this.y = y\n\n  this.distanceFrom = function(other) {\n    var dx = Math.abs(this.x - other.x);\n    var dy = Math.abs(this.y - other.y);\n    return Math.abs(Math.sqrt(dx*dx +  dy*dy))\n  }\n  /*\n  this.distanceFrom = function(other) {\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(this.x - other.x)\n\n    // return 0\n    return Math.abs(this.x - other.x)\n  }\n  */\n};\n","tests/coordinate.test.js":"var assert = require('assert')\nvar Coordinate = require('../coordinate')\n\ndescribe(\"coordinate class\", () => {\n\n  it(\"should calculate the distance from itself\", () => {\n    var a = new Coordinate(0, 0)\n    assert.equal(a.distanceFrom(a), 0)\n  })\n\n  it(\"should calculate the distance from another coordinate along X axis\", ()=>{\n    var a = new Coordinate(0, 0)\n    var b = new Coordinate(600, 0)\n\n    assert.equal(a.distanceFrom(b), 600)\n  })\n\n  // it(\"should calculate the distance from another coordinate\", ()=>{\n  //   var a = new Coordinate(0, 0)\n  //   var b = new Coordinate(300, 400)\n  //\n  //   assert.equal(a.distanceFrom(b), 500)\n  // })\n})\n","features/hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    # This means Sean is approximately 1130m from Lucy\n    When Sean shouts\n    Then Lucy should hear nothing\n    \n  # adding new scenario from exercice\n  Scenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n    \n  # adding new scenario from exercice\n  Scenario: Shouters should not hear their own shouts\n  When Lucy shouts\n  Then Lucy should not hear Lucy\n  \n  \n  \n  \n  ","features/shout_steps.js":"var {Before, Given, When, Then } = require('cucumber')\nvar assert = require('assert')\nvar Shouty = require('../shouty')\nvar Coordinate = require('../coordinate')\n\nconst ARBITARY_MESSAGE = 'Hello, world'\nlet shouty\n\nBefore(function() {\n  shouty = new Shouty()\n})\n\n\n/*\nGiven('Lucy is at {int}, {int}', function (x, y) {\n  shouty.setLocation('Lucy', new Coordinate(x, y))\n})\n\nGiven('Sean is at {int}, {int}', function (x, y) {\n  shouty.setLocation('Sean', new Coordinate(x, y))\n})\n\nWhen('Sean shouts', function () {\n  shouty.shout('Sean', ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear Sean', function (personA) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(personA)).length, 1)\n})\n\nThen('{word} should hear nothing', function (personA) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(personA)).length, 0)\n})\n*/\n\n// new one\nGiven('{word} is at {int}, {int}', function (personA, x, y) {\n  shouty.setLocation(personA, new Coordinate(x, y))\n})\n\nWhen('{word} shouts', function (personB) {\n  console.log(personB);\n  shouty.shout(personB, ARBITARY_MESSAGE)\n})\n\nThen('{word} should hear Sean', function (personA) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(personA)).length, 1)\n})\n\nThen('{word} should hear nothing', function (personA) {\n  assert.equal(Object.keys(shouty.getShoutsHeardBy(personA)).length, 0)\n})\n\nThen('Lucy should not hear {word}', function (listener) {\n    assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)).length, 0)  \n});\n\n/*\n\nThen('{word} should not hear {word}', function (shouter, listena) {\n  \n   console.log(shouter + \"\" + listena);\n    \n    if((shouter === listener)){\n        assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)).length, 0)\n    }\n    else{\n        assert.equal(Object.keys(shouty.getShoutsHeardBy(listener)).length, 1)\n    }\n    \n});\n*/\n","shouty.js":"module.exports = function Shouty() {\n  const MESSAGE_RANGE = 1000\n  this.locations = {}\n  this.shouts = {}\n\n  this.setLocation = function(person, coordinate) {\n    this.locations[person] = coordinate\n  }\n\n  this.shout = function(person, shout) {\n    if(!(person in this.shouts)) {\n      this.shouts[person] = []\n    }\n    this.shouts[person].push(shout)\n  }\n\n  this.getShoutsHeardBy = function(listener) {\n    var shoutsHeard = {}\n\n    Object.keys(this.shouts).forEach(shouter => {\n        var personsShouts = this.shouts[shouter]\n        var distance = this.locations[listener].distanceFrom(this.locations[shouter])\n\n        if(distance < MESSAGE_RANGE) {\n          shoutsHeard[shouter] = personsShouts\n        }\n    })\n\n    return shoutsHeard\n  }\n}\n","features/world.js":"const { setWorldConstructor } = require('cucumber')\n\nfunction CustomWorld() {\n}\n\nsetWorldConstructor(CustomWorld)\n","cyber-dojo.sh":"NODE_VERSION=8.4.0\n\necho JASMINE TESTS\necho =============\n\nn use ${NODE_VERSION} /usr/local/lib/node_modules/jasmine/bin/jasmine \\\n  JASMINE_CONFIG_PATH=tests/jasmine.json\n\n# You have to cd to a specific folder because\n#   ~/node_modules/cucumber/bin/cucumber.js\n# contains the line\n# require('../lib/cli/run.js').default();\n# Go figure!\n\ncd ~/node_modules/cucumber/bin\n\nexport NODE_PATH=/home/$CYBER_DOJO_AVATAR_NAME/node_modules\n\necho CUCUMBER FEATURES\necho =================\n\n./cucumber.js \\\n  --format-options '{\"colorsEnabled\":false}' \\\n  --format-options '{\"snippetInterface\":\"synchronous\"}' \\\n  ${CYBER_DOJO_SANDBOX}/features/*.feature\n","tests/jasmine.json":"{\n    \"spec_dir\": \"tests\",\n    \"spec_files\": [ \"*[tT]est.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n"}