{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          // TODO: actually calculate distance beteen the coordinates.\n          //       e.g. return Math.Abs(xCoord - other.xCoord);\n\n          return 0;\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(220, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        // [Test]\n        // public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        // {\n        //     Coordinate a = new Coordinate(0, 0);\n        //     Coordinate b = new Coordinate(300, 400);\n        //     Assert.AreEqual(500, a.DistanceFrom(b));\n        // }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"Lucy is at (.*), (.*)\")]\n        public void GivenLucyIsAt(int xCoord, int yCoord)\n        {\n            shouty.SetLocation(\"Lucy\", new Coordinate(xCoord, yCoord));\n        }\n\n        [Given(@\"Sean is at (.*), (.*)\")]\n        public void GivenSeanIsAt(int xCoord, int yCoord)\n        {\n            shouty.SetLocation(\"Sean\", new Coordinate(xCoord, yCoord));\n        }\n\n        [When(@\"Sean shouts\")]\n        public void WhenSeanShouts()\n        {\n            shouty.Shout(\"Sean\", ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                var personsShouts = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE)\n                    shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nCompilation succeeded - 2 warning(s)\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.InRangeShoutIsHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenSeanIsAt(0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSeanShouts() (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenLucyShouldHearSean() (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(0, 0) (0.0s)\nAnd Sean is at 800, 800\n-> done: ShoutSteps.GivenSeanIsAt(800, 800) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenSeanShouts() (0.0s)\nThen Lucy should hear nothing\n-> error:   Expected: 0\n  But was:  1\n\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Failed : Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis\n  Expected: 600\n  But was:  0\nat Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis () [0x00025] in <79535424943d4b8c874eb5050883d893>:0\n\n2) Failed : Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromItself\n  Expected: 220\n  But was:  0\nat Shouty.Tests.CoordinateTest.ItCalculatesTheDistanceFromItself () [0x00019] in <79535424943d4b8c874eb5050883d893>:0\n\n3) Failed : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\n  Expected: 0\n  But was:  1\nat Shouty.Specs.ShoutSteps.ThenLucyShouldHearNothing () [0x0001b] in <79535424943d4b8c874eb5050883d893>:0\nat (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager)\n\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: /sandboxes/squid\n    ImageRuntimeVersion: 4.0.30319\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\n\nTest Run Summary\n  Overall result: Failed\n  Test Count: 4, Passed: 1, Failed: 3, Warnings: 0, Inconclusive: 0, Skipped: 0\n    Failed Tests - Failures: 3, Errors: 0, Invalid: 0\n  Start time: 2018-04-18 09:13:53Z\n    End time: 2018-04-18 09:13:55Z\n    Duration: 1.208 seconds\n\nResults (nunit3) saved as TestResult.xml\nCoordinate.cs(10,30): warning CS0414: The private field `Shouty.Coordinate.xCoord' is assigned but its value is never used\nCoordinate.cs(11,30): warning CS0414: The private field `Shouty.Coordinate.yCoord' is assigned but its value is never used\n"}