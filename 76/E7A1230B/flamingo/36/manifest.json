{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          // TODO: actually calculate distance beteen the coordinates.\n          //       e.g. return Math.Abs(xCoord - other.xCoord);\n          int xCordDiff = Math.Abs(xCoord - other.xCoord);\n          int yCordDiff = Math.Abs(yCoord - other.yCoord);\n          return (int)Math.Sqrt(Math.Pow(xCordDiff,2)+Math.Pow(yCordDiff,2));\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n     [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n      Coordinate a = new Coordinate(0, 0);\n         Coordinate b = new Coordinate(300, 400);\n          Assert.AreEqual(500, a.DistanceFrom(b));\n   }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n    \n \n Scenario Outline: Combining the first two scenarios to use Examples.\n \nGiven Lucy is at 0, 0\nAnd Sean is at <Seans-location x>, <Seans-location y>\nWhen Sean shouts\nThen Lucy should hear <what-lucy-hears>\n\nExamples:\n|Seans-location x |Seans-location y | what-lucy-hears|\n|0                |       900       |Sean            |\n|800              | 800             | nothing        |\n \n\nScenario: Use of Data Tables\nGiven people are located at\n|name | x  | y |\n|Lucy | 0  | 0 |\n|Sean | 0  |500|\n|Oscar|1100|0  |\nWhen Sean shouts\nAnd Oscar shouts\nThen Lucy should not hear Oscar\nBut Lucy should hear Sean\n\n\n\nScenario: Multiple Shouters\nGiven Lucy is at 0, 0\nAnd Sean is at 0, 500\nAnd Oscar is at 1100, 0\nWhen Sean shouts\nAnd Oscar shouts\nThen Lucy should not hear Oscar\nBut Lucy should hear Sean\n\nScenario: Shouter should not hear their own shouts\nWhen Lucy shouts\nThen Lucy should hear nothing\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n        \n        //Table parameter\n         [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            foreach (TableRow row in table.Rows)\n            {\n                shouty.SetLocation(row[0], new Coordinate(row[1], row[2]));\n            }\n        }\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenLucyIsAt(string name,int xCoord, int yCoord)\n        {\n            \n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n       \n        [When(@\"(Sean|Oscar|Lucy) shouts\")]\n        public void WhenSeanShouts(string name)\n        {\n            shouty.Shout(name, ARBITRARY_MESSAGE);\n        }\n      \n        [Then(@\"Lucy should hear Sean\")]\n        public void ThenLucyShouldHearSean()\n        {\n            Assert.AreEqual(1, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n\n        [Then(@\"Lucy should hear nothing\")]\n        public void ThenLucyShouldHearNothing()\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(\"Lucy\").Count);\n        }\n        \n        [Then(@\"Lucy should not hear Oscar\")]\n        public void ThenLucyShouldNotHearOscar()\n        {\n            \n            Assert.IsFalse(shouty.GetShoutsHeardBy(\"Lucy\").ContainsKey(\"Oscar\"));\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                var personsShouts = shout.Value;\n                if (shouter == listenerName)\n                {\n                  return shoutsHeard ;\n                }\n               \n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n                \n               if (distance < MESSAGE_RANGE)\n                    shoutsHeard.Add(shouter, personsShouts);\n                 \n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nCompilation failed: 2 error(s), 0 warnings\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n\nErrors, Failures and Warnings\n\n1) Invalid : /sandboxes/flamingo/RunTests.dll\nFile not found: /sandboxes/flamingo/RunTests.dll\n\nTest Run Summary\n  Overall result: Failed\n  Test Count: 0, Passed: 0, Failed: 0, Warnings: 0, Inconclusive: 0, Skipped: 0\n  Start time: 2018-04-18 14:03:51Z\n    End time: 2018-04-18 14:03:51Z\n    Duration: 0.466 seconds\n\nResults (nunit3) saved as TestResult.xml\nShoutSteps.cs(20,44): error CS1502: The best overloaded method match for `Shouty.Coordinate.Coordinate(int, int)' has some invalid arguments\nCoordinate.cs(13,16): (Location of the symbol related to previous error)\nShoutSteps.cs(20,62): error CS1503: Argument `#1' cannot convert `string' expression to type `int'\n"}