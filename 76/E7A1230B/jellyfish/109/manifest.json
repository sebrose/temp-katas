{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n            var xDistance = Math.Abs(xCoord - other.xCoord);\n            var yDistance = Math.Abs(yCoord - other.yCoord);\n            var totalDistance = Math.Sqrt(xDistance * xDistance + yDistance * yDistance);\n            return (int)totalDistance;\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(300, 400);\n            Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario Outline: Only hear in-range shouts\n    Given Lucy is at 0, 0\n    And <from> is at <Seans-location>\n    When <from> shouts\n    Then Lucy should hear <count> shouts from <from>\n    \n    Examples: some simple examples\n      | Seans-location | count | from |\n      | 0, 900         | 1     | Sean |\n      | 800, 800       | 0     | Sean |   \n\n  Scenario Outline: Multiple Shouters\n    Given people are located at\n      | name   | x     | y     |\n      | Lucy   | 0     | 0     |\n      | Sean   | 0     | 500   |\n      | Oscar  | 1100  | 0     |\n      | EmergencyUser | 3000 | 3000 |\n    When Sean shouts\n    And Oscar shouts\n    And EmergencyUser is an Emergency Broadcaster\n    Then <listener> should hear <count> shouts from <from>\n    \n    Examples: some simple examples\n      | listener   | count | from  |\n      | Lucy       | 1     | Sean  |\n      | Lucy       | 0     | Oscar |\n      | Sean       | 0     | Oscar |\n      | Lucy       | 1     | EmergencyUser |\n    \n  Scenario: Shouters should not hear their own shouts\n    Given Oscar is a user\n    When Oscar shouts\n    Then Oscar should hear 0 shouts from Oscar\n    \n  Scenario: Multiple shouts from one person\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n    \n    ","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\nusing System.Linq;\nusing TechTalk.SpecFlow.Assist;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n        const string person =@\"(\\w+)\";\n\n        [Given(person + @\" is at (.*), (.*)\")]\n        public void GivenLucyIsAt(string username, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(username, new Coordinate(xCoord, yCoord));\n        }\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n            var people = table.CreateSet<PersonAtPlace>();\n            \n            foreach (var person in people)\n            {\n                shouty.SetLocation(person.Name, new Coordinate(person.X, person.Y));\n            }\n        }\n        \n        [When(person + @\" shouts\")]\n        public void WhenPersonShouts(string username)\n        {\n            shouty.Shout(username, ARBITRARY_MESSAGE);\n        }\n        \n        [Then(person + @\" should hear (\\d*) shouts from \" + person)]\n        public void ThenPersonShouldHearShoutsFromPerson(string recipient, int expectedCount, string sender)\n        {\n            var shoutsHeard = shouty.GetShoutsHeardBy(recipient);\n            var actualCount = 0;\n            \n            if (shoutsHeard.ContainsKey(sender))\n            {\n                actualCount = shoutsHeard[sender].Count;\n            }\n                \n            Assert.AreEqual(expectedCount, actualCount);\n        }\n        \n        [Given(person + @\" is a user\")]\n        public void GivenPersonsAUser(string username)\n        {\n            // Everyone is a user!\n        }\n        \n        [Given(@\"EmergencyUser is an emergency broadcast user\")]\n        public void GivenEmergencyUserIsAnEmergencyBroadcastUser()\n        {\n            //ScenarioContext.Current.Pending();\n        }\n        \n        private class PersonAtPlace\n        {\n            public string Name { get; set; }\n            public int X { get; set; }\n            public int Y { get; set; }  \n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n            \n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                var personsShouts = shout.Value;\n\n                if (shouter.Equals(listenerName))\n                {\n                    continue;\n                }\n                \n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance >= MESSAGE_RANGE)\n                {\n                    continue;\n                }\n                    \n                shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"1\",\"Sean\",null)\nGiven people are located at\n  --- table step argument ---\n  | name          | x    | y    |\n  | Lucy          | 0    | 0    |\n  | Sean          | 0    | 500  |\n  | Oscar         | 1100 | 0    |\n  | EmergencyUser | 3000 | 3000 |\n-> done: ShoutSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nAnd EmergencyUser is an Emergency Broadcaster\n-> No matching step definition found for the step. Use the following code to create one:\n        [When(@\"EmergencyUser is an Emergency Broadcaster\")]\n        public void WhenEmergencyUserIsAnEmergencyBroadcaster()\n        {\n            ScenarioContext.Current.Pending();\n        }\n\nThen Lucy should hear 1 shouts from Sean\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"0\",\"Oscar\",null)\nGiven people are located at\n  --- table step argument ---\n  | name          | x    | y    |\n  | Lucy          | 0    | 0    |\n  | Sean          | 0    | 500  |\n  | Oscar         | 1100 | 0    |\n  | EmergencyUser | 3000 | 3000 |\n-> done: ShoutSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nAnd EmergencyUser is an Emergency Broadcaster\n-> No matching step definition found for the step. Use the following code to create one:\n        [When(@\"EmergencyUser is an Emergency Broadcaster\")]\n        public void WhenEmergencyUserIsAnEmergencyBroadcaster()\n        {\n            ScenarioContext.Current.Pending();\n        }\n\nThen Lucy should hear 0 shouts from Oscar\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Sean\",\"0\",\"Oscar\",null)\nGiven people are located at\n  --- table step argument ---\n  | name          | x    | y    |\n  | Lucy          | 0    | 0    |\n  | Sean          | 0    | 500  |\n  | Oscar         | 1100 | 0    |\n  | EmergencyUser | 3000 | 3000 |\n-> done: ShoutSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nAnd EmergencyUser is an Emergency Broadcaster\n-> No matching step definition found for the step. Use the following code to create one:\n        [When(@\"EmergencyUser is an Emergency Broadcaster\")]\n        public void WhenEmergencyUserIsAnEmergencyBroadcaster()\n        {\n            ScenarioContext.Current.Pending();\n        }\n\nThen Sean should hear 0 shouts from Oscar\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"1\",\"EmergencyUser\",null)\nGiven people are located at\n  --- table step argument ---\n  | name          | x    | y    |\n  | Lucy          | 0    | 0    |\n  | Sean          | 0    | 500  |\n  | Oscar         | 1100 | 0    |\n  | EmergencyUser | 3000 | 3000 |\n-> done: ShoutSteps.GivenPeopleAreLocatedAt(<table>) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nAnd EmergencyUser is an Emergency Broadcaster\n-> No matching step definition found for the step. Use the following code to create one:\n        [When(@\"EmergencyUser is an Emergency Broadcaster\")]\n        public void WhenEmergencyUserIsAnEmergencyBroadcaster()\n        {\n            ScenarioContext.Current.Pending();\n        }\n\nThen Lucy should hear 1 shouts from EmergencyUser\n-> skipped because of previous errors\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutsFromOnePerson\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 500\n-> done: ShoutSteps.GivenLucyIsAt(\"Sean\", 0, 500) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nAnd Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear 2 shouts from Sean\n-> done: ShoutSteps.ThenPersonShouldHearShoutsFromPerson(\"Lucy\", 2, \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"0, 900\",\"1\",\"Sean\",null)\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenLucyIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear 1 shouts from Sean\n-> done: ShoutSteps.ThenPersonShouldHearShoutsFromPerson(\"Lucy\", 1, \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OnlyHearIn_RangeShouts(\"800, 800\",\"0\",\"Sean\",null)\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenLucyIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 800, 800\n-> done: ShoutSteps.GivenLucyIsAt(\"Sean\", 800, 800) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Sean\") (0.0s)\nThen Lucy should hear 0 shouts from Sean\n-> done: ShoutSteps.ThenPersonShouldHearShoutsFromPerson(\"Lucy\", 0, \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nGiven Oscar is a user\n-> done: ShoutSteps.GivenPersonsAUser(\"Oscar\") (0.0s)\nWhen Oscar shouts\n-> done: ShoutSteps.WhenPersonShouts(\"Oscar\") (0.0s)\nThen Oscar should hear 0 shouts from Oscar\n-> done: ShoutSteps.ThenPersonShouldHearShoutsFromPerson(\"Oscar\", 0, \"Oscar\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"1\",\"Sean\",null)\nTechTalk.SpecFlow.MissingStepDefinitionException : No matching step definition found for one or more steps.\n  at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError (TechTalk.SpecFlow.Infrastructure.TestStatus testStatus, System.String message) [0x00051] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001ad] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters (System.String listener, System.String count, System.String from, System.String[] exampleTags) [0x00143] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n2) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"0\",\"Oscar\",null)\nTechTalk.SpecFlow.MissingStepDefinitionException : No matching step definition found for one or more steps.\n  at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError (TechTalk.SpecFlow.Infrastructure.TestStatus testStatus, System.String message) [0x00051] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001ad] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters (System.String listener, System.String count, System.String from, System.String[] exampleTags) [0x00143] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n3) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Sean\",\"0\",\"Oscar\",null)\nTechTalk.SpecFlow.MissingStepDefinitionException : No matching step definition found for one or more steps.\n  at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError (TechTalk.SpecFlow.Infrastructure.TestStatus testStatus, System.String message) [0x00051] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001ad] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters (System.String listener, System.String count, System.String from, System.String[] exampleTags) [0x00143] in <5cb643e11ee149c796d109c39b8472d9>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n4) Error : SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters(\"Lucy\",\"1\",\"EmergencyUser\",null)\nTechTalk.SpecFlow.MissingStepDefinitionException : No matching step definition found for one or more steps.\n  at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError (TechTalk.SpecFlow.Infrastructure.TestStatus testStatus, System.String message) [0x00051] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfter\noutput truncated by cyber-dojo"}