{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //return Math.abs(x - other.x);\n    Double position = Math.sqrt((Math.pow(x - other.x, 2) + Math.pow(y - other.y, 2)));\n    \n    return (int)Math.round(position);\n\n    // return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"\nimport java.util.*;\n\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @When(\"^(\\\\w+) shouts$\")\n    public void userShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should not hear Oscar$\")\n    public void lucyShouldNotHearOscar() throws Throwable {\n        Assert.assertEquals(null, shouty.getShoutsHeardBy(\"Lucy\").get(\"Oscar\"));\n    }\n    \n    @Then(\"^(\\\\w+) should not hear herself$\")\n    public void userShouldNotHearHerself(String name) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(name).size());\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int numShouts) throws Throwable {\n        Assert.assertEquals(numShouts, shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if(!listener.equals(shouter)) {\n              List<String> personsShouts = entry.getValue();\n              int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n              if (distance < MESSAGE_RANGE)\n                  shoutsHeard.put(shouter, personsShouts);\n          }\n        \n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n        \n     Scenario: Multiple shouters\n        Given people are located at\n            |name  | x     | y |\n            | Lucy | 0     | 0 |\n            | Sean | 0     | 500 |\n            | Oscar | 1100 | 0 |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n     \n     Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n        \n     Scenario: Shouters should not hear their own shouts\n        When Oscar shouts\n        Then Oscar should not hear herself\n     \n     Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n            | Seans-location    | what-Lucy-hears |\n            | 0, 900            | Sean            |\n            | 800, 800          | nothing         |\n","output":"JUnit version 4.12\n........EEI......EE........EE.....EE\nFailed scenarios:\nhear_shout.feature:5 # Scenario: Multiple shouters\nhear_shout.feature:16 # Scenario: Multiple shouts from one person\nhear_shout.feature:35 # Scenario Outline: only hear in-range shouts\nhear_shout.feature:36 # Scenario Outline: only hear in-range shouts\n\n5 Scenarios (4 failed, 1 passed)\n20 Steps (4 failed, 1 skipped, 15 passed)\n0m0.156s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:30)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:40)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:21)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:20)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:31)\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:31)\n\n\nTime: 1.112\nThere were 8 failures:\n1) Then Lucy should not hear Oscar(Scenario: Multiple shouters)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:30)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n2) Scenario: Multiple shouters\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldNotHearOscar(ShoutSteps.java:30)\n\tat ✽.Then Lucy should not hear Oscar(hear_shout.feature:13)\n3) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:40)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:21)\n4) Scenario: Multiple shouts from one person\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearShoutsFromSean(ShoutSteps.java:40)\n\tat ✽.Then Lucy should hear 2 shouts from Sean(hear_shout.feature:21)\n5) Then Lucy should hear Sean(| 0, 900 | Sean |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:20)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:31)\n6) | 0, 900 | Sean |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucyShouldHearHim(ShoutSteps.java:20)\n\tat ✽.Then Lucy should hear Sean(hear_shout.feature:31)\n7) Then Lucy should hear nothing(| 800, 800 | nothing |)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:31)\n8) | 800, 800 | nothing |\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:28)\n\tat ShoutSteps.lucy_should_hear_nothing(ShoutSteps.java:25)\n\tat ✽.Then Lucy should hear nothing(hear_shout.feature:31)\n\nFAILURES!!!\nTests run: 27,  Failures: 8\n\nMay 25, 2018 3:51:14 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Fri May 25 03:51:14 GMT 2018]; root of context hierarchy\nMay 25, 2018 3:51:14 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nMay 25, 2018 3:51:14 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Fri May 25 03:51:14 GMT 2018]; root of context hierarchy\n","PersonLocation.java":"public class PersonLocation {\n  public String name;\n  public int x;\n  public int y;\n\n  public PersonLocation(String name, int x, int y){\n    this.name = name;\n    this.x = x;\n    this.y = y;\n  }\n}","LocationSteps.java":"\nimport java.util.*;\n\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocation) throws Throwable {\n        for(PersonLocation pl : personLocation) {\n            shouty.setLocation(pl.name, new Coordinate(pl.x, pl.y));\n        }\n    }\n    \n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void userIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n}\n"}