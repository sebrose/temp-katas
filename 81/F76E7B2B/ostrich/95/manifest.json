{"Coordinate.java":"\npublic class Coordinate {\n  public int x;\n  public int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    double xDistSquared = Math.pow(Math.abs(x - other.x), 2);\n    double yDistSquared = Math.pow(Math.abs(y - other.y), 2);\n    return (int)Math.sqrt(xDistSquared + yDistSquared);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, tags={\"@wip\"}, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\n\n@Scope(\"cucumber-glue\")\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    \n    @Autowired\n    private Shouty shouty;\n\n    @When(\"^(Lucy|Sean|Oscar) shouts$\")\n    public void nameShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear (Sean|Oscar)$\")\n    public void lucyShouldHearHim(String name) throws Throwable {\n        Map<String, List<String>> shoutsHeard = shouty.getShoutsHeardBy(\"Lucy\");\n        List<String> shout = shoutsHeard.get(name);\n        Assert.assertNotNull(shout);\n    }\n\n    @Then(\"^Lucy should not hear (Lucy|Sean|Oscar)$\")\n    public void lucyShouldNotHearHim(String name) throws Throwable {\n       Map<String, List<String>> shoutsHeard = shouty.getShoutsHeardBy(\"Lucy\");\n        List<String> shout = shoutsHeard.get(name);\n        Assert.assertNull(shout);    \n    }\n    \n    @Then(\"^Lucy should hear nothing$\")\n    public void lucyShouldHearNothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n   @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int arg1) throws Throwable {\n        Map<String, List<String>> shoutsHeard = shouty.getShoutsHeardBy(\"Lucy\");\n        Assert.assertEquals(1, shoutsHeard.size());\n        Assert.assertEquals(2, shoutsHeard.get(\"Sean\").size());\n    }\n\n}\n","Shouty.java":"import java.util.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.context.annotation.Scope;\n\n@Component\n@Scope(\"cucumber-glue\")\npublic class Shouty {\n  private static int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if ((distance < MESSAGE_RANGE) && (!listener.equals(shouter)))\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"ShoutyHelper\" scope=\"cucumber-glue\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","output":"JUnit version 4.12\n....SETUP BEFORE\nSETUP AGAIN BEFORE\n...TEARDOWN AFTER\nTEARDOWN AGAIN AFTER\n\n1 Scenarios (1 passed)\n3 Steps (3 passed)\n0m0.225s\n\n\nTime: 1.267\n\nOK (7 tests)\n\nMay 25, 2018 3:54:07 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2925bf5b: startup date [Fri May 25 03:54:07 GMT 2018]; root of context hierarchy\nMay 25, 2018 3:54:07 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Background: \n        Given Lucy is at 0, 0\n    Scenario Outline: Only hear in-range shouts\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n\n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900        | Sean      |\n          | 800, 800      | nothing   |\n\n      Scenario: Multiple shouters\n        Given people are located at\n         | name  | x | y |\n         | Lucy  | 0 | 0  |\n         | Sean  | 0 | 500 |\n         | Oscar | 1100 | 0  |\n        When Sean shouts \n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      @wip\n      Scenario: Shouters should not hear their own shouts\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n      Scenario: Multiple shouts from one person\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean","PersonLocation.java":"public class PersonLocation {\n  public int x;\n  public int y;\n  public String name;\n\n  public PersonLocation(int x, int y, String name){\n    this.x = x;\n    this.y = y;\n    this.name = name;\n  }\n}\n","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    \n    @Autowired\n    private Shouty shouty;\n\n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void nameIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> personList) throws Throwable {\n        for ( PersonLocation person : personList ) {\n            shouty.setLocation(person.name, new Coordinate(person.x, person.y));\n        }\n    }\n\n}","ShoutyHelper.java":"import org.springframework.stereotype.Component;\nimport org.springframework.context.annotation.Scope;\n\n@Component\n@Scope(\"cucumber-glue\")\n\npublic class ShoutyHelper extends Shouty {\n}","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\npublic class ShoutyHooks {\n    \n    @Before(order=1)\n    public void setUp() {\n        System.out.println(\"SETUP BEFORE\");\n    }\n \n    @Before(order=2)\n    public void setUpAgain() {\n        System.out.println(\"SETUP AGAIN BEFORE\");\n    }\n    \n    @After(order=2)\n    public void tearDown() {\n        System.out.println(\"TEARDOWN AFTER\");\n    }\n\n    @After(order=1)\n    public void tearDownAgain() {\n        System.out.println(\"TEARDOWN AGAIN AFTER\");\n    }\n}"}