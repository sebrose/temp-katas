{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    double xDistSquared = Math.pow(Math.abs(x - other.x), 2);\n    double yDistSquared = Math.pow(Math.abs(y - other.y), 2);\n    return (int)Math.sqrt(xDistSquared + yDistSquared);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^{word} is at {int}, {int}$\")\n    public void lucyIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^Sean shouts$\")\n    public void seanShouts() throws Throwable {\n        shouty.shout(\"Sean\", ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","output":"JUnit version 4.12\n....E\nTime: 0.01\nThere was 1 failure:\n1) initializationError(RunCukesTest)\ncucumber.runtime.CucumberException: java.util.regex.PatternSyntaxException: Illegal repetition near index 0\n^{word} is at {int}, {int}$\n^\n\tat cucumber.runtime.java.JavaBackend.addStepDefinition(JavaBackend.java:156)\n\tat cucumber.runtime.java.MethodScanner.scan(MethodScanner.java:68)\n\tat cucumber.runtime.java.MethodScanner.scan(MethodScanner.java:41)\n\tat cucumber.runtime.java.JavaBackend.loadGlue(JavaBackend.java:86)\n\tat cucumber.runtime.Runtime.<init>(Runtime.java:91)\n\tat cucumber.runtime.Runtime.<init>(Runtime.java:69)\n\tat cucumber.runtime.Runtime.<init>(Runtime.java:65)\n\tat cucumber.api.junit.Cucumber.createRuntime(Cucumber.java:78)\n\tat cucumber.api.junit.Cucumber.<init>(Cucumber.java:58)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n\tat org.junit.runner.Computer.getRunner(Computer.java:40)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:101)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:87)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:75)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:118)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\nCaused by: java.util.regex.PatternSyntaxException: Illegal repetition near index 0\n^{word} is at {int}, {int}$\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.closure(Pattern.java:3157)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2134)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat cucumber.runtime.java.JavaBackend.pattern(JavaBackend.java:201)\n\tat cucumber.runtime.java.JavaBackend.addStepDefinition(JavaBackend.java:151)\n\t... 27 more\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n"}