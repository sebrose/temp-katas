{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n    double xSquare = Math.pow(x-other.x, 2);\n    double ySquare = Math.pow(y-other.y, 2);\n    double squareDistance = xSquare + ySquare;\n      \n    return (int)Math.sqrt(squareDistance);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.*) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(.*) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(\"Lucy\").size());\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Sean\"));\n    }\n    \n    @Then(\"^Lucy should not hear (Lucy|Oscar)$\")\n    public void lucyShouldNotHearPerson(String name) throws Throwable {\n         Assert.assertEquals(false, shouty.getShoutsHeardBy(\"Lucy\").containsKey(name));\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n       Scenario: Shouters should not hear their own shouts \n        When Lucy shouts\n        Then Lucy should not hear Lucy\n","output":"JUnit version 4.12\n.......................EE\nFailed scenarios:\nhear_shout.feature:26 # Scenario: Shouters should not hear their own shouts\n\n4 Scenarios (1 failed, 3 passed)\n17 Steps (1 failed, 16 passed)\n0m0.138s\n\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.lucyShouldNotHearPerson(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:28)\n\n\nTime: 1.037\nThere were 2 failures:\n1) Then Lucy should not hear Lucy(Scenario: Shouters should not hear their own shouts)\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.lucyShouldNotHearPerson(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:28)\n2) Scenario: Shouters should not hear their own shouts\njava.lang.NullPointerException\n\tat Shouty.getShoutsHeardBy(Shouty.java:27)\n\tat ShoutSteps.lucyShouldNotHearPerson(ShoutSteps.java:28)\n\tat ✽.Then Lucy should not hear Lucy(hear_shout.feature:28)\n\nFAILURES!!!\nTests run: 23,  Failures: 2\n\nMay 25, 2018 2:34:45 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6ed3ccb2: startup date [Fri May 25 02:34:45 GMT 2018]; root of context hierarchy\nMay 25, 2018 2:34:45 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n"}