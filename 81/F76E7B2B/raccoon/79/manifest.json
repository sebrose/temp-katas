{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n    double xSquare = Math.pow(x-other.x, 2);\n    double ySquare = Math.pow(y-other.y, 2);\n    double squareDistance = xSquare + ySquare;\n      \n    return (int)Math.sqrt(squareDistance);\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  // @Test\n  // public void itCalculatesTheDistanceFromAnotherCoordinate() {\n  //     Coordinate a = new Coordinate(0, 0);\n  //     Coordinate b = new Coordinate(300, 400);\n  //     assertEquals(500, a.distanceFrom(b));\n  // }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private ShoutyHelper shouty;\n \n    @When(\"^(.*) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucyShouldHearHim() throws Throwable {\n        lucyShouldHearShoutsFromSean(1);\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int shouts) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(\"Lucy\").containsKey(\"Sean\"));\n        Assert.assertEquals(shouts, shouty.getShoutsHeardBy(\"Lucy\").get(\"Sean\").size());\n    }\n    \n    @Then(\"^Lucy should not hear (Lucy|Oscar)$\")\n    public void lucyShouldNotHearPerson(String name) throws Throwable {\n         Assert.assertEquals(false, shouty.getShoutsHeardBy(\"Lucy\").containsKey(name));\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(\"Lucy\").size());\n    }\n}\n","Shouty.java":"import java.util.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.context.annotation.*;\nimport cucumber.api.java.en.*;\n\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n  private Map<String, List<String> > blockedHashtags = new HashMap<String, List<String> >();\n  private Map<String, Boolean> dndToggle = new HashMap<String, Boolean>();\n    \n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          if (!listener.equals(shouter)) { \n      \n            List<String> personsShouts = entry.getValue();\n            int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n            if (distance < MESSAGE_RANGE)\n                shoutsHeard.put(shouter, personsShouts);\n          }\n      }\n\n      return shoutsHeard;\n  }\n    \n  public void blockHashTag(String user, String hashtag) {\n    List<String> hashTags;\n      \n    if (blockedHashtags.containsKey(hashtag)) {\n        hashTags = blockedHashtags.get(user);   \n    } else {\n        hashTags = new ArrayList<String>(); \n    }\n      \n    hashTags.add(hashtag);\n  }\n    \n  public void unblockedHashTag(String user, String hashtag) {\n    if (blockedHashtags.containsKey(hashtag)) {\n        List<String> hashTags = blockedHashtags.get(user); \n        hashTags.remove(hashtag);\n    }\n  }\n    \n  public void setDnD(String user, Boolean value) {\n      dndToggle.put(user, value);\n  }\n    \n  public Boolean isDnDOn(String user) {\n    if (dndToggle.containsKey(user)) {\n        return dndToggle.get(user);\n    }\n    return false;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"ShoutyHelper\" scope=\"cucumber-glue\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n      Background:\n        Given Lucy is at 0, 0\n        \n      Scenario: Multiple shouters\n        Given people are locate at\n            | name      | x     | y     |\n            | Sean      | 0     | 500   |\n            | Oscar     | 1100  | 0     |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n       Scenario: Shouters should not hear their own shouts \n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n       Scenario Outline: only hear in-range shouts\n        And Sean is at <Seans-location>\n        When Sean shouts \n        Then Lucy should hear <what-Lucy-hears>\n        \n        Examples: some simple examples\n            |Seans-location | what-Lucy-hears |\n            |0, 900         | Sean            |\n            |800, 800       | nothing         |\n            \n       Scenario: Multiple shouts from one person\n        And Sean is at 0, 500\n        When Sean shouts \n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n","output":"JUnit version 4.12\n...Before\nBefore 2\n.EE.EE.EE.EE.EE.EEIAfter\nAfter 2\n.Before\nBefore 2\n......After\nAfter 2\n.Before\nBefore 2\n...After\nAfter 2\n.Before\nBefore 2\n....After\nAfter 2\n.Before\nBefore 2\n....After\nAfter 2\n.Before\nBefore 2\n.....After\nAfter 2\n\nUndefined scenarios:\ndnd.feature:11 # Scenario: DND is turned on\n\n6 Scenarios (1 undefined, 5 passed)\n29 Steps (1 skipped, 6 undefined, 22 passed)\n0m0.199s\n\n\nYou can implement missing steps with the snippets below:\n\n@Given(\"^Lucy is at (\\\\d+),(\\\\d+)$\")\npublic void lucyIsAt(int arg1, int arg2) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@Given(\"^Oscar is at (\\\\d+),(\\\\d+)$\")\npublic void oscarIsAt(int arg1, int arg2) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@Given(\"^Sean is at (\\\\d+),(\\\\d+)$\")\npublic void seanIsAt(int arg1, int arg2) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@Given(\"^Lucy has enabled DND$\")\npublic void lucyHasEnabledDND() throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@When(\"^Sean shouts \\\"([^\\\"]*)\\\"$\")\npublic void seanShouts(String arg1) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n@When(\"^Oscar shouts \\\"([^\\\"]*)\\\"$\")\npublic void oscarShouts(String arg1) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n\nTime: 1.251\nThere were 12 failures:\n1) Given Lucy is at 0,0(Scenario: DND is turned on)\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.runBackground(CucumberScenario.java:59)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:42)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n2) Scenario: DND is turned on\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.runBackground(CucumberScenario.java:59)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:42)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n3) Given Oscar is at 0,0(Scenario: DND is turned on)\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.runBackground(CucumberScenario.java:59)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:42)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n4) Scenario: DND is turned on\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime\noutput truncated by cyber-dojoMay 25, 2018 6:29:02 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@710f4dc7: startup date [Fri May 25 06:29:02 GMT 2018]; root of context hierarchy\nMay 25, 2018 6:29:02 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","PersonLocation.java":"public class PersonLocation {\n    String name;\n    int x;\n    int y;\n     \n    public PersonLocation(String name, int x, int y) {\n        this.x = x;\n        this.y = y;\n        this.name = name;\n    }\n    \n}","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.*;\n\npublic class LocationSteps {\n    @Autowired\n    private ShoutyHelper shouty;\n\n    @Given(\"^people are locate at$\")\n    public void peopleAreLocateAt(List<PersonLocation> locations) throws Throwable {\n        for (PersonLocation location : locations) {\n            shouty.setLocation(location.name, new Coordinate(location.x, location.y));\n        }\n    }\n    \n    @Given(\"^(.*) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n}\n","ShoutyHelper.java":"import java.util.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.context.annotation.*;\nimport cucumber.api.java.en.*;\n\n@Component\n@Scope(\"cucumber-glue\")\npublic class ShoutyHelper extends Shouty {\n    \n}","ShoutyHooks.java":"import cucumber.api.java.Before;\nimport cucumber.api.java.After;\n\npublic class ShoutyHooks {\n       \n    @Before(order = 1)\n    public void before() {\n        System.out.println(\"Before\");\n    }\n    \n    @Before(order = 2)\n    public void before2() {\n        System.out.println(\"Before 2\");\n    }\n    \n    @After(order = 1)\n    public void after2() {\n        System.out.println(\"After 2\");\n    }\n    \n    @After(order = 2)\n    public void after() {\n        System.out.println(\"After\");\n    }\n    \n\n}","dnd.feature":"Feature: Do not disturb\n    When DND is on, no shouts should be shown, \n    if its off and certain hashtags are specified, \n    it shouldnt show those either.\n    \n    Background:\n        Given Lucy is at 0,0\n        Given Oscar is at 0,0\n        Given Sean is at 0,0\n        \n    Scenario: DND is turned on\n        Given Lucy has enabled DND\n        When Sean shouts \"shout\"\n        And Oscar shouts \"a shout\"\n        Then Lucy should not see any shouts\n        \n"}