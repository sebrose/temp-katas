{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    // return Math.abs(x - other.x);\n        return (int)Math.sqrt(Math.pow((x - other.x), 2) + Math.pow((y - other.y), 2));\n    //  return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n    \n   @Test\n   public void itCalculatesTheDistanceFromNegativeCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(-300, -400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n    \n    \n   @Test\n   public void itCalculatesTheDistanceFromTheOrigin() {\n       Coordinate a = new Coordinate(300, 400);\n       Coordinate b = new Coordinate(0, 0);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport java.util.*;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(.+) is at (\\\\d+), (\\\\d+)$\")\n    public void personIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"^(.+) shouts$\")\n    public void seanShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n    \n    @Then(\"^(\\\\w+) should (not)? hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void multipleShouts(String listener, boolean shouldHear, int numberShouts, String shouter) {\n        throw new PendingException();\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertEquals(true, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n    }\n    \n    @Then(\"^(.+) should not hear (.+)$\")\n    public void listenerShouldNotHearShouter(String listener, String shouter) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n        switch(shouter) {\n            case \"anything\":\n                Assert.assertEquals(0, shouty.getShoutsHeardBy(listener).size());\n                break;\n            default:\n                Assert.assertEquals(false, shouty.getShoutsHeardBy(listener).containsKey(shouter));\n                break;\n        }\n      \n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> people) throws Throwable {\n        for (PersonLocation p: people) {\n            shouty.setLocation(p.getName(), new Coordinate(p.getX(), p.getY()));\n        }\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && distance > 0 )\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should <what-Lucy-hears>\n        \n        Examples: in range examples\n            | Seans-location | what-Lucy-hears  | \n            | 0, 900         | hear Sean        |\n            | 800, 800       | not hear anything|\n  \n      Scenario: Multiple shouters\n        Given people are located at\n        |name   | x    | y    |\n        |Lucy   | 0    | 0    |\n        |Sean   | 0    | 500  |\n        |Oscar  | 1100 | 0    |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n       Scenario: Shouter does not hear own shout\n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n\n        Scenario: Multiple shouts from one person\n          Given Lucy is at 0, 0\n          And Sean is at 0, 500\n          When Sean shouts\n          And Sean shouts\n          Then Lucy should hear 2 shouts from Sean","output":"JUnit version 4.12\n...............................EE\nUndefined scenarios:\nhear_shout.feature:32 # Scenario: Multiple shouts from one person\n\n5 Scenarios (1 undefined, 4 passed)\n21 Steps (1 undefined, 20 passed)\n0m0.177s\n\n\nYou can implement missing steps with the snippets below:\n\n@Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\npublic void lucyShouldHearShoutsFromSean(int arg1) throws Throwable {\n    // Write code here that turns the phrase above into concrete actions\n    throw new PendingException();\n}\n\n\nTime: 1.141\nThere were 2 failures:\n1) Then Lucy should hear 2 shouts from Sean(Scenario: Multiple shouts from one person)\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n2) Scenario: Multiple shouts from one person\ncucumber.api.PendingException: TODO: implement me\n\tat cucumber.runtime.junit.JUnitReporter.addFailure(JUnitReporter.java:134)\n\tat cucumber.runtime.junit.JUnitReporter.addFailureOrIgnoreStep(JUnitReporter.java:122)\n\tat cucumber.runtime.junit.JUnitReporter.result(JUnitReporter.java:91)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:281)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n\nFAILURES!!!\nTests run: 31,  Failures: 2\n\nMay 25, 2018 6:24:46 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Fri May 25 06:24:45 GMT 2018]; root of context hierarchy\nMay 25, 2018 6:24:46 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\nMay 25, 2018 6:24:46 AM org.springframework.context.support.ClassPathXmlApplicationContext doClose\nINFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Fri May 25 06:24:45 GMT 2018]; root of context hierarchy\n","PersonLocation.java":"public class PersonLocation {\n \n    private String name;\n    private int x;\n    private int y;\n    \n    public PersonLocation() {\n        this.name = \"\";\n        this.x = 0;\n        this.y = 0;\n    }\n    \n    public PersonLocation(String name, int x, int y) {\n        this.name = name;\n        this.x = x;\n        this.y = y;\n    }\n    \n    public String getName() { return name; }\n    public int getX() { return x; }\n    public int getY() { return y; }\n    \n}","do_not_disturb.txt":"Feature: Do not disturb\n\n    Scenario: Listener mutes all shouts\n        Given Lucy is at 0, 0\n        And Sean is at 500, 0\n        And Lucy is in do not disturb mode\n        When Sean shouts\n        Then Lucy should not hear Sean\n    \n    Scenario: Listener mutes based on distance\n        Given people are located at\n        |name   | x    | y    |\n        |Lucy   | 0    | 0    |\n        |Sean   | 0    | 499  |\n        |Oscar  | 0    | 501  |\n        And Lucy sets do not disturb to 500 metres\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should hear Sean\n        And Lucy should not hear Oscar\n\n    Scenario: Listener mutes specific shouters\n        Given people are located at\n        |name   | x    | y    |\n        |Lucy   | 0    | 0    |\n        |Sean   | 0    | 500  |\n        |Oscar  | 0    | 500  |\n        And Lucy sets do not disturb to Sean\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should hear Oscar\n        And Lucy should not hear Sean\n\n    Scenario: Listener unmutes specific shouter\n        Given people are located at\n            |name   | x    | y    |\n            |Lucy   | 0    | 0    |\n            |Sean   | 0    | 499  |\n        And Lucy sets do not disturb to Sean\n        And Lucy unsets do not disturb to Sean\n        When Sean shouts\n        Then Lucy should hear Sean\n        \n\n    Scenario: Listener sees shouts missed during do not disturb\n        Given people are located at\n        |name   | x    | y    |\n        |Lucy   | 0    | 0    |\n        |Sean   | 0    | 499  |\n        And Lucy sets do not disturb\n        And Sean shouts\n        When Lucy disables do not disturb\n        Then Lucy should hear Sean\n        "}