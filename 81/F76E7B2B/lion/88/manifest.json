{"output":"JUnit version 4.12\n....E\nTime: 0.008\nThere was 1 failure:\n1) initializationError(RunCukesTest)\ncucumber.runtime.CucumberException: Step generated from scenario outline '' is empty\n\tat cucumber.runtime.model.CucumberScenarioOutline.createExampleStep(CucumberScenarioOutline.java:76)\n\tat cucumber.runtime.model.CucumberScenarioOutline.createExampleScenario(CucumberScenarioOutline.java:63)\n\tat cucumber.runtime.model.CucumberExamples.createExampleScenarios(CucumberExamples.java:28)\n\tat cucumber.runtime.junit.ExamplesRunner.buildRunners(ExamplesRunner.java:28)\n\tat cucumber.runtime.junit.ExamplesRunner.<init>(ExamplesRunner.java:21)\n\tat cucumber.runtime.junit.ScenarioOutlineRunner.buildRunners(ScenarioOutlineRunner.java:29)\n\tat cucumber.runtime.junit.ScenarioOutlineRunner.<init>(ScenarioOutlineRunner.java:21)\n\tat cucumber.runtime.junit.FeatureRunner.buildFeatureElementRunners(FeatureRunner.java:81)\n\tat cucumber.runtime.junit.FeatureRunner.<init>(FeatureRunner.java:31)\n\tat cucumber.api.junit.Cucumber.addChildren(Cucumber.java:106)\n\tat cucumber.api.junit.Cucumber.<init>(Cucumber.java:62)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n\tat org.junit.runner.Computer.getRunner(Computer.java:40)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:101)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:87)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:75)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:118)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n\n","Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    // return Math.abs(x - other.x);\n    int dx = Math.abs(x - other.x);\n    int dy = Math.abs(y - other.y);\n    return (int) Math.sqrt( ( Math.pow(dx, 2) + Math.pow(dy, 2) ) );\n    //return 0;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n   @Test\n   public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n   }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.DataTable;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class ShoutSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    \n    @Autowired\n    private ShoutyHelper shouty;\n\n    \n    @When(\"^(\\\\w+) shouts$\")\n    public void shouterShouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^(\\\\w+) should hear (\\\\w+)$\")\n    public void listenerShouldHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertNotNull(shouty.getShoutsHeardBy(listener).get(shouter));\n        Assert.assertEquals(1, shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n\n    @Then(\"^(\\\\w+) should not hear anything$\")\n    public void listenerShouldHearNothing(String listener) throws Throwable {\n        Assert.assertEquals(0, shouty.getShoutsHeardBy(listener).size());\n    }\n\n    @Then(\"^(\\\\w+) should not hear shout from (\\\\w+)$\")\n    public void listenerShouldNotHearShouter(String listener, String shouter) throws Throwable {\n        Assert.assertNull(shouty.getShoutsHeardBy(listener).get(shouter));\n    }\n\n    \n    @Then(\"^(\\\\w+) should hear (\\\\d+) shouts from (\\\\w+)$\")\n    public void lucyShouldHearShoutsFromSean(String listener,int shoutCount, String shouter) throws Throwable {\n        Assert.assertNotNull(shouty.getShoutsHeardBy(listener).get(shouter));\n        Assert.assertEquals(shoutCount,shouty.getShoutsHeardBy(listener).get(shouter).size());\n    }\n}\n","Shouty.java":"import java.util.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.context.annotation.Scope;\n\n//@Component\n//@Scope(\"cucumber-glue\")\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE && !shouter.equals(listener) )\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    \n    <bean class=\"ShoutyHelper\" scope=\"cucumber-glue\" \n            autowire-candidate=\"true\" />\n    \n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Background:\n        Given Lucy is at 0, 0\n\n    Scenario: Multiple shouters\n        Given people are located at\n        | name | x | y |\n        | Lucy | 0 | 0 |\n        | Sean | 0 | 500 |\n        | Oscar | 1100 | 0|\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear shout from Oscar\n        But Lucy should hear Sean\n        \n    Scenario: Should not hear own shout\n        Given Lucy is a user\n        When Lucy shouts\n        Then Lucy should not hear shout from Lucy \n        \n    Scenario Outline: only hear in-range shouts\n        Given \n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should <what-Lucy-hears>\n        \n        Examples: some simple examples\n            | Seans-location | what-Lucy-hears      |\n            | 0, 900         | hear Sean            |\n            | 800, 800       | not hear anything    |\n    \n    Scenario: Multiple shouts from one person\n        Given \n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ","PersonLocation.java":"public class PersonLocation {\n\n    private String name;\n    private int x;\n    private int y;\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    public int getX() { return x; }\n    public void setX(int x) { this.x = x; }\n    public int getY() { return y; }\n    public void setY(int y) { this.y = y; }\n\n}","LocationSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.DataTable;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class LocationSteps {\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    @Autowired\n    private ShoutyHelper shouty;\n\n    @Given(\"^(\\\\w+) is at (\\\\d+), (\\\\d+)$\")\n    public void userIsAt(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }\n    \n    @Given(\"^(\\\\w+) is a user$\")\n    public void user(String name) throws Throwable {\n        shouty.setLocation(name, new Coordinate(0,0));\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocation) throws Throwable {\n        for(PersonLocation person : personLocation){\n            String name = person.getName();\n            int x = person.getX();\n            int y = person.getY();\n            System.out.println(\"👧 🔜 \" + name + \" [\" + x + \", \" + y + \"]\");\n            shouty.setLocation(name, new Coordinate(x, y));\n            \n        }\n    }\n    \n}\n","ShoutyHelper.java":"\npublic class ShoutyHelper extends Shouty {}"}