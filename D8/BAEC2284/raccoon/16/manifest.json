{"cyber-dojo.sh":"set -e\nexport RELIABLE_CONNECTION\nexport VOLATILE_STATS_DATA\nexport FAKE_INITIALISATION_DATA # =\"19,123456.78;22,123456.78;57,123456.78\"\n\nrm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","EcoStat.java":"public class EcoStat {\n    public final String salesPersonName;\n    public final float revenuePerMile;\n\n    public EcoStat(String salesPersonName, float revenuePerMile) {\n        this.salesPersonName = salesPersonName;\n        this.revenuePerMile = revenuePerMile;\n    }\n}\n","EcoStatCollectionBuilder.java":"import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class EcoStatCollectionBuilder {\n    private List<EcoStat> defaultEcoStatCollection =\n        new ArrayList<EcoStat>(){{\n            add(new EcoStat(\"David Allen\", 1.234f));\n            add(new EcoStat(\"Lisa Crispin\", 0.025f));\n            add(new EcoStat(\"Ian Dees\", 98.76f));\n        }};\n\n    private Map<String, Float> ecoStatData = null;\n\n    public List<EcoStat> build() {\n        if (ecoStatData == null) {\n            return defaultEcoStatCollection;\n        } else {\n            List<EcoStat> ecoStatCollection = new ArrayList<EcoStat>();\n\n            for (Map.Entry<String, Float> entry : ecoStatData.entrySet()) {\n                ecoStatCollection.add(new EcoStat(entry.getKey(), entry.getValue()));\n            }\n\n            return ecoStatCollection;\n        }\n    }\n\n    public EcoStatCollectionBuilder withSalesPersonRpm(String name, float rpm) {\n        if (ecoStatData == null){\n            ecoStatData = new HashMap<String, Float>();\n        }\n\n        ecoStatData.put(name, rpm);\n        return this;\n    }\n}\n","EndToEndTests.java":"import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class EndToEndTests {\n    @Before\n    public void set_up() throws Exception {\n        File report = new File(\"report.xml\");\n        Files.deleteIfExists(report.toPath());\n    }\n\n    @Test\n    public void single_sales_person() throws Exception {\n        // run report\n        run(\"ShoutyReportJob\", \"test_case_1_input.csv\");\n\n        // check XML report has been generated\n        Assert.assertTrue(new File(\"report.xml\").isFile());\n        assertXmlFilesEqual(\n            \"test_case_1_expected.xml\",\n            \"report.xml\"\n        );\n    }\n\n    @Test\n    public void multiple_sales_people() throws Exception {\n        // run report\n        run(\"ShoutyReportJob\", \"test_case_2_input.csv\");\n\n        // check XML report has been generated\n        Assert.assertTrue(new File(\"report.xml\").isFile());\n        assertXmlFilesEqual(\n            \"test_case_2_expected.xml\",\n            \"report.xml\"\n        );\n    }\n\n    private void run(String mainClass, String args) throws Exception {\n        String[] command = {\"java\", \"-cp\", \".\", mainClass, args};\n        ProcessBuilder processBuilder = new ProcessBuilder(command);\n        processBuilder.inheritIO();\n        Process process = processBuilder.start();\n        process.waitFor();\n    }\n\n    private void assertXmlFilesEqual(String expectedPath, String actualPath) throws IOException {\n        List<Map<String, Object>> expected = documentToListOfMaps(XmlHelper.parse(readAllLines(expectedPath)));\n        List<Map<String, Object>> actual = documentToListOfMaps(XmlHelper.parse(readAllLines(actualPath)));\n\n        String message = String.format(\"Expected XML to contain %s, but got %s\", expected, actual);\n        Assert.assertEquals(message, expected.size(), actual.size());\n        for (int i = 0; i < expected.size(); i++) {\n            Map<String, Object> entry = expected.get(i);\n            Assert.assertTrue(message, actual.contains(entry));\n        }\n    }\n\n    private static List<Map<String, Object>> documentToListOfMaps(Document document) {\n        List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n        NodeList nodes = document.getDocumentElement().getChildNodes();\n\n        for (int nodeIndex = 0; nodeIndex < nodes.getLength(); nodeIndex++) {\n            Node node = nodes.item(nodeIndex);\n\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                NamedNodeMap nodeMap = node.getAttributes();\n                HashMap<String, Object> nodeResult = new HashMap<String,Object>();\n\n                for (int i = 0; i < nodeMap.getLength(); i++) {\n                    Node attr = nodeMap.item(i);\n                    nodeResult.put(attr.getNodeName(), attr.getNodeValue());\n                }\n\n                result.add(nodeResult);\n            }\n        }\n        return result;\n    }\n\n    private String readAllLines(String path) throws IOException {\n        return Files.readAllLines(Paths.get(path)).stream().map(l -> l).collect(Collectors.joining(\"\\n\"));\n    }\n}\n","FakeRevenueProviderBuilder.java":"import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class FakeRevenueProviderBuilder {\n    private String defaultCustomerData = \"19,123456.78;22,123456.78;57,123456.78\";\n    private Map<Integer,Double> builderData = null;\n\n    public RevenueProvider build() {\n        String initialisationData = \"\";\n\n        if (builderData == null) {\n            initialisationData = defaultCustomerData;\n        } else {\n            String separator = \"\";\n\n            for (Map.Entry<Integer, Double> entry : builderData.entrySet()) {\n                initialisationData += separator + entry.getKey() + \",\" + entry.getValue();\n                separator = \";\";\n            }\n        }\n        return new FakeRevenueProvider(initialisationData);\n    }\n\n    public FakeRevenueProviderBuilder withCustomerRevenue(int id, double revenue) {\n        if (builderData == null) {\n          builderData = new HashMap<Integer,Double>();\n        }\n\n        builderData.put(id, revenue);\n\n        return this;\n    }\n}\n","FakeRevenueProvider.java":"import java.util.HashMap;\nimport java.util.Map;\n\npublic class FakeRevenueProvider implements RevenueProvider {\n    Map<Integer, Double> revenueData = new HashMap<>();\n\n    public FakeRevenueProvider(String data) {\n        for (String tuple : data.split(\";\")) {\n            String[] pair = tuple.split(\",\");\n            revenueData.put(Integer.parseInt(pair[0]), Double.parseDouble(pair[1]));\n        }\n    }\n\n    public double getRevenue(int customerID) {\n        if (revenueData.containsKey(customerID)) {\n            return revenueData.get(customerID);\n        }\n        throw new ShoutyStatsServiceException(\"No such Customer ID: \" + customerID);\n    }\n}\n","RevenueProvider.java":"public interface RevenueProvider {\n    double getRevenue(int customerID);\n}\n","MileageClaim.java":"public class MileageClaim {\n    public final String name;\n    public final int miles;\n    public final int customerID;\n\n    public MileageClaim(String name, int miles, int customerId) {\n        this.name = name;\n        this.miles = miles;\n        this.customerID = customerId;\n    }\n}\n","MileageClaimCollectionBuilder.java":"import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MileageClaimCollectionBuilder {\n    private List<MileageClaim> defaultMileageClaimCollection =\n        new ArrayList<MileageClaim>(){{\n            add(new MileageClaim(\"David Allen\", 130000, 57));\n            add(new MileageClaim(\"Lisa Crispin\", 27000, 19));\n            add(new MileageClaim(\"Ian Dees\", 19238855, 22));\n        }};\n\n    private List<MileageClaim> mileageClaimCollection = null;\n\n    public List<MileageClaim> build() {\n        if (mileageClaimCollection == null) {\n            return defaultMileageClaimCollection;\n        } else {\n            return mileageClaimCollection;\n        }\n    }\n\n    public MileageClaimCollectionBuilder withSalesPersonMilesForCustomer(\n      String name,\n      int miles,\n      int id) {\n\n        if (mileageClaimCollection == null){\n            mileageClaimCollection = new ArrayList<MileageClaim>();\n        }\n\n        mileageClaimCollection.add(new MileageClaim(name, miles, id));\n        return this;\n    }\n}\n","ProductionRevenueProvider.java":"import org.w3c.dom.Document;\n\npublic class ProductionRevenueProvider implements RevenueProvider {\n    private ShoutyStatsService service = new ShoutyStatsService();\n\n    public double getRevenue(int customerID) {\n      \n        String requestXml = \"<Customer id=\\\"\" + customerID + \"\\\"/>\";\n        String responseXml = service.getRevenueForCustomer(requestXml);\n        Document responseDocument = XmlHelper.parse(responseXml);\n\n        return Double.parseDouble(responseDocument.getDocumentElement()\n                                  .getAttribute(\"revenue\"));\n     \n\n     // throw new java.lang.\n     //     UnsupportedOperationException(\"Uncomment code above and delete this exception\");\n    }\n}\n","ShoutyReportJob.java":"import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nclass ShoutyReportJob {\n    public static void main(String[] args) throws IOException {\n        String path = args[0];\n        List<MileageClaim> mileageClaims = readMileageClaims(path);\n\n        ShoutyReportProcessor job = new ShoutyReportProcessor(mileageClaims);\n        writeEcoStatReport(job.process());\n    }\n\n/*\n    private static RevenueProvider createRevenueProvider() {\n        if (System.getenv().get(\"FAKE_INITIALISATION_DATA\") != null) {\n            return new FakeRevenueProvider(\n                System.getenv().get(\"FAKE_INITIALISATION_DATA\"));\n        }\n\n        return new ProductionRevenueProvider();\n    }\n*/\n\n    private static List<MileageClaim> readMileageClaims(String claimsPath) throws IOException {\n        List<MileageClaim> mileageClaims = new ArrayList<>();\n        BufferedReader reader = new BufferedReader(new FileReader(claimsPath));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            String[] values = line.split(\",\");\n            mileageClaims.add(new MileageClaim(values[0], Integer.parseInt(values[1]), Integer.parseInt(values[2])));\n        }\n        return mileageClaims;\n    }\n\n\n    private static void writeEcoStatReport(List<EcoStat> results) {\n        Document doc = XmlHelper.newDocument();\n        Element ecoReport = doc.createElement(\"ecoReport\");\n        doc.appendChild(ecoReport);\n\n        for (EcoStat stat : results) {\n            Element node = doc.createElement(\"ecoStat\");\n            node.setAttribute(\"SalespersonName\", stat.salesPersonName);\n            node.setAttribute(\"RevenuePerMile\", String.valueOf(stat.revenuePerMile));\n            ecoReport.appendChild(node);\n        }\n\n        XmlHelper.write(doc, \"report.xml\");\n    }\n}\n","ShoutyReportProcessor.java":"import org.w3c.dom.Document;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ShoutyReportProcessor {\n    List<MileageClaim> mileageClaims;\n   // ShoutyStatsService statsService = new ShoutyStatsService();\n    RevenueProvider revenueService = new ProductionRevenueProvider();\n\n    public ShoutyReportProcessor(List<MileageClaim> mileageClaims) {\n        this.mileageClaims = mileageClaims;\n    }\n\n    public List<EcoStat> process() {\n        List<EcoStat> results = new ArrayList<EcoStat>();\n\n        for (MileageClaim claim : mileageClaims) {\n          //  String requestXml = \"<Customer id=\\\"\" + claim.customerID + \"\\\"/>\";\n           Double revenue = revenueService.getRevenue(claim.customerID);\n           // Document responseDocument = XmlHelper.parse(responseXml);\n\n            double revenue = Double.parseDouble(revenue);\n            float revenuePerMile = (float) revenue / (float) claim.miles;\n\n            results.add(new EcoStat(claim.name, revenuePerMile));\n        }\n\n        return results;\n    }\n}\n","ShoutyStatsService.java":"// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n// DO NOT LOOK IN THIS FILE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\npublic class ShoutyStatsService {\n    private static Random rnd = new Random();\n\n    private int latestEcoStatsMonth;\n    private int latestEcoStatsYear;\n    private Map<String, Map<String, Float>> ecoStatsStore = new HashMap<>();\n\n    private Map<Integer, Double> revenueByCustomerId = new HashMap<Integer, Double>() {{\n        put(1, 234.50);\n        put(19, 123456.78);\n        put(22, 123456.78);\n        put(57, 123456.78);\n    }};\n\n    public ShoutyStatsService() {\n        if (System.getenv(\"VOLATILE_STATS_DATA\") != null) {\n            revenueByCustomerId = new HashMap<>();\n            for (int i = 0; i < 10; i++) {\n                revenueByCustomerId.put(rnd.nextInt(1000), rnd.nextInt(99999999) / 100.0);\n            }\n        }\n    }\n\n    public String getRevenueForCustomer(String customerXml) {\n        checkServiceConnection();\n        int customerID = extractCustomerId(customerXml);\n        if (!revenueByCustomerId.containsKey(customerID))\n            throw new ShoutyStatsServiceException(\"No customer found with ID '\" + customerID + \"'\");\n\n        return \"<CustomerStats id=\\\"\" +\n                customerID +\n                \"\\\" revenue=\\\"\" +\n                revenueByCustomerId.get(customerID) +\n                \"\\\"/>\";\n    }\n\n    public String getCustomerIDs() {\n        StringBuilder result = new StringBuilder();\n        result.append(\"<Customers>\");\n        for (Integer id : revenueByCustomerId.keySet()) {\n            result.append(\"<Customer id=\\\"\");\n            result.append(id);\n            result.append(\"\\\"/>\");\n        }\n        result.append(\"</Customers>\");\n\n        return result.toString();\n    }\n\n    public String isValidCustomer(String customerXml) {\n        int id = extractCustomerId(customerXml);\n\n        if (revenueByCustomerId.containsKey(id)) {\n            return \"<booleanResponse result=\\\"TRUE\\\" />\";\n        } else {\n            return \"<booleanResponse result=\\\"FALSE\\\" />\";\n        }\n    }\n\n    public String getLatestEcoStatsDate() {\n        return \"<LatestEcoStatsDate year=\\\"\" +\n                String.format(\"%04d\", latestEcoStatsYear) +\n                \"\\\" month=\\\"\" +\n                String.format(\"%04d\", latestEcoStatsMonth) +\n                \"\\\" />\";\n    }\n\n    public void setEcoStats(String ecoStatsXml) {\n        Document doc = XmlHelper.parse(ecoStatsXml);\n        int month = Integer.parseInt(doc.getDocumentElement().getAttribute(\"month\"));\n        int year = Integer.parseInt(doc.getDocumentElement().getAttribute(\"year\"));\n\n        String key = createKey(year, month);\n\n        if (year < latestEcoStatsYear ||\n                (year == latestEcoStatsYear && month < latestEcoStatsMonth)) {\n            throw new ShoutyStatsServiceException(\"EcoStats for a later month have already been set\");\n        }\n\n        storeEcoStats(key, doc.getDocumentElement());\n        latestEcoStatsYear = year;\n        latestEcoStatsMonth = month;\n    }\n\n    public String getEcoStatsWinnerFor(String dateXml) {\n        String winnersName = \"Nobody\";\n        float winningRevenuePerMile = 0;\n\n        Document doc = XmlHelper.parse(dateXml);\n        int month = Integer.parseInt(doc.getDocumentElement().getAttribute(\"month\"));\n        int year = Integer.parseInt(doc.getDocumentElement().getAttribute(\"year\"));\n        String key = createKey(year, month);\n\n        for (Map.Entry<String, Float> stat : ecoStatsStore.get(key).entrySet()) {\n            if (stat.getValue() > winningRevenuePerMile) {\n                winnersName = stat.getKey();\n                winningRevenuePerMile = stat.getValue();\n            }\n        }\n\n        return \"<ecoStatsWinner SalespersonName=\\\"\" +\n                winnersName +\n                \"\\\" />\";\n    }\n\n    private int extractCustomerId(String xml) {\n      Document doc = XmlHelper.parse(xml);\n\n      return Integer.parseInt(doc.getDocumentElement().getAttribute(\"id\"));\n    }\n\n    private String createKey(int year, int month) {\n        return String.format(\"%04d-%02d\", year, month);\n    }\n\n    private void storeEcoStats(String key, Element root) {\n        if (root.hasChildNodes()) {\n            Map<String, Float> ecoStats = new HashMap<>();\n\n            Element ecoStatNode = (Element) root.getFirstChild();\n\n            while (ecoStatNode != null) {\n                ecoStats.put(ecoStatNode.getAttribute(\"SalespersonName\"), Float.parseFloat(ecoStatNode.getAttribute(\"RevenuePerMile\")));\n                ecoStatNode = (Element) ecoStatNode.getNextSibling();\n            }\n\n            ecoStatsStore.put(key, ecoStats);\n        }\n    }\n\n    private void checkServiceConnection() {\n        if (System.getenv(\"RELIABLE_CONNECTION\") != null)\n            return;\n\n        int parityControl = rnd.nextInt(10);\n        if (parityControl == 1)\n            throw new ShoutyStatsServiceException(\"shouty.reporting.ShoutyStatsService connection error - please wait a few moments and try your request again\");\n    }\n}\n","ShoutyStatsServiceException.java":"public class ShoutyStatsServiceException extends RuntimeException {\n    public ShoutyStatsServiceException(String message) {\n        super(message);\n    }\n}\n","RevenueProviderContract.java":"import org.junit.Before;\nimport org.junit.Test;\nimport org.junit.Assert;\n\npublic abstract class RevenueProviderContract {\n\n\n  private RevenueProvider revenueProvider;\n\n  protected abstract RevenueProvider getRevenueProvider();\n\n  @Before\n  public void setUp() {\n    revenueProvider = getRevenueProvider();\n  }\n\n  @Test\n  public void revenue_provider_returns_revenue_for_valid_customer_id() {\n  }\n\n  @Test\n  public void revenue_provider_throws_exception_for_invalid_customer_id() {\n  }\n}\n","ProductionRevenueProviderContractTests.java":"public class ProductionRevenueProviderContractTests\n                            extends RevenueProviderContract {\n\n    public ProductionRevenueProviderContractTests() {}\n\n    @Override\n    protected ProductionRevenueProvider getRevenueProvider(){\n        return new ProductionRevenueProvider();\n    }\n}\n","XmlHelper.java":"import org.w3c.dom.Document;\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.Writer;\n\n/**\n * Simplify working with XML by wrapping common methods in an API\n * that doesn't throw checked exceptions.\n */\npublic class XmlHelper {\n    private static DocumentBuilder documentBuilder;\n    private static Transformer transformer;\n\n    static {\n        try {\n            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n            documentBuilder = docFactory.newDocumentBuilder();\n\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            transformer = transformerFactory.newTransformer();\n            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, \"yes\");\n            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static Document newDocument() {\n        return documentBuilder.newDocument();\n    }\n\n    public static Document parse(String xml) {\n        try {\n            return documentBuilder.parse(new InputSource(new StringReader(xml)));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void write(Document doc, String fileName) {\n        try {\n            write(doc, new FileWriter(fileName));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void write(Document doc, Writer writer) {\n        doc.setXmlStandalone(true);\n        Source source = new DOMSource(doc);\n        Result result = new StreamResult(writer);\n        try {\n            transformer.transform(source, result);\n        } catch (TransformerException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n","test_case_1_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat RevenuePerMile=\"0.9496676\" SalespersonName=\"David Allen\"/>\n</ecoReport>","test_case_1_input.csv":"David Allen,130000,57","test_case_2_expected.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecoReport>\n  <ecoStat RevenuePerMile=\"0.9496676\" SalespersonName=\"David Allen\"/>\n  <ecoStat RevenuePerMile=\"4.5724735\" SalespersonName=\"Lisa Crispin\"/>\n  <ecoStat RevenuePerMile=\"0.006417054\" SalespersonName=\"Ian Dees\"/>\n</ecoReport>","test_case_2_input.csv":"David Allen,130000,57\nLisa Crispin,27000,19\nIan Dees,19238855,22\n","UnitTests.java":"import org.junit.Assert;\nimport org.junit.Test;\n\npublic class UnitTests {\n    @Test\n    public void milage_claim_can_be_created_from_strings() {\n        MileageClaim claim = new MileageClaim(\"David Allen\", 37000, 99);\n        Assert.assertEquals(\"David Allen\", claim.name);\n        Assert.assertEquals(37000, claim.miles);\n        Assert.assertEquals(99, claim.customerID);\n    }\n}\n","output":"ShoutyReportProcessor.java:23: error: variable revenue is already defined in method process()\n            double revenue = Double.parseDouble(revenue);\n                   ^\nShoutyReportProcessor.java:23: error: incompatible types: Double cannot be converted to String\n            double revenue = Double.parseDouble(revenue);\n                                                ^\nShoutyReportProcessor.java:24: error: incompatible types: Double cannot be converted to float\n            float revenuePerMile = (float) revenue / (float) claim.miles;\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"}