{"id":"CAC4B05E75","created":[2018,4,15,20,10,22],"image_name":"cyberdojofoundation/java_cucumber_spring","language":"Shouty-Java","exercise":null,"tab_size":4,"visible_files":{"output":"JUnit version 4.12\n.............................\n5 Scenarios (5 passed)\n21 Steps (21 passed)\n0m0.232s\n\n\nTime: 1.236\n\nOK (29 tests)\n\nApr 15, 2018 8:09:37 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@40005471: startup date [Sun Apr 15 20:09:37 GMT 2018]; root of context hierarchy\nApr 15, 2018 8:09:37 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [cucumber.xml]\n","Coordinate.java":"public class Coordinate \n{\n    private int x;\n    private int y;\n\n    public Coordinate(int xCoord, int yCoord) {\n        x = xCoord;\n        y = yCoord;\n    }\n\n    public int distanceFrom(Coordinate other) {\n        int xDelta = x - other.x;\n        int yDelta = y - other.y;\n        return (int)Math.sqrt(xDelta*xDelta + yDelta*yDelta);\n    }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest \n{\n    @Test\n    public void it_calculates_the_distance_from_itself() {\n        Coordinate a = new Coordinate(0, 0);\n        assertEquals(0, a.distanceFrom(a));\n    }\n\n    @Test\n    public void it_calculates_the_distance_from_another_coordinate_along_x_axis() {\n        Coordinate a = new Coordinate(0, 0);\n        Coordinate b = new Coordinate(600, 0);\n        assertEquals(600, a.distanceFrom(b));\n    }\n\n    @Test\n    public void it_calculates_the_distance_from_another_coordinate() {\n        Coordinate a = new Coordinate(0, 0);\n        Coordinate b = new Coordinate(300, 400);\n        assertEquals(500, a.distanceFrom(b));\n    }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.PendingException;\nimport cucumber.api.DataTable;\nimport java.util.*;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class ShoutSteps\n{\n    private final String ARBITRARY_MESSAGE = \"Hello, world\";\n    \n    private final Shouty shouty = new Shouty();\n\n    @Given(\"^(Lucy|Sean|Oscar) is at (\\\\d+), (\\\\d+)$\")\n    public void person_is_at(String name, int xCoord, int yCoord) throws Throwable {\n        shouty.setLocation(name, new Coordinate(xCoord, yCoord));\n    }    \n\n    @When(\"^(Lucy|Sean|Oscar) shouts$\")\n    public void person_shouts(String name) throws Throwable {\n        shouty.shout(name, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"^Lucy should hear Sean$\")\n    public void lucy_should_hear_Sean() throws Throwable {\n        assertTrue(heardBy(\"Lucy\").containsKey(\"Sean\"));\n    }\n\n    @Then(\"^Lucy should hear nothing$\")\n    public void lucy_should_hear_nothing() throws Throwable {\n        assertEquals(0, heardBy(\"Lucy\").size());\n    }\n    \n    @Then(\"^Lucy should not hear (Oscar|Lucy)$\")\n    public void lucy_should_not_hear_person(String name) throws Throwable {\n        assertFalse(heardBy(\"Lucy\").containsKey(name));\n    }\n    \n    @Given(\"^people are located at$\")\n    public void peopleAreLocatedAt(List<PersonLocation> table) throws Throwable {\n        for(PersonLocation row : table)\n        {\n            shouty.setLocation(row.name, new Coordinate(row.x, row.y));            \n        }\n    }\n    \n    @Then(\"^Lucy should hear (\\\\d+) shouts from Sean$\")\n    public void lucyShouldHearShoutsFromSean(int n) throws Throwable {\n        assertEquals(2, heardBy(\"Lucy\").get(\"Sean\").size());\n    }    \n    \n    private Map<String, List<String>> heardBy(String name) {\n        return shouty.getShoutsHeardBy(name);\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n    \n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String>> shouts = new HashMap<String, List<String>>();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String>> getShoutsHeardBy(String listener) {\n      HashMap<String, List<String>> shoutsHeard = new HashMap<String, List<String>>();\n\n      for (Map.Entry<String, List<String>> entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (!listener.equals(shouter) && distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario Outline: only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        Examples: some simple examples\n          | Seans-location | what-Lucy-hears |\n          | 0, 900         | Sean            |\n          | 800, 800       | nothing         |\n\n    Scenario: Multiple shouters\n        Given people are located at\n            |name  |x   |y  |\n            |Lucy  |0   |0  |\n            |Sean  |0   |500|\n            |Oscar |1100|0  |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n    Scenario: shouters should not hear their own shouts        \n        Given Lucy is at 0, 0\n        When Lucy shouts\n        Then Lucy should not hear Lucy\n        \n    Scenario: Multiple shouts from one person\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        When Sean shouts\n        And Sean shouts\n        Then Lucy should hear 2 shouts from Sean        ","PersonLocation.java":"\npublic class PersonLocation\n{\n    public String name;\n    public int x;\n    public int y;\n}\n"},"display_name":"Shouty, Java","filename_extension":".java","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"]}