{"Coordinate.java":"public class Coordinate {\n  private int x;\n  private int y;\n\n  public Coordinate(int xCoord, int yCoord){\n    x = xCoord;\n    y = yCoord;\n  }\n\n  public int distanceFrom(Coordinate other){\n    // TODO: actually calculate distance beteen the coordinates.\n    //       e.g. return Math.abs(x - other.x);\n\n    double x_dist = Math.abs(x - other.x);\n    double y_dist = Math.abs(y - other.y);\n    int dist = (int)(Math.sqrt(x_dist * x_dist + y_dist * y_dist));\n    return dist;\n  }\n}\n","CoordinateTest.java":"import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class CoordinateTest {\n  @Test\n  public void itCalculatesTheDistanceFromItself() {\n      Coordinate a = new Coordinate(0, 0);\n      assertEquals(0, a.distanceFrom(a));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinateAlongXAxis() {\n      Coordinate a = new Coordinate(0, 0);\n      Coordinate b = new Coordinate(600, 0);\n      assertEquals(600, a.distanceFrom(b));\n  }\n\n  @Test\n  public void itCalculatesTheDistanceFromAnotherCoordinate() {\n       Coordinate a = new Coordinate(0, 0);\n       Coordinate b = new Coordinate(300, 400);\n       assertEquals(500, a.distanceFrom(b));\n  }\n}\n","RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, plugin=\"junit:/tmp/output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","ShoutSteps.java":"import cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n\nimport static java.util.Collections.emptyMap;\nimport static org.junit.Assert.assertEquals;\n\n\npublic class ShoutSteps {\n    private static final String ARBITRARY_MESSAGE = \"Hello, world\";\n    private final Shouty shouty = new Shouty();\n\n    @Given(\"{word} is at {int}, {int}\")\n    public void person_is_at(String person, int xCoord, int yCoord) {\n        shouty.setLocation(person, new Coordinate(xCoord, yCoord));\n    }\n\n    @When(\"{word} shouts\")\n    public void person_shouts(String person) {\n        shouty.shout(person, ARBITRARY_MESSAGE);\n    }\n\n    @Then(\"{word} should hear Sean\")\n    public void lucy_should_hear_sean(String person1) {\n        assertEquals(1, shouty.getShoutsHeardBy(person1).size());\n    }\n\n    @Then(\"{word} should hear nothing\")\n    public void lucy_should_hear_nothing(String person) {\n        assertEquals(emptyMap(), shouty.getShoutsHeardBy(person));\n    }\n    \n    @Then(\"{word} should not hear {word}\")\n    public void lucyShouldNotHearOscar(String person1, String person2) {\n        assertEquals(emptyMap(), shouty.getShoutsHeardByFrom(person1, person2));\n    }\n    \n    @Given(\"people are located at\")\n    public void peopleAreLocatedAt(List<PersonLocation> personLocationList) {\n        for (PersonLocation personLocation : personLocationList) {\n            shouty.setLocation(personLocation.getName(), new Coordinate(personLocation.getX(), personLocation.getY()));\n        }\n    }\n}\n","Shouty.java":"import java.util.*;\n\npublic class Shouty {\n  private static final int MESSAGE_RANGE = 1000;\n  private Map<String, Coordinate> locations = new HashMap<String, Coordinate>();\n  private Map<String, List<String> > shouts = new HashMap<String, List<String> >();\n\n  public void setLocation(String person, Coordinate location) {\n      locations.put(person, location);\n  }\n\n  public void shout(String shouter, String shout) {\n      if (!shouts.containsKey(shouter)) {\n          List<String> personsShouts = new ArrayList<String>();\n          shouts.put(shouter, personsShouts);\n      }\n\n      shouts.get(shouter).add(shout);\n  }\n\n  public Map<String, List<String> > getShoutsHeardBy(String listener) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          String shouter = entry.getKey();\n          List<String> personsShouts = entry.getValue();\n          int distance = locations.get(listener).distanceFrom(locations.get(shouter));\n          if (distance < MESSAGE_RANGE)\n              shoutsHeard.put(shouter, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n    \n  public Map<String, List<String> > getShoutsHeardByFrom(String listener, String sender) {\n      HashMap<String, List<String> > shoutsHeard = new HashMap<String, List<String> >();\n\n      for (Map.Entry<String, List<String> > entry : shouts.entrySet()) {\n          //String shouter = entry.getKey();\n      \n          List<String> personsShouts = entry.getValue();\n          \n          Coordinate location1 = locations.get(listener);\n          Coordinate location2 = locations.get(sender);\n\n          int distance = 0;\n          if (location1 != null) {\n            distance = location1.distanceFrom(locations.get(sender));\n          }\n          \n          if (distance < MESSAGE_RANGE && distance > 0)\n              shoutsHeard.put(sender, personsShouts);\n      }\n\n      return shoutsHeard;\n  }\n\n}\n","ShoutyTypes.java":"import cucumber.api.TypeRegistry;\nimport io.cucumber.cucumberexpressions.CaptureGroupTransformer;\nimport io.cucumber.cucumberexpressions.ParameterType;\nimport io.cucumber.datatable.DataTableType;\nimport io.cucumber.datatable.TableEntryTransformer;\n\nimport java.util.Locale;\n\nimport static java.lang.Integer.parseInt;\n\npublic class ShoutyTypes implements cucumber.api.TypeRegistryConfigurer {\n    @Override\n    public Locale locale() {\n        return Locale.ENGLISH;\n    }\n\n    @Override\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\n        typeRegistry.defineDataTableType(\n            new DataTableType(\n                PersonLocation.class,(\n                    TableEntryTranformer<PersonLocation>) row -> {\n                    String name = row.get(\"name\");\n                    int x = row.get(\"x\");\n                    int y = row.get(\"y\");\n                    return new PersonLocation(name, x, y);\n                }));\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","cucumber.xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n    <bean class=\"Shouty\" autowire-candidate=\"true\" />\n\n    <context:annotation-config/>\n\n</beans>\n","hear_shout.feature":"Feature: Hearing a shout\n\n    Shouts have a range of approximately 1000 metres\n\n    Scenario: In range shout is heard\n        Given Lucy is at 0, 0\n        And Sean is at 0, 900\n        When Sean shouts\n        Then Lucy should hear Sean\n\n      Scenario: Out of range shout is not heard\n        Given Lucy is at 0, 0\n        And Sean is at 800, 800\n        When Sean shouts\n        Then Lucy should hear nothing\n        \n      Scenario: Multiple shouters\n        Given Lucy is at 0, 0\n        And Sean is at 0, 500\n        And Oscar is at 1100, 0\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n        \n      Scenario: Shouter should not hear their own shouts\n        Given Lucy shouts\n        Then Lucy should not hear Lucy\n        \n      Scenario Outline: Only hear in-range shouts\n        Given Lucy is at 0, 0\n        And Sean is at <Seans-location>\n        When Sean shouts\n        Then Lucy should hear <what-Lucy-hears>\n        Examples:\n          |Seans-location |  what-Lucy-hears | \n          |0, 900         |  Sean            |\n          |800, 800       |  nothing         |\n          \n      Scenario: Multiple shouters\n        Given people are located at\n        | name  | x    | y   |\n        | Lucy  | 0    | 0   |\n        | Sean  | 0    | 500 | \n        | Oscar | 1100 | 0   |\n        When Sean shouts\n        And Oscar shouts\n        Then Lucy should not hear Oscar\n        But Lucy should hear Sean\n","output":"ShoutSteps.java:39: error: cannot find symbol\n    public void peopleAreLocatedAt(List<PersonLocation> personLocationList) {\n                                   ^\n  symbol:   class List\n  location: class ShoutSteps\nShoutyTypes.java:22: error: cannot find symbol\n                    TableEntryTranformer<PersonLocation>) row -> {\n                    ^\n  symbol:   class TableEntryTranformer\n  location: class ShoutyTypes\n2 errors\n","PersonLocation.java":"import java.util.*;\n\npublic class PersonLocation {\n    private String name;\n    private int x;\n    private int y;\n    \n    public PersonLocation(String _name, int _x, int _y) {\n        name = _name;\n        x = _x;\n        y = _y;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n}\n"}