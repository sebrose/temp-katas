{"Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          return (int)Math.Sqrt(\n              Math.Pow(xCoord - other.xCoord, 2) + \n              Math.Pow(yCoord - other.yCoord, 2)\n          );\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n         [Test]\n         public void ItCalculatesTheDistanceFromAnotherCoordinate()\n         {\n             Coordinate a = new Coordinate(0, 0);\n             Coordinate b = new Coordinate(300, 400);\n             Assert.AreEqual(500, a.DistanceFrom(b));\n         }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n\n  Scenario: Multiple shouters\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: Shouters should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should not hear Lucy","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(Lucy|Sean|Oscar) is at (.*), (.*)\")]\n        public void GivenListenerIsAt(string listenerName,int xCoord, int yCoord)\n        {\n            shouty.SetLocation(listenerName, new Coordinate(xCoord, yCoord));\n        }\n\n        [When(@\"(.*) shouts\")]\n        public void WhenShouterShouts(string shouterName)\n        {\n            shouty.Shout(shouterName, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"(Lucy) should hear (.*)\")]\n        public void ThenListenerShouldHearShouter(string listenerName, string shouterName)\n        {\n            Assert.IsTrue(shouty.GetShoutsHeardBy(listenerName).ContainsKey(shouterName));\n        }\n\n        [Then(@\"(Lucy) should hear nothing\")]\n        public void ThenListenerShouldHearNothing(string listenerName)\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(listenerName).Count);\n        }\n        \n        [Then(@\"(Lucy) should not hear (.*)\")]\n        public void ThenListenerShouldNotHearShouter(string listenerName, string shouterName)\n        {\n            Assert.IsFalse(shouty.GetShoutsHeardBy(listenerName).ContainsKey(shouterName));\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                var personsShouts = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE && shouter != listenerName)\n                    shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.InRangeShoutIsHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenListenerIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenListenerIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShouters\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenListenerIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 500\n-> done: ShoutSteps.GivenListenerIsAt(\"Sean\", 0, 500) (0.0s)\nAnd Oscar is at 1100, 0\n-> done: ShoutSteps.GivenListenerIsAt(\"Oscar\", 1100, 0) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Oscar\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Lucy\", \"Oscar\") (0.0s)\nBut Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenListenerIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 800, 800\n-> done: ShoutSteps.GivenListenerIsAt(\"Sean\", 800, 800) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> binding error: Ambiguous step definitions found for step 'Then Lucy should hear nothing': ShoutSteps.ThenListenerShouldHearShouter(String, String), ShoutSteps.ThenListenerShouldHearNothing(String)\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nWhen Lucy shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Lucy\") (0.0s)\nThen Lucy should not hear Lucy\n-> error: The given key was not present in the dictionary.\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Error : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found for step 'Then Lucy should hear nothing': ShoutSteps.ThenListenerShouldHearShouter(String, String), ShoutSteps.ThenListenerShouldHearNothing(String)\n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetStepMatch (TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0003f] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x00033] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard () [0x0006f] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\n2) Error : SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts\nSystem.Collections.Generic.KeyNotFoundException : The given key was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at Shouty.ShoutyNetwork.GetShoutsHeardBy (System.String listenerName) [0x00030] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at Shouty.Specs.ShoutSteps.ThenListenerShouldNotHearShouter (System.String listenerName, System.String shouterName) [0x00000] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager,string,string)\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n  at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding (TechTalk.SpecFlow.Bindings.IBinding binding, TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, System.Object[] arguments, TechTalk.SpecFlow.Tracing.ITestTracer testTracer, System.TimeSpan& duration) [0x000f3] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch (TechTalk.SpecFlow.Bindings.BindingMatch match, System.Object[] arguments) [0x00076] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep (TechTalk.SpecFlow.Infrastructure.IContextManager contextManager, TechTalk.SpecFlow.Bindings.StepInstance stepInstance) [0x0007d] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep () [0x001f7] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors () [0x00000] in <8c195ba137884726be2697e1899c5ddd>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ScenarioCleanup () [0x00000] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at SpecFlow.GeneratedTests.HearShoutFeature.ShoutersShouldNotHearTheirOwnShouts () [0x00041] in <f4f00dfccf4748839acf3fc852eb12b0>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <73ee1b14c2fa4d61b481096ff3d8d6d7>:0 \n\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: /sandboxes/walrus\n    ImageRuntimeVersion: 4.0.30319\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\n\nTest Run Summary\n  Overall result: Failed\n  Test Count: 7, Passed: 5, Failed: 2, Warnings: 0, Inconclusive: 0, Skipped: 0\n    Failed Tests - Failures: 0, Errors: 2, Invalid: 0\n  Start time: 2018-08-15 19:56:29Z\n    End time: 2018-08-15 19:56:30Z\n    Duration: 1.083 seconds\n\nResults (nunit3) saved as TestResult.xml\n","ShoutyNetworkTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n   /* [TestFixture]\n    public class ShoutyNetworkTest\n    {\n        [Test]\n        public void ShouterIsNotSelf()\n        {\n           Assert.AreEqual(0, new GetShoutsHeardBy(\"Lucy\"));\n        }\n    }*/\n}"}