{"output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.InRangeShoutIsHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenUserIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 900\n-> done: ShoutSteps.GivenUserIsAt(\"Sean\", 0, 900) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nThen Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutersAllHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenUserIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 500\n-> done: ShoutSteps.GivenUserIsAt(\"Sean\", 0, 500) (0.0s)\nAnd Oscar is at 300, 400\n-> done: ShoutSteps.GivenUserIsAt(\"Oscar\", 300, 400) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Oscar\") (0.0s)\nThen Lucy should hear Oscar\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Oscar\") (0.0s)\nBut Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.MultipleShoutersOneHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenUserIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 0, 500\n-> done: ShoutSteps.GivenUserIsAt(\"Sean\", 0, 500) (0.0s)\nAnd Oscar is at 1100, 0\n-> done: ShoutSteps.GivenUserIsAt(\"Oscar\", 1100, 0) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nAnd Oscar shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Oscar\") (0.0s)\nThen Lucy should not hear Oscar\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Lucy\", \"Oscar\") (0.0s)\nBut Lucy should hear Sean\n-> done: ShoutSteps.ThenListenerShouldHearShouter(\"Lucy\", \"Sean\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\nGiven Lucy is at 0, 0\n-> done: ShoutSteps.GivenUserIsAt(\"Lucy\", 0, 0) (0.0s)\nAnd Sean is at 800, 800\n-> done: ShoutSteps.GivenUserIsAt(\"Sean\", 800, 800) (0.0s)\nWhen Sean shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Sean\") (0.0s)\nThen Lucy should hear nothing\n-> error:   Expected: True\n  But was:  False\n\n=> SpecFlow.GeneratedTests.HearShoutFeature.ShouterShouldNotHearTheirOwnShouts\nWhen Lucy shouts\n-> done: ShoutSteps.WhenShouterShouts(\"Lucy\") (0.0s)\nThen Lucy should not hear Lucy\n-> done: ShoutSteps.ThenListenerShouldNotHearShouter(\"Lucy\", \"Lucy\") (0.0s)\n=> SpecFlow.GeneratedTests.HearShoutFeature\n-> Using specflow.json\n\nErrors, Failures and Warnings\n\n1) Failed : SpecFlow.GeneratedTests.HearShoutFeature.OutOfRangeShoutIsNotHeard\n  Expected: True\n  But was:  False\nat Shouty.Specs.ShoutSteps.ThenListenerShouldHearShouter (System.String listener, System.String shouter) [0x00012] in <8a429ec556f04249b7637bb216e10fd8>:0\nat (wrapper dynamic-method) System.Object:lambda_method (System.Runtime.CompilerServices.Closure,TechTalk.SpecFlow.Infrastructure.IContextManager,string,string)\n\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: /sandboxes/tuna\n    ImageRuntimeVersion: 4.0.30319\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\n\nTest Run Summary\n  Overall result: Failed\n  Test Count: 8, Passed: 7, Failed: 1, Warnings: 0, Inconclusive: 0, Skipped: 0\n    Failed Tests - Failures: 1, Errors: 0, Invalid: 0\n  Start time: 2018-08-15 19:51:00Z\n    End time: 2018-08-15 19:51:01Z\n    Duration: 1.077 seconds\n\nResults (nunit3) saved as TestResult.xml\n","Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          // TODO: actually calculate distance beteen the coordinates.\n          //       e.g. return Math.Abs(xCoord - other.xCoord);\n\n          return (int)Math.Sqrt(\n              Math.Pow(Math.Abs(xCoord - other.xCoord),2)\n              +\n              Math.Pow(Math.Abs(yCoord - other.yCoord),2)\n          );\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(300, 400);\n            Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Scenario: In range shout is heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 900\n    When Sean shouts\n    Then Lucy should hear Sean\n\n  Scenario: Out of range shout is not heard\n    Given Lucy is at 0, 0\n    And Sean is at 800, 800\n    When Sean shouts\n    Then Lucy should hear nothing\n\nScenario: Shouter should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n\nScenario: Multiple Shouters One Heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n Scenario: Multiple Shouters All Heard\n    Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    And Oscar is at 300, 400\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should hear Oscar\n    But Lucy should hear Sean","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty = new ShoutyNetwork();\n\n        [Given(@\"(.*) is at (\\d*), (\\d*)\")]\n        public void GivenUserIsAt(string name, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n        [When(@\"(.*) shouts\")]\n        public void WhenShouterShouts(string shouter)\n        {\n            shouty.Shout(shouter, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"(.*) should hear (.*)\")]\n        public void ThenListenerShouldHearShouter(string listener, string shouter)\n        {\n             Assert.IsTrue(shouty.GetShoutsHeardBy(listener).ContainsKey(shouter));\n        }\n\n        [Then(@\"no shouts should be heard by (.*)\")]\n        public void ThenListenerShouldHearNothing(string listener)\n        {\n            Assert.AreEqual(0, shouty.GetShoutsHeardBy(listener).Count);\n        }\n        \n        [Then(@\"(.*) should not hear (.*)\")]\n        public void ThenListenerShouldNotHearShouter(string listener, string shouter)\n        {\n             Assert.IsFalse(shouty.GetShoutsHeardBy(listener).ContainsKey(shouter));\n        }\n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                \n                if (shouter == listenerName) continue;\n                \n                var personsShouts = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE)\n                    shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n"}