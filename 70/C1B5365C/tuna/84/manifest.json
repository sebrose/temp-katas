{"output":"-> Using specflow.json\nRuntime Environment\n   OS Version: Linux 4.8.0.54 \n  CLR Version: 4.0.30319.42000\n\nTest Files\n    ./RunTests.dll\n\n\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: /sandboxes/tuna\n    ImageRuntimeVersion: 4.0.30319\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\n\nTest Run Summary\n  Overall result: Passed\n  Test Count: 3, Passed: 3, Failed: 0, Warnings: 0, Inconclusive: 0, Skipped: 0\n  Start time: 2018-08-15 22:15:54Z\n    End time: 2018-08-15 22:15:55Z\n    Duration: 0.724 seconds\n\nResults (nunit3) saved as TestResult.xml\nError file HearShout.feature\nLine 6:3 - (6:3): expected: #EOF, #TableRow, #DocStringSeparator, #StepLine, #TagLine, #ScenarioLine, #ScenarioOutlineLine, #Comment, #Empty, got 'Shouts have a range of approximately 1000m'\n","Coordinate.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Shouty\n{\n    public class Coordinate\n    {\n        private readonly int xCoord;\n        private readonly int yCoord;\n\n        public Coordinate(int xCoord, int yCoord)\n        {\n            this.xCoord = xCoord;\n            this.yCoord = yCoord;\n        }\n\n        public int DistanceFrom(Coordinate other)\n        {\n          // TODO: actually calculate distance beteen the coordinates.\n          //       e.g. return Math.Abs(xCoord - other.xCoord);\n\n          return (int)Math.Sqrt(\n              Math.Pow(Math.Abs(xCoord - other.xCoord),2)\n              +\n              Math.Pow(Math.Abs(yCoord - other.yCoord),2)\n          );\n        }\n    }\n}\n","CoordinateTest.cs":"using System;\nusing Shouty;\nusing NUnit.Framework;\n\nnamespace Shouty.Tests\n{\n    [TestFixture]\n    public class CoordinateTest\n    {\n        [Test]\n        public void ItCalculatesTheDistanceFromItself()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Assert.AreEqual(0, a.DistanceFrom(a));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinateAlongXAxis()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(600, 0);\n            Assert.AreEqual(600, a.DistanceFrom(b));\n        }\n\n        [Test]\n        public void ItCalculatesTheDistanceFromAnotherCoordinate()\n        {\n            Coordinate a = new Coordinate(0, 0);\n            Coordinate b = new Coordinate(300, 400);\n            Assert.AreEqual(500, a.DistanceFrom(b));\n        }\n    }\n}\n","HearShout.feature":"Feature: Hear Shout\n\nBackground:\n    Given Lucy is at 11000, 0\n\n  Shouts have a range of approximately 1000m\n\nScenario Outline: only hear in-range shouts\n    #Given Lucy is at 0, 0\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-Lucy-hears>\n    \nExamples: some simple examples\n        | id | Seans-location | what-Lucy-hears |\n        | 01 | 0, 900         | Sean            |\n        | 02 | 800, 800       | nothing         |\n\nExamples: some additional examples\n        | id | Seans-location | what-Lucy-hears |\n        | 03 | 900, 900       | nothing            |\n        | 04 | 800, 800       | nothing         |\n\nScenario: Multiple shouts from one person \n    #Given Lucy is at 0, 0\n    And Sean is at 0, 500\n    When Sean shouts\n    And Sean shouts\n    Then Lucy should hear 2 shouts from Sean\n\nScenario: Shouter should not hear their own shouts\n    When Lucy shouts\n    Then Lucy should not hear Lucy\n\nScenario: Multiple Shouters One Heard\n    Given people are located at\n        | name | x  | y |\n        | Lucy | 0  | 0 |\n        | Sean | 0  | 500 |\n        | Oscar | 1100 | 0 |\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n Scenario: Multiple Shouters All Heard\n    #Given Lucy is at 0, 0\n    Given Sean is at 0, 500\n    And Oscar is at 300, 400\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should hear Oscar\n    But Lucy should hear Sean","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","ShoutSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\nusing TechTalk.SpecFlow.Assist;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class ShoutSteps\n    {\n        public ShoutSteps(ShoutyNetwork sh)\n        {\n            shouty = sh;\n        }\n\n        private const string ARBITRARY_MESSAGE = \"Hello, world\";\n        private readonly ShoutyNetwork shouty;\n\n        [When(@\"(.*) shouts\")]\n        public void WhenShouterShouts(string shouter)\n        {\n            shouty.Shout(shouter, ARBITRARY_MESSAGE);\n        }\n\n        [Then(@\"(.*) should hear ([a-zA-Z]*)\")]\n        public void ThenListenerShouldHearShouter(string listener, string shouter)\n        {\n            if (shouter == \"nothing\")\n                Assert.IsTrue(shouty.GetShoutsHeardBy(listener).Count == 0);\n            else\n                Assert.IsTrue(shouty.GetShoutsHeardBy(listener).ContainsKey(shouter));\n        }\n\n         [Then(@\"(.*) should hear (\\d*) shouts from ([a-zA-Z]*)\")]\n        public void ThenLucyShouldHearShoutsFromSean(string listener, int numOfShouts, string shouter)\n        {\n                Assert.IsTrue(shouty.GetShoutsHeardBy(listener)[shouter].Count == numOfShouts);\n        }\n\n        [Then(@\"(.*) should not hear (.*)\")]\n        public void ThenListenerShouldNotHearShouter(string listener, string shouter)\n        {\n             Assert.IsFalse(shouty.GetShoutsHeardBy(listener).ContainsKey(shouter));\n        }\n       \n    }\n}\n","ShoutyNetwork.cs":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Shouty\n{\n    public class ShoutyNetwork\n    {\n        private readonly Dictionary<string, Coordinate> locationsByPerson = new Dictionary<string, Coordinate>();\n        private readonly Dictionary<string, List<string> > shoutsByPerson = new Dictionary<string, List<string> >();\n        private const int MESSAGE_RANGE = 1000;\n\n        public void SetLocation(string personName, Coordinate coordinate)\n        {\n            locationsByPerson[personName] = coordinate;\n        }\n\n        public void Shout(string shouterName, string message)\n        {\n            if (!shoutsByPerson.ContainsKey(shouterName))\n            {\n                List<string> personsShouts = new List<string>();\n                shoutsByPerson[shouterName] = personsShouts;\n            }\n\n            shoutsByPerson[shouterName].Add(message);\n        }\n\n        public IDictionary<string, List<string> > GetShoutsHeardBy(string listenerName)\n        {\n            var shoutsHeard = new Dictionary<string, List<string> >();\n\n            foreach (var shout in shoutsByPerson)\n            {\n                var shouter = shout.Key;\n                \n                if (shouter == listenerName) continue;\n                \n                var personsShouts = shout.Value;\n\n                int distance = locationsByPerson[shouter]\n                    .DistanceFrom(locationsByPerson[listenerName]);\n\n                if (distance < MESSAGE_RANGE)\n                    shoutsHeard.Add(shouter, personsShouts);\n            }\n\n            return shoutsHeard;\n        }\n    }\n}\n","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"specflow.json\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n","specflow.json":"{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\n","LocationSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing Shouty;\nusing NUnit.Framework;\nusing TechTalk.SpecFlow.Assist;\n\nnamespace Shouty.Specs\n{\n    [Binding]\n    public class LocationSteps\n    {\n        public LocationSteps(ShoutyNetwork sh)\n        {\n            shouty = sh;\n        }\n\n        private readonly ShoutyNetwork shouty;\n\n        [Given(@\"(.*) is at (\\d*), (\\d*)\")]\n        public void GivenUserIsAt(string name, int xCoord, int yCoord)\n        {\n            shouty.SetLocation(name, new Coordinate(xCoord, yCoord));\n        }\n\n        [Given(@\"people are located at\")]\n        public void GivenPeopleAreLocatedAt(Table table)\n        {\n             var userLocations = table.CreateSet<User>();\n\n             foreach (var user in userLocations)\n            {\n                shouty.SetLocation(user.Name, new Coordinate(user.X, user.Y));\n            }\n        }\n        \n\n        \n            public class User\n    {\n        public string Name { get; set; }\n        public int X { get; set; }\n        public int Y { get; set; }\n    }\n\n    }\n}\n","ShoutyHelper.cs":"using Shouty;\n\npublic static class ShoutyHelper\n{\n\n    public static ShoutyNetwork Shouty {get;set;} = new ShoutyNetwork();\n}"}