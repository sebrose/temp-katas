{"id":"70BEB5433B","created":[2017,6,16,14,24,42],"image_name":"cyberdojofoundation/csharp_specflow","display_name":"C#, SpecFlow","filename_extension":".cs","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"language":"C#-SpecFlow","tab_size":4,"visible_files":{"Hiker.cs":"\npublic class Hiker\n{\n    public static int Answer\n    {\n        get { return 6 * 9; }\n    }\n}\n","HikerSteps.cs":"using System;\nusing TechTalk.SpecFlow;\nusing NUnit.Framework;\n\n[Binding]\npublic class HikerSteps\n{\n    private int answer;\n\n    [Given(@\"life, the universe and everything\")]\n    public void GivenLifeTheUniverseAndEverything()\n    {\n        // Life, the universe and everything needs no creation by us\n    }\n\n    [When(@\"I ask for the meaning\")]\n    public void WhenIAskForTheMeaning()\n    {\n        answer = Hiker.Answer;\n    }\n\n    [Then(@\"the answer is (.*)\")]\n    public void ThenTheAnswerIs(int expected)\n    {\n        Assert.AreEqual(expected, answer);\n    }\n}","HikerSpec.feature":"Feature: A simple specification to start you off\n\n  Scenario: The meaning of life, the universe and everything\n    Given life, the universe and everything\n    When I ask for the meaning\n    Then the answer is 42","cyber-dojo.sh":"#!/bin/bash\n\n# build project file\nCSPROJ=RunTests.csproj\n\necho \"<Project xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\" > $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\n\nfor f in *.feature\ndo\n  echo \"    <None Include=\\\"$f\\\">\" >> $CSPROJ\n  echo \"      <Generator>SpecFlowSingleFileGenerator</Generator>\" >> $CSPROJ\n  echo \"      <LastGenOutput>$f.cs</LastGenOutput>\" >> $CSPROJ\n  echo \"    </None>\" >> $CSPROJ\ndone\n\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"  <ItemGroup>\" >> $CSPROJ\necho \"    <None Include=\\\"RunTests.dll.config\\\" />\" >> $CSPROJ\necho \"  </ItemGroup>\" >> $CSPROJ\necho \"</Project>\" >> $CSPROJ\n\nNUNIT_PATH=/nunit/NUnit.2.6.2/lib\nexport MONO_PATH=${NUNIT_PATH}\n\n# generate 'code behind'\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/usr/lib/mono/SpecFlow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/NUnit.Runners.2.6.1/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit-console.exe -nologo ./RunTests.dll\nfi\n","RunTests.dll.config":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\"\n      type=\"TechTalk.SpecFlow.Configuration.ConfigurationSectionHandler, TechTalk.SpecFlow\"/>\n  </configSections>\n  <specFlow>\n    <unitTestProvider name=\"NUnit\" />\n    <runtime \n        missingOrPendingStepsOutcome=\"Error\" />\n  </specFlow>\n</configuration>\n","output":"","instructions":"Suppose you're on a game show and you're given the\nchoice of three doors. Behind one door is a car; behind\nthe others, goats. The car and the goats were\nplaced randomly behind the doors before the show.\n\nThe rules of the game show are as follows:\n\nAfter you have chosen a door, the door remains closed\nfor the time being. The game show host, Monty Hall, who\nknows what is behind the doors, now has to open one of\nthe two remaining doors, and the door he opens must have\na goat behind it. If both remaining doors have goats\nbehind them, he chooses one randomly. After Monty Hall\nopens a door with a goat, he will ask you to decide\nwhether you want to stay with your first choice or to\nswitch to the last remaining door.\n\nFor example:\nImagine that you chose Door 1 and the host opens Door 3,\nwhich has a goat. He then asks you \"Do you want to switch\nto Door Number 2?\" Is it to your advantage to change your\nchoice?\n\nNote that the player may initially choose any of the\nthree doors (not just Door 1), that the host opens a\ndifferent door revealing a goat (not necessarily Door 3),\nand that he gives the player a second choice between the\ntwo remaining unopened doors.\n\nSimulate at least a thousand games using three doors for\neach strategy and show the results in such a way as to make\nit easy to compare the effects of each strategy.\n\n[Source http://rosettacode.org]"},"exercise":"Monty_Hall"}