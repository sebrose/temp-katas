{"output":"...\n\nFinished in 0.00282 seconds (files took 0.12734 seconds to load)\n3 examples, 0 failures\n\nThere is already a parameter with name fred (Cucumber::CucumberExpressions::CucumberExpressionError)\n/usr/local/bundle/gems/cucumber-expressions-5.0.7/lib/cucumber/cucumber_expressions/parameter_type_registry.rb:46:in `define_parameter_type'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/glue/registry_and_more.rb:78:in `define_parameter_type'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/glue/dsl.rb:26:in `define_parameter_type'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/glue/dsl.rb:102:in `ParameterType'\n/sandboxes/porcupine/parameter_types.rb:3:in `<top (required)>'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/glue/registry_and_more.rb:106:in `load'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/glue/registry_and_more.rb:106:in `load_code_file'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime/support_code.rb:147:in `load_file'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime/support_code.rb:88:in `block in load_files!'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime/support_code.rb:87:in `each'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime/support_code.rb:87:in `load_files!'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime.rb:270:in `load_step_definitions'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/runtime.rb:67:in `run!'\n/usr/local/bundle/gems/cucumber-3.1.0/lib/cucumber/cli/main.rb:33:in `execute!'\n/usr/local/bundle/gems/cucumber-3.1.0/bin/cucumber:9:in `<top (required)>'\n/usr/local/bundle/bin/cucumber:23:in `load'\n/usr/local/bundle/bin/cucumber:23:in `<main>'\n","cyber-dojo.sh":"rspec . --format progress\n\n# Test output can be formatted as progress or documentation\ncucumber -f progress ./*.feature -r shout_steps.rb -r location_steps.rb -r shouty_hooks.rb -r parameter_types.rb\n","coordinate_spec.rb":"require_relative 'coordinate'\n\ndescribe Coordinate do\n  it \"calculates the distance from itself\" do\n    a = Coordinate.new(0, 0)\n    expect(a.distance_from(a)).to eq(0)\n  end\n\n  it \"calculates the distance from another coordinate along x axis\" do\n    a = Coordinate.new(0, 0)\n    b = Coordinate.new(600, 0)\n    expect(a.distance_from(b)).to eq(600)\n  end\n\n  it \"calculates the distance from another coordinate\" do\n    a = Coordinate.new(0, 0)\n    b = Coordinate.new(300, 400)\n   expect(a.distance_from(b)).to eq(500)\n  end\nend\n","coordinate.rb":"class Coordinate\n  attr_reader :x, :y\n\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\n\n  def distance_from(other)\n    # TODO: actually calculate distance between the coordinates.\n    x_cor = (@x - other.x).abs * (@x - other.x).abs\n    y_cor = (@y - other.y).abs * (@y - other.y).abs\n    \n    Math.sqrt(x_cor + y_cor)\n  end\nend\n","env.rb":"","hear_shout.feature":"Feature: Hear Shout\n\n  Shouts have a range of approximately 1000m\n\n  Background: \n    Given Lucy is at 0, 0\n    \n  Scenario Outline: In and out of range shouts\n    And Sean is at <Seans-location>\n    When Sean shouts\n    Then Lucy should hear <what-lucy-hears>\n    \n    Examples: Some simple examples\n    |Seans-location|what-lucy-hears|\n    |0, 900        |Sean           |\n    |800, 800      |nothing        | \n\n  Scenario: Multiple shouters\n    Given the people are located at\n      |name |x   |y  |\n      |Lucy |0   |0  |\n      |Sean |0   |500|\n      |Oscar|1100|0  |\n    And Sean is at 0, 500\n    And Oscar is at 1100, 0\n    When Sean shouts\n    And Oscar shouts\n    Then Lucy should not hear Oscar\n    But Lucy should hear Sean\n    \n  Scenario: The shouter should not hear their own shout\n    When Lucy shouts\n    Then Lucy should hear nothing\n    \n  Scenario: Multiple shouts from one person\n   And Sean is at 0, 500\n   When Sean shouts\n   And Sean shouts\n   Then Lucy should hear 2 shouts from Sean\n   ","shout_steps.rb":"ARBITRARY_MESSAGE = \"Hello, world\"\n\nWhen('{word} shouts') do |name|\n  @shouty.shout(name, ARBITRARY_MESSAGE)\nend\n\nThen('{word} should hear {word}') do |name1, name2|\n  if name2.to_s == \"nothing\"\n    expect(@shouty.shouts_heard_by(name1).size).to eq(0)\n  else\n    expect(@shouty.shouts_heard_by(name1).key?(name2)).eql?(true)\n  end\nend\n\nThen(\"{word} should not hear {word}\") do |name1, name2|   \n  expect(@shouty.shouts_heard_by(name1).key?(name2)).eql?(false)\nend\n\nThen(\"{word} should hear {int} shouts from {word}\") do |name1, num, name2|\n  keys  = @shouty.shouts_heard_by(name1)\n  v = 0\n  \n  keys.each do |k,val|\n    if k == name2\n      v = val.size\n    else\n      false\n    end\n    expect(v).to eq(num)  \n  end\nend","shouty.rb":"require_relative 'coordinate'\n\nclass Shouty\n    MESSAGE_RANGE = 1000\n\n    def initialize\n      @locations = {}\n      @shouts = {}\n    end\n\n    def set_location(person, location)\n      @locations[person] = location\n    end\n\n    def shout(person, shout)\n      @shouts[person] ||= [ ]\n      @shouts[person].push(shout)\n    end\n\n    def shouts_heard_by(listener)\n      shoutsHeard = {}\n\n      @shouts.each do |shouter, personsShouts|\n        distance = @locations[listener].distance_from(@locations[shouter])\n        if distance < MESSAGE_RANGE and !shouter.eql? listener\n          shoutsHeard[shouter] = personsShouts  \n        end\n      end\n\n      shoutsHeard\n    end\nend\n","spec_helper.rb":"# This file was generated by the `rspec --init` command. Conventionally, all\n# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.\n# The generated `.rspec` file contains `--require spec_helper` which will cause\n# this file to always be loaded, without a need to explicitly require it in any\n# files.\n#\n# Given that it is always loaded, you are encouraged to keep this file as\n# light-weight as possible. Requiring heavyweight dependencies from this file\n# will add to the boot time of your test suite on EVERY test run, even for an\n# individual file that may not need all of that loaded. Instead, consider making\n# a separate helper file that requires the additional dependencies and performs\n# the additional setup, and require it from the spec files that actually need\n# it.\n#\n# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration\nRSpec.configure do |config|\n  # rspec-expectations config goes here. You can use an alternate\n  # assertion/expectation library such as wrong or the stdlib/minitest\n  # assertions if you prefer.\n  config.expect_with :rspec do |expectations|\n    # This option will default to `true` in RSpec 4. It makes the `description`\n    # and `failure_message` of custom matchers include text for helper methods\n    # defined using `chain`, e.g.:\n    #     be_bigger_than(2).and_smaller_than(4).description\n    #     # => \"be bigger than 2 and smaller than 4\"\n    # ...rather than:\n    #     # => \"be bigger than 2\"\n    expectations.include_chain_clauses_in_custom_matcher_descriptions = true\n  end\n\n  # rspec-mocks config goes here. You can use an alternate test double\n  # library (such as bogus or mocha) by changing the `mock_with` option here.\n  config.mock_with :rspec do |mocks|\n    # Prevents you from mocking or stubbing a method that does not exist on\n    # a real object. This is generally recommended, and will default to\n    # `true` in RSpec 4.\n    mocks.verify_partial_doubles = true\n  end\n\n  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will\n  # have no way to turn it off -- the option exists only for backwards\n  # compatibility in RSpec 3). It causes shared context metadata to be\n  # inherited by the metadata hash of host groups and examples, rather than\n  # triggering implicit auto-inclusion in groups with matching metadata.\n  config.shared_context_metadata_behavior = :apply_to_host_groups\n\n# The settings below are suggested to provide a good initial experience\n# with RSpec, but feel free to customize to your heart's content.\n=begin\n  # This allows you to limit a spec run to individual examples or groups\n  # you care about by tagging them with `:focus` metadata. When nothing\n  # is tagged with `:focus`, all examples get run. RSpec also provides\n  # aliases for `it`, `describe`, and `context` that include `:focus`\n  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.\n  config.filter_run_when_matching :focus\n\n  # Allows RSpec to persist some state between runs in order to support\n  # the `--only-failures` and `--next-failure` CLI options. We recommend\n  # you configure your source control system to ignore this file.\n  config.example_status_persistence_file_path = \"spec/examples.txt\"\n\n  # Limits the available syntax to the non-monkey patched syntax that is\n  # recommended. For more details, see:\n  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/\n  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/\n  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode\n  config.disable_monkey_patching!\n\n  # This setting enables warnings. It's recommended, but in some cases may\n  # be too noisy due to issues in dependencies.\n  config.warnings = true\n\n  # Many RSpec users commonly either run the entire suite or an individual\n  # file, and it's useful to allow more verbose output when running an\n  # individual spec file.\n  if config.files_to_run.one?\n    # Use the documentation formatter for detailed output,\n    # unless a formatter has already been configured\n    # (e.g. via a command-line flag).\n    config.default_formatter = \"doc\"\n  end\n\n  # Print the 10 slowest examples and example groups at the\n  # end of the spec run, to help surface which specs are running\n  # particularly slow.\n  config.profile_examples = 10\n\n  # Run specs in random order to surface order dependencies. If you find an\n  # order dependency and want to debug it, you can fix the order by providing\n  # the seed, which is printed after each run.\n  #     --seed 1234\n  config.order = :random\n\n  # Seed global randomization in this process using the `--seed` CLI option.\n  # Setting this allows you to use `--seed` to deterministically reproduce\n  # test failures related to randomization by passing the same `--seed` value\n  # as the one that triggered the failure.\n  Kernel.srand config.seed\n=end\nend\n","location_steps.rb":"require_relative 'parameter_types'\n\nGiven('{word} is at {fred}') do |name, location|\n  @shouty.set_location(name, location)\nend\n\nGiven(\"the people are located at\") do |table|\n  table.hashes.each do |row|\n    @shouty.set_location(row[\"name\"], Coordinate.new(row[\"x\"].to_i, row[\"y\"].to_i))\n  end\nend\n","shouty_hooks.rb":"require_relative 'shouty'\n\nBefore do |scenario|\n @shouty = Shouty.new\n  p scenario.name\nend\n\nAfter do\n  p 'end session'\nend","parameter_types.rb":"require_relative 'coordinate'\n\nParameterType(\n  regexp: /(\\d+), (\\d+)/,\n  transformer: -> (x,y) {Coordinate.new(x.to_i, y.to_i)},\n  type: Coordinate,\n  name: 'fred',\n  use_for_snippets: true, \n  prefer_or_regexp_match: false\n)"}